
eBikeInterface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061b4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800638c  0800638c  0001638c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800639c  0800639c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800639c  0800639c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800639c  0800639c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800639c  0800639c  0001639c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063a0  080063a0  000163a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080063a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000010  080063b4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  080063b4  00020214  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013537  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000225f  00000000  00000000  00033577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  000357d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d0  00000000  00000000  000369a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001efdf  00000000  00000000  00037a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001168c  00000000  00000000  00056a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d30e4  00000000  00000000  000680db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013b1bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c80  00000000  00000000  0013b214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006374 	.word	0x08006374

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08006374 	.word	0x08006374

08000218 <NormalizeChannel>:
/* USER CODE BEGIN PFP */
void toogle_ADC_Channel(ADC_ChannelConfTypeDef*);


int32_t NormalizeChannel(uint16_t ChannelValue, int32_t InMin, int32_t InMax, int32_t OutMin, int32_t OutMax)
{
 8000218:	b480      	push	{r7}
 800021a:	b087      	sub	sp, #28
 800021c:	af00      	add	r7, sp, #0
 800021e:	60b9      	str	r1, [r7, #8]
 8000220:	607a      	str	r2, [r7, #4]
 8000222:	603b      	str	r3, [r7, #0]
 8000224:	4603      	mov	r3, r0
 8000226:	81fb      	strh	r3, [r7, #14]
	if ( ChannelValue <= InMin) return OutMin;
 8000228:	89fb      	ldrh	r3, [r7, #14]
 800022a:	68ba      	ldr	r2, [r7, #8]
 800022c:	429a      	cmp	r2, r3
 800022e:	db01      	blt.n	8000234 <NormalizeChannel+0x1c>
 8000230:	683b      	ldr	r3, [r7, #0]
 8000232:	e03a      	b.n	80002aa <NormalizeChannel+0x92>
	if ( ChannelValue >= InMax) return OutMax;
 8000234:	89fb      	ldrh	r3, [r7, #14]
 8000236:	687a      	ldr	r2, [r7, #4]
 8000238:	429a      	cmp	r2, r3
 800023a:	dc01      	bgt.n	8000240 <NormalizeChannel+0x28>
 800023c:	6a3b      	ldr	r3, [r7, #32]
 800023e:	e034      	b.n	80002aa <NormalizeChannel+0x92>

	float ScaleA = ((float)(OutMax - OutMin))/(float)(InMax - InMin);
 8000240:	6a3a      	ldr	r2, [r7, #32]
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	1ad3      	subs	r3, r2, r3
 8000246:	ee07 3a90 	vmov	s15, r3
 800024a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800024e:	687a      	ldr	r2, [r7, #4]
 8000250:	68bb      	ldr	r3, [r7, #8]
 8000252:	1ad3      	subs	r3, r2, r3
 8000254:	ee07 3a90 	vmov	s15, r3
 8000258:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800025c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000260:	edc7 7a05 	vstr	s15, [r7, #20]
	float ScaleB = (float)OutMin-((float)InMin * ScaleA);
 8000264:	683b      	ldr	r3, [r7, #0]
 8000266:	ee07 3a90 	vmov	s15, r3
 800026a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800026e:	68bb      	ldr	r3, [r7, #8]
 8000270:	ee07 3a90 	vmov	s15, r3
 8000274:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000278:	edd7 7a05 	vldr	s15, [r7, #20]
 800027c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000280:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000284:	edc7 7a04 	vstr	s15, [r7, #16]
	return (int32_t)(ChannelValue * ScaleA + ScaleB);
 8000288:	89fb      	ldrh	r3, [r7, #14]
 800028a:	ee07 3a90 	vmov	s15, r3
 800028e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000292:	edd7 7a05 	vldr	s15, [r7, #20]
 8000296:	ee27 7a27 	vmul.f32	s14, s14, s15
 800029a:	edd7 7a04 	vldr	s15, [r7, #16]
 800029e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80002a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80002a6:	ee17 3a90 	vmov	r3, s15
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	371c      	adds	r7, #28
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
	...

080002b8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
  {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	7f1b      	ldrb	r3, [r3, #28]
 80002c4:	2b02      	cmp	r3, #2
 80002c6:	d14e      	bne.n	8000366 <HAL_TIM_IC_CaptureCallback+0xae>
	{
		if (!ICSpeedIsFirstCapt)
 80002c8:	4b29      	ldr	r3, [pc, #164]	; (8000370 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d10a      	bne.n	80002e6 <HAL_TIM_IC_CaptureCallback+0x2e>
		{
			ICSpeedVal1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80002d0:	2104      	movs	r1, #4
 80002d2:	6878      	ldr	r0, [r7, #4]
 80002d4:	f005 f8e8 	bl	80054a8 <HAL_TIM_ReadCapturedValue>
 80002d8:	4603      	mov	r3, r0
 80002da:	4a26      	ldr	r2, [pc, #152]	; (8000374 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80002dc:	6013      	str	r3, [r2, #0]
			ICSpeedIsFirstCapt = 1;
 80002de:	4b24      	ldr	r3, [pc, #144]	; (8000370 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80002e0:	2201      	movs	r2, #1
 80002e2:	701a      	strb	r2, [r3, #0]
				ICSpeedDiff = 0;
			}
		}

	}
  }
 80002e4:	e03f      	b.n	8000366 <HAL_TIM_IC_CaptureCallback+0xae>
			ICSpeedVal2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80002e6:	2104      	movs	r1, #4
 80002e8:	6878      	ldr	r0, [r7, #4]
 80002ea:	f005 f8dd 	bl	80054a8 <HAL_TIM_ReadCapturedValue>
 80002ee:	4603      	mov	r3, r0
 80002f0:	4a21      	ldr	r2, [pc, #132]	; (8000378 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80002f2:	6013      	str	r3, [r2, #0]
			if (ICSpeedVal1 < ICSpeedVal2) // Overflowed ?
 80002f4:	4b1f      	ldr	r3, [pc, #124]	; (8000374 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	4b1f      	ldr	r3, [pc, #124]	; (8000378 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	429a      	cmp	r2, r3
 80002fe:	d20a      	bcs.n	8000316 <HAL_TIM_IC_CaptureCallback+0x5e>
				ICSpeedDiff += ICSpeedVal2-ICSpeedVal1;
 8000300:	4b1d      	ldr	r3, [pc, #116]	; (8000378 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000302:	681a      	ldr	r2, [r3, #0]
 8000304:	4b1b      	ldr	r3, [pc, #108]	; (8000374 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	1ad2      	subs	r2, r2, r3
 800030a:	4b1c      	ldr	r3, [pc, #112]	; (800037c <HAL_TIM_IC_CaptureCallback+0xc4>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4413      	add	r3, r2
 8000310:	4a1a      	ldr	r2, [pc, #104]	; (800037c <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000312:	6013      	str	r3, [r2, #0]
 8000314:	e00b      	b.n	800032e <HAL_TIM_IC_CaptureCallback+0x76>
				ICSpeedDiff += ((32000000-ICSpeedVal1)+ICSpeedVal2)+1;
 8000316:	4b18      	ldr	r3, [pc, #96]	; (8000378 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000318:	681a      	ldr	r2, [r3, #0]
 800031a:	4b16      	ldr	r3, [pc, #88]	; (8000374 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	1ad2      	subs	r2, r2, r3
 8000320:	4b16      	ldr	r3, [pc, #88]	; (800037c <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	441a      	add	r2, r3
 8000326:	4b16      	ldr	r3, [pc, #88]	; (8000380 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000328:	4413      	add	r3, r2
 800032a:	4a14      	ldr	r2, [pc, #80]	; (800037c <HAL_TIM_IC_CaptureCallback+0xc4>)
 800032c:	6013      	str	r3, [r2, #0]
			ICSpeedVal1 = ICSpeedVal2;
 800032e:	4b12      	ldr	r3, [pc, #72]	; (8000378 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4a10      	ldr	r2, [pc, #64]	; (8000374 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000334:	6013      	str	r3, [r2, #0]
			counter++;
 8000336:	4b13      	ldr	r3, [pc, #76]	; (8000384 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	3301      	adds	r3, #1
 800033c:	b2da      	uxtb	r2, r3
 800033e:	4b11      	ldr	r3, [pc, #68]	; (8000384 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000340:	701a      	strb	r2, [r3, #0]
			if (counter>=100)
 8000342:	4b10      	ldr	r3, [pc, #64]	; (8000384 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	2b63      	cmp	r3, #99	; 0x63
 8000348:	d90d      	bls.n	8000366 <HAL_TIM_IC_CaptureCallback+0xae>
				ICSpeedDiff /= counter;
 800034a:	4b0c      	ldr	r3, [pc, #48]	; (800037c <HAL_TIM_IC_CaptureCallback+0xc4>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	4a0d      	ldr	r2, [pc, #52]	; (8000384 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000350:	7812      	ldrb	r2, [r2, #0]
 8000352:	fbb3 f3f2 	udiv	r3, r3, r2
 8000356:	4a09      	ldr	r2, [pc, #36]	; (800037c <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000358:	6013      	str	r3, [r2, #0]
				counter = 0;
 800035a:	4b0a      	ldr	r3, [pc, #40]	; (8000384 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800035c:	2200      	movs	r2, #0
 800035e:	701a      	strb	r2, [r3, #0]
				ICSpeedDiff = 0;
 8000360:	4b06      	ldr	r3, [pc, #24]	; (800037c <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
  }
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	20000038 	.word	0x20000038
 8000374:	2000002c 	.word	0x2000002c
 8000378:	20000030 	.word	0x20000030
 800037c:	20000034 	.word	0x20000034
 8000380:	01e84801 	.word	0x01e84801
 8000384:	20000039 	.word	0x20000039

08000388 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b086      	sub	sp, #24
 800038c:	af02      	add	r7, sp, #8
 800038e:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc2)	//Do a lot of things inside the interruption because it's trigged by Timer 4 not so often (few ms)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4a4a      	ldr	r2, [pc, #296]	; (80004bc <HAL_ADC_ConvCpltCallback+0x134>)
 8000394:	4293      	cmp	r3, r2
 8000396:	f040 808c 	bne.w	80004b2 <HAL_ADC_ConvCpltCallback+0x12a>
	{
		uint16_t value = HAL_ADC_GetValue(hadc);
 800039a:	6878      	ldr	r0, [r7, #4]
 800039c:	f001 fc45 	bl	8001c2a <HAL_ADC_GetValue>
 80003a0:	4603      	mov	r3, r0
 80003a2:	81fb      	strh	r3, [r7, #14]
		switch(ADC2ChannelConfig.Channel)
 80003a4:	4b46      	ldr	r3, [pc, #280]	; (80004c0 <HAL_ADC_ConvCpltCallback+0x138>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a46      	ldr	r2, [pc, #280]	; (80004c4 <HAL_ADC_ConvCpltCallback+0x13c>)
 80003aa:	4293      	cmp	r3, r2
 80003ac:	d003      	beq.n	80003b6 <HAL_ADC_ConvCpltCallback+0x2e>
 80003ae:	4a46      	ldr	r2, [pc, #280]	; (80004c8 <HAL_ADC_ConvCpltCallback+0x140>)
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d00a      	beq.n	80003ca <HAL_ADC_ConvCpltCallback+0x42>
 80003b4:	e06e      	b.n	8000494 <HAL_ADC_ConvCpltCallback+0x10c>
		{
		case ADC_CHANNEL_1:	//Channel 1 is mixed temperature/speed reading. Concentrate on the high level and ignore signal when it is low. We can concentrate on
			if (value>=MIN_TEMP_ANALOG_THERSHOLD)
 80003b6:	89fb      	ldrh	r3, [r7, #14]
 80003b8:	2bc7      	cmp	r3, #199	; 0xc7
 80003ba:	d96e      	bls.n	800049a <HAL_ADC_ConvCpltCallback+0x112>
			{
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, value);
 80003bc:	89fb      	ldrh	r3, [r7, #14]
 80003be:	2200      	movs	r2, #0
 80003c0:	2110      	movs	r1, #16
 80003c2:	4842      	ldr	r0, [pc, #264]	; (80004cc <HAL_ADC_ConvCpltCallback+0x144>)
 80003c4:	f002 fd90 	bl	8002ee8 <HAL_DAC_SetValue>
			}
			break;
 80003c8:	e067      	b.n	800049a <HAL_ADC_ConvCpltCallback+0x112>

		case ADC_CHANNEL_17:	//Channel 17 is throttle input. Just copy its value after PPM conversion
			if (ThrottleStartup!=0)
 80003ca:	4b41      	ldr	r3, [pc, #260]	; (80004d0 <HAL_ADC_ConvCpltCallback+0x148>)
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d04b      	beq.n	800046a <HAL_ADC_ConvCpltCallback+0xe2>
			{
				if (value > 2048 && ThrottleStartup == 1)	//Throttle is maintained high during startup ==> Start calibration sequence
 80003d2:	89fb      	ldrh	r3, [r7, #14]
 80003d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003d8:	d90a      	bls.n	80003f0 <HAL_ADC_ConvCpltCallback+0x68>
 80003da:	4b3d      	ldr	r3, [pc, #244]	; (80004d0 <HAL_ADC_ConvCpltCallback+0x148>)
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d106      	bne.n	80003f0 <HAL_ADC_ConvCpltCallback+0x68>
				{
					ThrottleStartup = 2;
 80003e2:	4b3b      	ldr	r3, [pc, #236]	; (80004d0 <HAL_ADC_ConvCpltCallback+0x148>)
 80003e4:	2202      	movs	r2, #2
 80003e6:	701a      	strb	r2, [r3, #0]
					MaxAnalogThrottleValue = value;
 80003e8:	4a3a      	ldr	r2, [pc, #232]	; (80004d4 <HAL_ADC_ConvCpltCallback+0x14c>)
 80003ea:	89fb      	ldrh	r3, [r7, #14]
 80003ec:	8013      	strh	r3, [r2, #0]
 80003ee:	e050      	b.n	8000492 <HAL_ADC_ConvCpltCallback+0x10a>
				}
				else if (value > 2048 && ThrottleStartup == 2 && value>MaxAnalogThrottleValue)	//Capture max value while throttle is higher than 2048
 80003f0:	89fb      	ldrh	r3, [r7, #14]
 80003f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003f6:	d90c      	bls.n	8000412 <HAL_ADC_ConvCpltCallback+0x8a>
 80003f8:	4b35      	ldr	r3, [pc, #212]	; (80004d0 <HAL_ADC_ConvCpltCallback+0x148>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2b02      	cmp	r3, #2
 80003fe:	d108      	bne.n	8000412 <HAL_ADC_ConvCpltCallback+0x8a>
 8000400:	4b34      	ldr	r3, [pc, #208]	; (80004d4 <HAL_ADC_ConvCpltCallback+0x14c>)
 8000402:	881b      	ldrh	r3, [r3, #0]
 8000404:	89fa      	ldrh	r2, [r7, #14]
 8000406:	429a      	cmp	r2, r3
 8000408:	d903      	bls.n	8000412 <HAL_ADC_ConvCpltCallback+0x8a>
				{
					MaxAnalogThrottleValue = value;
 800040a:	4a32      	ldr	r2, [pc, #200]	; (80004d4 <HAL_ADC_ConvCpltCallback+0x14c>)
 800040c:	89fb      	ldrh	r3, [r7, #14]
 800040e:	8013      	strh	r3, [r2, #0]
 8000410:	e03f      	b.n	8000492 <HAL_ADC_ConvCpltCallback+0x10a>
				}
				else if (value <= 2048 && ThrottleStartup == 2)	//When throttle has gone below mid value launch min calibration step
 8000412:	89fb      	ldrh	r3, [r7, #14]
 8000414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000418:	d80a      	bhi.n	8000430 <HAL_ADC_ConvCpltCallback+0xa8>
 800041a:	4b2d      	ldr	r3, [pc, #180]	; (80004d0 <HAL_ADC_ConvCpltCallback+0x148>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b02      	cmp	r3, #2
 8000420:	d106      	bne.n	8000430 <HAL_ADC_ConvCpltCallback+0xa8>
				{
					ThrottleStartup = 3;
 8000422:	4b2b      	ldr	r3, [pc, #172]	; (80004d0 <HAL_ADC_ConvCpltCallback+0x148>)
 8000424:	2203      	movs	r2, #3
 8000426:	701a      	strb	r2, [r3, #0]
					MinAnalogThrottleValue = value;
 8000428:	4a2b      	ldr	r2, [pc, #172]	; (80004d8 <HAL_ADC_ConvCpltCallback+0x150>)
 800042a:	89fb      	ldrh	r3, [r7, #14]
 800042c:	8013      	strh	r3, [r2, #0]
 800042e:	e030      	b.n	8000492 <HAL_ADC_ConvCpltCallback+0x10a>
				}
				else if (value <= 2048 && ThrottleStartup == 3 && value<MinAnalogThrottleValue)	//capture min value while throttle is kept below 2048
 8000430:	89fb      	ldrh	r3, [r7, #14]
 8000432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000436:	d80c      	bhi.n	8000452 <HAL_ADC_ConvCpltCallback+0xca>
 8000438:	4b25      	ldr	r3, [pc, #148]	; (80004d0 <HAL_ADC_ConvCpltCallback+0x148>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	2b03      	cmp	r3, #3
 800043e:	d108      	bne.n	8000452 <HAL_ADC_ConvCpltCallback+0xca>
 8000440:	4b25      	ldr	r3, [pc, #148]	; (80004d8 <HAL_ADC_ConvCpltCallback+0x150>)
 8000442:	881b      	ldrh	r3, [r3, #0]
 8000444:	89fa      	ldrh	r2, [r7, #14]
 8000446:	429a      	cmp	r2, r3
 8000448:	d203      	bcs.n	8000452 <HAL_ADC_ConvCpltCallback+0xca>
				{
					MinAnalogThrottleValue = value;
 800044a:	4a23      	ldr	r2, [pc, #140]	; (80004d8 <HAL_ADC_ConvCpltCallback+0x150>)
 800044c:	89fb      	ldrh	r3, [r7, #14]
 800044e:	8013      	strh	r3, [r2, #0]
 8000450:	e01f      	b.n	8000492 <HAL_ADC_ConvCpltCallback+0x10a>
				}
				else if (value > 2048 && ThrottleStartup == 3) 	//Exit calibration procedure when throttle is back above mid value
 8000452:	89fb      	ldrh	r3, [r7, #14]
 8000454:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000458:	d921      	bls.n	800049e <HAL_ADC_ConvCpltCallback+0x116>
 800045a:	4b1d      	ldr	r3, [pc, #116]	; (80004d0 <HAL_ADC_ConvCpltCallback+0x148>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	2b03      	cmp	r3, #3
 8000460:	d11d      	bne.n	800049e <HAL_ADC_ConvCpltCallback+0x116>
				{
					ThrottleStartup = 0;
 8000462:	4b1b      	ldr	r3, [pc, #108]	; (80004d0 <HAL_ADC_ConvCpltCallback+0x148>)
 8000464:	2200      	movs	r2, #0
 8000466:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				htim1.Instance->CCR1 = (uint16_t)NormalizeChannel(value, MinAnalogThrottleValue, MaxAnalogThrottleValue, MIN_CHANNEL_VALUE, MAX_CHANNEL_VALUE);
			}
			break;
 8000468:	e019      	b.n	800049e <HAL_ADC_ConvCpltCallback+0x116>
				htim1.Instance->CCR1 = (uint16_t)NormalizeChannel(value, MinAnalogThrottleValue, MaxAnalogThrottleValue, MIN_CHANNEL_VALUE, MAX_CHANNEL_VALUE);
 800046a:	4b1b      	ldr	r3, [pc, #108]	; (80004d8 <HAL_ADC_ConvCpltCallback+0x150>)
 800046c:	881b      	ldrh	r3, [r3, #0]
 800046e:	4619      	mov	r1, r3
 8000470:	4b18      	ldr	r3, [pc, #96]	; (80004d4 <HAL_ADC_ConvCpltCallback+0x14c>)
 8000472:	881b      	ldrh	r3, [r3, #0]
 8000474:	461a      	mov	r2, r3
 8000476:	89f8      	ldrh	r0, [r7, #14]
 8000478:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800047c:	9300      	str	r3, [sp, #0]
 800047e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000482:	f7ff fec9 	bl	8000218 <NormalizeChannel>
 8000486:	4603      	mov	r3, r0
 8000488:	b29a      	uxth	r2, r3
 800048a:	4b14      	ldr	r3, [pc, #80]	; (80004dc <HAL_ADC_ConvCpltCallback+0x154>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000490:	e005      	b.n	800049e <HAL_ADC_ConvCpltCallback+0x116>
 8000492:	e004      	b.n	800049e <HAL_ADC_ConvCpltCallback+0x116>

		default:
			Error_Handler();
 8000494:	f000 fba0 	bl	8000bd8 <Error_Handler>
			break;
 8000498:	e002      	b.n	80004a0 <HAL_ADC_ConvCpltCallback+0x118>
			break;
 800049a:	bf00      	nop
 800049c:	e000      	b.n	80004a0 <HAL_ADC_ConvCpltCallback+0x118>
			break;
 800049e:	bf00      	nop
		}
		HAL_ADC_Stop_IT(&hadc2);	//Stop ADC Because we are going to change channel
 80004a0:	4806      	ldr	r0, [pc, #24]	; (80004bc <HAL_ADC_ConvCpltCallback+0x134>)
 80004a2:	f001 fb87 	bl	8001bb4 <HAL_ADC_Stop_IT>
		toogle_ADC_Channel(&ADC2ChannelConfig);	//Switch adc channel for next conversion
 80004a6:	4806      	ldr	r0, [pc, #24]	; (80004c0 <HAL_ADC_ConvCpltCallback+0x138>)
 80004a8:	f000 f842 	bl	8000530 <toogle_ADC_Channel>
		HAL_ADC_Start_IT(&hadc2);	//Restart ADC Waiting for next conversion (after Timer 4 Trigger)
 80004ac:	4803      	ldr	r0, [pc, #12]	; (80004bc <HAL_ADC_ConvCpltCallback+0x134>)
 80004ae:	f001 fa4f 	bl	8001950 <HAL_ADC_Start_IT>
	}
}
 80004b2:	bf00      	nop
 80004b4:	3710      	adds	r7, #16
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	200000c0 	.word	0x200000c0
 80004c0:	2000003c 	.word	0x2000003c
 80004c4:	04300002 	.word	0x04300002
 80004c8:	47520000 	.word	0x47520000
 80004cc:	200000ac 	.word	0x200000ac
 80004d0:	20000002 	.word	0x20000002
 80004d4:	20000000 	.word	0x20000000
 80004d8:	2000005c 	.word	0x2000005c
 80004dc:	20000178 	.word	0x20000178

080004e0 <init_ADC_Channel>:

void init_ADC_Channel(ADC_ChannelConfTypeDef* ADCChannel)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
	ADCChannel->Channel = ADC_CHANNEL_1;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	4a0f      	ldr	r2, [pc, #60]	; (8000528 <init_ADC_Channel+0x48>)
 80004ec:	601a      	str	r2, [r3, #0]
	ADCChannel->Rank = ADC_REGULAR_RANK_1;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2206      	movs	r2, #6
 80004f2:	605a      	str	r2, [r3, #4]
	ADCChannel->SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2202      	movs	r2, #2
 80004f8:	609a      	str	r2, [r3, #8]
	ADCChannel->SingleDiff = ADC_SINGLE_ENDED;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	227f      	movs	r2, #127	; 0x7f
 80004fe:	60da      	str	r2, [r3, #12]
	ADCChannel->OffsetNumber = ADC_OFFSET_NONE;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2204      	movs	r2, #4
 8000504:	611a      	str	r2, [r3, #16]
	ADCChannel->Offset = 0;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	2200      	movs	r2, #0
 800050a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_ConfigChannel(&hadc2, ADCChannel) != HAL_OK)
 800050c:	6879      	ldr	r1, [r7, #4]
 800050e:	4807      	ldr	r0, [pc, #28]	; (800052c <init_ADC_Channel+0x4c>)
 8000510:	f001 fdc6 	bl	80020a0 <HAL_ADC_ConfigChannel>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <init_ADC_Channel+0x3e>
		{
			Error_Handler();
 800051a:	f000 fb5d 	bl	8000bd8 <Error_Handler>
		}
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	04300002 	.word	0x04300002
 800052c:	200000c0 	.word	0x200000c0

08000530 <toogle_ADC_Channel>:

void toogle_ADC_Channel(ADC_ChannelConfTypeDef* ADCChannel)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	if ( ADCChannel->Channel == ADC_CHANNEL_1) ADCChannel->Channel = ADC_CHANNEL_17;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a0b      	ldr	r2, [pc, #44]	; (800056c <toogle_ADC_Channel+0x3c>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d103      	bne.n	800054a <toogle_ADC_Channel+0x1a>
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4a0a      	ldr	r2, [pc, #40]	; (8000570 <toogle_ADC_Channel+0x40>)
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	e002      	b.n	8000550 <toogle_ADC_Channel+0x20>
	else ADCChannel->Channel = ADC_CHANNEL_1;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4a07      	ldr	r2, [pc, #28]	; (800056c <toogle_ADC_Channel+0x3c>)
 800054e:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc2, ADCChannel) != HAL_OK)
 8000550:	6879      	ldr	r1, [r7, #4]
 8000552:	4808      	ldr	r0, [pc, #32]	; (8000574 <toogle_ADC_Channel+0x44>)
 8000554:	f001 fda4 	bl	80020a0 <HAL_ADC_ConfigChannel>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <toogle_ADC_Channel+0x32>
	{
		Error_Handler();
 800055e:	f000 fb3b 	bl	8000bd8 <Error_Handler>
	}
}
 8000562:	bf00      	nop
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	04300002 	.word	0x04300002
 8000570:	47520000 	.word	0x47520000
 8000574:	200000c0 	.word	0x200000c0

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057c:	f000 fd3d 	bl	8000ffa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000580:	f000 f83a 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000584:	f000 faf6 	bl	8000b74 <MX_GPIO_Init>
  MX_ADC2_Init();
 8000588:	f000 f88e 	bl	80006a8 <MX_ADC2_Init>
  MX_DAC1_Init();
 800058c:	f000 f8f4 	bl	8000778 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000590:	f000 f9dc 	bl	800094c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000594:	f000 fa4c 	bl	8000a30 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000598:	f000 f928 	bl	80007ec <MX_TIM1_Init>
  MX_TIM4_Init();
 800059c:	f000 fa9c 	bl	8000ad8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  init_ADC_Channel(&ADC2ChannelConfig);
 80005a0:	480f      	ldr	r0, [pc, #60]	; (80005e0 <main+0x68>)
 80005a2:	f7ff ff9d 	bl	80004e0 <init_ADC_Channel>


  HAL_TIM_Base_Start(&htim2);
 80005a6:	480f      	ldr	r0, [pc, #60]	; (80005e4 <main+0x6c>)
 80005a8:	f004 f80c 	bl	80045c4 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 80005ac:	2104      	movs	r1, #4
 80005ae:	480d      	ldr	r0, [pc, #52]	; (80005e4 <main+0x6c>)
 80005b0:	f004 fa24 	bl	80049fc <HAL_TIM_IC_Start_IT>

  htim1.Instance->CCR1 = 0;
 80005b4:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <main+0x70>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2200      	movs	r2, #0
 80005ba:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_Base_Start(&htim1);
 80005bc:	480a      	ldr	r0, [pc, #40]	; (80005e8 <main+0x70>)
 80005be:	f004 f801 	bl	80045c4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005c2:	2100      	movs	r1, #0
 80005c4:	4808      	ldr	r0, [pc, #32]	; (80005e8 <main+0x70>)
 80005c6:	f004 f8c1 	bl	800474c <HAL_TIM_PWM_Start>

  HAL_ADC_Start_IT(&hadc2);
 80005ca:	4808      	ldr	r0, [pc, #32]	; (80005ec <main+0x74>)
 80005cc:	f001 f9c0 	bl	8001950 <HAL_ADC_Start_IT>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 80005d0:	2110      	movs	r1, #16
 80005d2:	4807      	ldr	r0, [pc, #28]	; (80005f0 <main+0x78>)
 80005d4:	f002 fc35 	bl	8002e42 <HAL_DAC_Start>
  HAL_TIM_Base_Start(&htim4);
 80005d8:	4806      	ldr	r0, [pc, #24]	; (80005f4 <main+0x7c>)
 80005da:	f003 fff3 	bl	80045c4 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005de:	e7fe      	b.n	80005de <main+0x66>
 80005e0:	2000003c 	.word	0x2000003c
 80005e4:	200001c4 	.word	0x200001c4
 80005e8:	20000178 	.word	0x20000178
 80005ec:	200000c0 	.word	0x200000c0
 80005f0:	200000ac 	.word	0x200000ac
 80005f4:	20000060 	.word	0x20000060

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b0a4      	sub	sp, #144	; 0x90
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000602:	2238      	movs	r2, #56	; 0x38
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f005 feac 	bl	8006364 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800061c:	463b      	mov	r3, r7
 800061e:	2244      	movs	r2, #68	; 0x44
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f005 fe9e 	bl	8006364 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	f44f 7000 	mov.w	r0, #512	; 0x200
 800062c:	f002 ffc6 	bl	80035bc <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000630:	2302      	movs	r3, #2
 8000632:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000638:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063a:	2340      	movs	r3, #64	; 0x40
 800063c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800063e:	2300      	movs	r3, #0
 8000640:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000642:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000646:	4618      	mov	r0, r3
 8000648:	f003 f86c 	bl	8003724 <HAL_RCC_OscConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000652:	f000 fac1 	bl	8000bd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000656:	230f      	movs	r3, #15
 8000658:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800065a:	2301      	movs	r3, #1
 800065c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800066a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f003 fb6f 	bl	8003d54 <HAL_RCC_ClockConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800067c:	f000 faac 	bl	8000bd8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000680:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000684:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000686:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800068c:	463b      	mov	r3, r7
 800068e:	4618      	mov	r0, r3
 8000690:	f003 fd50 	bl	8004134 <HAL_RCCEx_PeriphCLKConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800069a:	f000 fa9d 	bl	8000bd8 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3790      	adds	r7, #144	; 0x90
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b088      	sub	sp, #32
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ae:	463b      	mov	r3, r7
 80006b0:	2220      	movs	r2, #32
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f005 fe55 	bl	8006364 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80006ba:	4b2c      	ldr	r3, [pc, #176]	; (800076c <MX_ADC2_Init+0xc4>)
 80006bc:	4a2c      	ldr	r2, [pc, #176]	; (8000770 <MX_ADC2_Init+0xc8>)
 80006be:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006c0:	4b2a      	ldr	r3, [pc, #168]	; (800076c <MX_ADC2_Init+0xc4>)
 80006c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80006c6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006c8:	4b28      	ldr	r3, [pc, #160]	; (800076c <MX_ADC2_Init+0xc4>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ce:	4b27      	ldr	r3, [pc, #156]	; (800076c <MX_ADC2_Init+0xc4>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80006d4:	4b25      	ldr	r3, [pc, #148]	; (800076c <MX_ADC2_Init+0xc4>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006da:	4b24      	ldr	r3, [pc, #144]	; (800076c <MX_ADC2_Init+0xc4>)
 80006dc:	2200      	movs	r2, #0
 80006de:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e0:	4b22      	ldr	r3, [pc, #136]	; (800076c <MX_ADC2_Init+0xc4>)
 80006e2:	2204      	movs	r2, #4
 80006e4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006e6:	4b21      	ldr	r3, [pc, #132]	; (800076c <MX_ADC2_Init+0xc4>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80006ec:	4b1f      	ldr	r3, [pc, #124]	; (800076c <MX_ADC2_Init+0xc4>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80006f2:	4b1e      	ldr	r3, [pc, #120]	; (800076c <MX_ADC2_Init+0xc4>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006f8:	4b1c      	ldr	r3, [pc, #112]	; (800076c <MX_ADC2_Init+0xc4>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8000700:	4b1a      	ldr	r3, [pc, #104]	; (800076c <MX_ADC2_Init+0xc4>)
 8000702:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 8000706:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000708:	4b18      	ldr	r3, [pc, #96]	; (800076c <MX_ADC2_Init+0xc4>)
 800070a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800070e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000710:	4b16      	ldr	r3, [pc, #88]	; (800076c <MX_ADC2_Init+0xc4>)
 8000712:	2200      	movs	r2, #0
 8000714:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <MX_ADC2_Init+0xc4>)
 800071a:	2200      	movs	r2, #0
 800071c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800071e:	4b13      	ldr	r3, [pc, #76]	; (800076c <MX_ADC2_Init+0xc4>)
 8000720:	2200      	movs	r2, #0
 8000722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000726:	4811      	ldr	r0, [pc, #68]	; (800076c <MX_ADC2_Init+0xc4>)
 8000728:	f000 ff88 	bl	800163c <HAL_ADC_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000732:	f000 fa51 	bl	8000bd8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_ADC2_Init+0xcc>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800073a:	2306      	movs	r3, #6
 800073c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800073e:	2302      	movs	r3, #2
 8000740:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000742:	237f      	movs	r3, #127	; 0x7f
 8000744:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000746:	2304      	movs	r3, #4
 8000748:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800074e:	463b      	mov	r3, r7
 8000750:	4619      	mov	r1, r3
 8000752:	4806      	ldr	r0, [pc, #24]	; (800076c <MX_ADC2_Init+0xc4>)
 8000754:	f001 fca4 	bl	80020a0 <HAL_ADC_ConfigChannel>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 800075e:	f000 fa3b 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	3720      	adds	r7, #32
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200000c0 	.word	0x200000c0
 8000770:	50000100 	.word	0x50000100
 8000774:	04300002 	.word	0x04300002

08000778 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08c      	sub	sp, #48	; 0x30
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800077e:	463b      	mov	r3, r7
 8000780:	2230      	movs	r2, #48	; 0x30
 8000782:	2100      	movs	r1, #0
 8000784:	4618      	mov	r0, r3
 8000786:	f005 fded 	bl	8006364 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800078a:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_DAC1_Init+0x6c>)
 800078c:	4a16      	ldr	r2, [pc, #88]	; (80007e8 <MX_DAC1_Init+0x70>)
 800078e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000790:	4814      	ldr	r0, [pc, #80]	; (80007e4 <MX_DAC1_Init+0x6c>)
 8000792:	f002 fb34 	bl	8002dfe <HAL_DAC_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800079c:	f000 fa1c 	bl	8000bd8 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80007a0:	2302      	movs	r3, #2
 80007a2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80007a8:	2300      	movs	r3, #0
 80007aa:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 80007b0:	2316      	movs	r3, #22
 80007b2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80007bc:	2301      	movs	r3, #1
 80007be:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80007c4:	463b      	mov	r3, r7
 80007c6:	2210      	movs	r2, #16
 80007c8:	4619      	mov	r1, r3
 80007ca:	4806      	ldr	r0, [pc, #24]	; (80007e4 <MX_DAC1_Init+0x6c>)
 80007cc:	f002 fbb4 	bl	8002f38 <HAL_DAC_ConfigChannel>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80007d6:	f000 f9ff 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	3730      	adds	r7, #48	; 0x30
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200000ac 	.word	0x200000ac
 80007e8:	50000800 	.word	0x50000800

080007ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b09c      	sub	sp, #112	; 0x70
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007f2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000800:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800080c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
 800081c:	615a      	str	r2, [r3, #20]
 800081e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	2234      	movs	r2, #52	; 0x34
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f005 fd9c 	bl	8006364 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800082c:	4b45      	ldr	r3, [pc, #276]	; (8000944 <MX_TIM1_Init+0x158>)
 800082e:	4a46      	ldr	r2, [pc, #280]	; (8000948 <MX_TIM1_Init+0x15c>)
 8000830:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8000832:	4b44      	ldr	r3, [pc, #272]	; (8000944 <MX_TIM1_Init+0x158>)
 8000834:	220f      	movs	r2, #15
 8000836:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000838:	4b42      	ldr	r3, [pc, #264]	; (8000944 <MX_TIM1_Init+0x158>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 800083e:	4b41      	ldr	r3, [pc, #260]	; (8000944 <MX_TIM1_Init+0x158>)
 8000840:	f241 3288 	movw	r2, #5000	; 0x1388
 8000844:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000846:	4b3f      	ldr	r3, [pc, #252]	; (8000944 <MX_TIM1_Init+0x158>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800084c:	4b3d      	ldr	r3, [pc, #244]	; (8000944 <MX_TIM1_Init+0x158>)
 800084e:	2200      	movs	r2, #0
 8000850:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000852:	4b3c      	ldr	r3, [pc, #240]	; (8000944 <MX_TIM1_Init+0x158>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000858:	483a      	ldr	r0, [pc, #232]	; (8000944 <MX_TIM1_Init+0x158>)
 800085a:	f003 fe5b 	bl	8004514 <HAL_TIM_Base_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000864:	f000 f9b8 	bl	8000bd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800086c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800086e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000872:	4619      	mov	r1, r3
 8000874:	4833      	ldr	r0, [pc, #204]	; (8000944 <MX_TIM1_Init+0x158>)
 8000876:	f004 fd21 	bl	80052bc <HAL_TIM_ConfigClockSource>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000880:	f000 f9aa 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000884:	482f      	ldr	r0, [pc, #188]	; (8000944 <MX_TIM1_Init+0x158>)
 8000886:	f003 feff 	bl	8004688 <HAL_TIM_PWM_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000890:	f000 f9a2 	bl	8000bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000894:	2300      	movs	r3, #0
 8000896:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000898:	2300      	movs	r3, #0
 800089a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800089c:	2300      	movs	r3, #0
 800089e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008a4:	4619      	mov	r1, r3
 80008a6:	4827      	ldr	r0, [pc, #156]	; (8000944 <MX_TIM1_Init+0x158>)
 80008a8:	f005 fbd0 	bl	800604c <HAL_TIMEx_MasterConfigSynchronization>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80008b2:	f000 f991 	bl	8000bd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008b6:	2360      	movs	r3, #96	; 0x60
 80008b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008be:	2300      	movs	r3, #0
 80008c0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008c2:	2300      	movs	r3, #0
 80008c4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008ca:	2300      	movs	r3, #0
 80008cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008ce:	2300      	movs	r3, #0
 80008d0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008d6:	2200      	movs	r2, #0
 80008d8:	4619      	mov	r1, r3
 80008da:	481a      	ldr	r0, [pc, #104]	; (8000944 <MX_TIM1_Init+0x158>)
 80008dc:	f004 fbde 	bl	800509c <HAL_TIM_PWM_ConfigChannel>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80008e6:	f000 f977 	bl	8000bd8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000902:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000908:	2300      	movs	r3, #0
 800090a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000910:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800091a:	2300      	movs	r3, #0
 800091c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800091e:	2300      	movs	r3, #0
 8000920:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	4619      	mov	r1, r3
 8000926:	4807      	ldr	r0, [pc, #28]	; (8000944 <MX_TIM1_Init+0x158>)
 8000928:	f005 fc12 	bl	8006150 <HAL_TIMEx_ConfigBreakDeadTime>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8000932:	f000 f951 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000936:	4803      	ldr	r0, [pc, #12]	; (8000944 <MX_TIM1_Init+0x158>)
 8000938:	f000 faae 	bl	8000e98 <HAL_TIM_MspPostInit>

}
 800093c:	bf00      	nop
 800093e:	3770      	adds	r7, #112	; 0x70
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000178 	.word	0x20000178
 8000948:	40012c00 	.word	0x40012c00

0800094c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08c      	sub	sp, #48	; 0x30
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000952:	f107 0320 	add.w	r3, r7, #32
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000978:	4b2b      	ldr	r3, [pc, #172]	; (8000a28 <MX_TIM2_Init+0xdc>)
 800097a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800097e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8000980:	4b29      	ldr	r3, [pc, #164]	; (8000a28 <MX_TIM2_Init+0xdc>)
 8000982:	220f      	movs	r2, #15
 8000984:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000986:	4b28      	ldr	r3, [pc, #160]	; (8000a28 <MX_TIM2_Init+0xdc>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3.2E7;
 800098c:	4b26      	ldr	r3, [pc, #152]	; (8000a28 <MX_TIM2_Init+0xdc>)
 800098e:	4a27      	ldr	r2, [pc, #156]	; (8000a2c <MX_TIM2_Init+0xe0>)
 8000990:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000992:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <MX_TIM2_Init+0xdc>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000998:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <MX_TIM2_Init+0xdc>)
 800099a:	2200      	movs	r2, #0
 800099c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800099e:	4822      	ldr	r0, [pc, #136]	; (8000a28 <MX_TIM2_Init+0xdc>)
 80009a0:	f003 fdb8 	bl	8004514 <HAL_TIM_Base_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80009aa:	f000 f915 	bl	8000bd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009b4:	f107 0320 	add.w	r3, r7, #32
 80009b8:	4619      	mov	r1, r3
 80009ba:	481b      	ldr	r0, [pc, #108]	; (8000a28 <MX_TIM2_Init+0xdc>)
 80009bc:	f004 fc7e 	bl	80052bc <HAL_TIM_ConfigClockSource>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80009c6:	f000 f907 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80009ca:	4817      	ldr	r0, [pc, #92]	; (8000a28 <MX_TIM2_Init+0xdc>)
 80009cc:	f003 ffbe 	bl	800494c <HAL_TIM_IC_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80009d6:	f000 f8ff 	bl	8000bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	480f      	ldr	r0, [pc, #60]	; (8000a28 <MX_TIM2_Init+0xdc>)
 80009ea:	f005 fb2f 	bl	800604c <HAL_TIMEx_MasterConfigSynchronization>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80009f4:	f000 f8f0 	bl	8000bd8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80009f8:	2300      	movs	r3, #0
 80009fa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80009fc:	2301      	movs	r3, #1
 80009fe:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	2204      	movs	r2, #4
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4806      	ldr	r0, [pc, #24]	; (8000a28 <MX_TIM2_Init+0xdc>)
 8000a10:	f004 faaf 	bl	8004f72 <HAL_TIM_IC_ConfigChannel>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000a1a:	f000 f8dd 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	3730      	adds	r7, #48	; 0x30
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	200001c4 	.word	0x200001c4
 8000a2c:	01e84800 	.word	0x01e84800

08000a30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a4e:	4b20      	ldr	r3, [pc, #128]	; (8000ad0 <MX_TIM3_Init+0xa0>)
 8000a50:	4a20      	ldr	r2, [pc, #128]	; (8000ad4 <MX_TIM3_Init+0xa4>)
 8000a52:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a54:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <MX_TIM3_Init+0xa0>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5a:	4b1d      	ldr	r3, [pc, #116]	; (8000ad0 <MX_TIM3_Init+0xa0>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a60:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <MX_TIM3_Init+0xa0>)
 8000a62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a68:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <MX_TIM3_Init+0xa0>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <MX_TIM3_Init+0xa0>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000a74:	4816      	ldr	r0, [pc, #88]	; (8000ad0 <MX_TIM3_Init+0xa0>)
 8000a76:	f003 ff69 	bl	800494c <HAL_TIM_IC_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000a80:	f000 f8aa 	bl	8000bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	480f      	ldr	r0, [pc, #60]	; (8000ad0 <MX_TIM3_Init+0xa0>)
 8000a94:	f005 fada 	bl	800604c <HAL_TIMEx_MasterConfigSynchronization>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000a9e:	f000 f89b 	bl	8000bd8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <MX_TIM3_Init+0xa0>)
 8000aba:	f004 fa5a 	bl	8004f72 <HAL_TIM_IC_ConfigChannel>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000ac4:	f000 f888 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ac8:	bf00      	nop
 8000aca:	3720      	adds	r7, #32
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	2000012c 	.word	0x2000012c
 8000ad4:	40000400 	.word	0x40000400

08000ad8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b088      	sub	sp, #32
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ade:	f107 0310 	add.w	r3, r7, #16
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000af6:	4b1d      	ldr	r3, [pc, #116]	; (8000b6c <MX_TIM4_Init+0x94>)
 8000af8:	4a1d      	ldr	r2, [pc, #116]	; (8000b70 <MX_TIM4_Init+0x98>)
 8000afa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <MX_TIM4_Init+0x94>)
 8000afe:	220f      	movs	r2, #15
 8000b00:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <MX_TIM4_Init+0x94>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8000b08:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <MX_TIM4_Init+0x94>)
 8000b0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b0e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b10:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <MX_TIM4_Init+0x94>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <MX_TIM4_Init+0x94>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b1c:	4813      	ldr	r0, [pc, #76]	; (8000b6c <MX_TIM4_Init+0x94>)
 8000b1e:	f003 fcf9 	bl	8004514 <HAL_TIM_Base_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000b28:	f000 f856 	bl	8000bd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b32:	f107 0310 	add.w	r3, r7, #16
 8000b36:	4619      	mov	r1, r3
 8000b38:	480c      	ldr	r0, [pc, #48]	; (8000b6c <MX_TIM4_Init+0x94>)
 8000b3a:	f004 fbbf 	bl	80052bc <HAL_TIM_ConfigClockSource>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000b44:	f000 f848 	bl	8000bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b48:	2320      	movs	r3, #32
 8000b4a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	4619      	mov	r1, r3
 8000b54:	4805      	ldr	r0, [pc, #20]	; (8000b6c <MX_TIM4_Init+0x94>)
 8000b56:	f005 fa79 	bl	800604c <HAL_TIMEx_MasterConfigSynchronization>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000b60:	f000 f83a 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b64:	bf00      	nop
 8000b66:	3720      	adds	r7, #32
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000060 	.word	0x20000060
 8000b70:	40000800 	.word	0x40000800

08000b74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <MX_GPIO_Init+0x60>)
 8000b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8c:	4a11      	ldr	r2, [pc, #68]	; (8000bd4 <MX_GPIO_Init+0x60>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b94:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_GPIO_Init+0x60>)
 8000b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	603b      	str	r3, [r7, #0]
 8000b9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ba6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000baa:	f002 fcef 	bl	800358c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Status_LED_Pin */
  GPIO_InitStruct.Pin = Status_LED_Pin;
 8000bae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bb2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Status_LED_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc8:	f002 fb5e 	bl	8003288 <HAL_GPIO_Init>

}
 8000bcc:	bf00      	nop
 8000bce:	3718      	adds	r7, #24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40021000 	.word	0x40021000

08000bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bdc:	b672      	cpsid	i
}
 8000bde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <Error_Handler+0x8>
	...

08000be4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <HAL_MspInit+0x44>)
 8000bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bee:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <HAL_MspInit+0x44>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6613      	str	r3, [r2, #96]	; 0x60
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <HAL_MspInit+0x44>)
 8000bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <HAL_MspInit+0x44>)
 8000c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c06:	4a08      	ldr	r2, [pc, #32]	; (8000c28 <HAL_MspInit+0x44>)
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_MspInit+0x44>)
 8000c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c1a:	f002 fd73 	bl	8003704 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40021000 	.word	0x40021000

08000c2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	; 0x28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a19      	ldr	r2, [pc, #100]	; (8000cb0 <HAL_ADC_MspInit+0x84>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d12c      	bne.n	8000ca8 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c4e:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <HAL_ADC_MspInit+0x88>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c52:	4a18      	ldr	r2, [pc, #96]	; (8000cb4 <HAL_ADC_MspInit+0x88>)
 8000c54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c5a:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <HAL_ADC_MspInit+0x88>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <HAL_ADC_MspInit+0x88>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6a:	4a12      	ldr	r2, [pc, #72]	; (8000cb4 <HAL_ADC_MspInit+0x88>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <HAL_ADC_MspInit+0x88>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA0     ------> ADC2_IN1
    PA4     ------> ADC2_IN17
    */
    GPIO_InitStruct.Pin = Temp_in_analog_Pin|Throttle_in_analog_Pin;
 8000c7e:	2311      	movs	r3, #17
 8000c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c82:	2303      	movs	r3, #3
 8000c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c94:	f002 faf8 	bl	8003288 <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	2012      	movs	r0, #18
 8000c9e:	f002 f87a 	bl	8002d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000ca2:	2012      	movs	r0, #18
 8000ca4:	f002 f891 	bl	8002dca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000ca8:	bf00      	nop
 8000caa:	3728      	adds	r7, #40	; 0x28
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	50000100 	.word	0x50000100
 8000cb4:	40021000 	.word	0x40021000

08000cb8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	; 0x28
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a15      	ldr	r2, [pc, #84]	; (8000d2c <HAL_DAC_MspInit+0x74>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d124      	bne.n	8000d24 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <HAL_DAC_MspInit+0x78>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cde:	4a14      	ldr	r2, [pc, #80]	; (8000d30 <HAL_DAC_MspInit+0x78>)
 8000ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ce4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce6:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <HAL_DAC_MspInit+0x78>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <HAL_DAC_MspInit+0x78>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	4a0e      	ldr	r2, [pc, #56]	; (8000d30 <HAL_DAC_MspInit+0x78>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <HAL_DAC_MspInit+0x78>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = Temp_out_Pin;
 8000d0a:	2320      	movs	r3, #32
 8000d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Temp_out_GPIO_Port, &GPIO_InitStruct);
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d20:	f002 fab2 	bl	8003288 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000d24:	bf00      	nop
 8000d26:	3728      	adds	r7, #40	; 0x28
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	50000800 	.word	0x50000800
 8000d30:	40021000 	.word	0x40021000

08000d34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08c      	sub	sp, #48	; 0x30
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a2d      	ldr	r2, [pc, #180]	; (8000e08 <HAL_TIM_Base_MspInit+0xd4>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d10c      	bne.n	8000d70 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d56:	4b2d      	ldr	r3, [pc, #180]	; (8000e0c <HAL_TIM_Base_MspInit+0xd8>)
 8000d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d5a:	4a2c      	ldr	r2, [pc, #176]	; (8000e0c <HAL_TIM_Base_MspInit+0xd8>)
 8000d5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d60:	6613      	str	r3, [r2, #96]	; 0x60
 8000d62:	4b2a      	ldr	r3, [pc, #168]	; (8000e0c <HAL_TIM_Base_MspInit+0xd8>)
 8000d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d6a:	61bb      	str	r3, [r7, #24]
 8000d6c:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000d6e:	e047      	b.n	8000e00 <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM2)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d78:	d131      	bne.n	8000dde <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d7a:	4b24      	ldr	r3, [pc, #144]	; (8000e0c <HAL_TIM_Base_MspInit+0xd8>)
 8000d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7e:	4a23      	ldr	r2, [pc, #140]	; (8000e0c <HAL_TIM_Base_MspInit+0xd8>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6593      	str	r3, [r2, #88]	; 0x58
 8000d86:	4b21      	ldr	r3, [pc, #132]	; (8000e0c <HAL_TIM_Base_MspInit+0xd8>)
 8000d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <HAL_TIM_Base_MspInit+0xd8>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d96:	4a1d      	ldr	r2, [pc, #116]	; (8000e0c <HAL_TIM_Base_MspInit+0xd8>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9e:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <HAL_TIM_Base_MspInit+0xd8>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Temp_in_IC_Pin;
 8000daa:	2302      	movs	r3, #2
 8000dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Temp_in_IC_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 031c 	add.w	r3, r7, #28
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc8:	f002 fa5e 	bl	8003288 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2100      	movs	r1, #0
 8000dd0:	201c      	movs	r0, #28
 8000dd2:	f001 ffe0 	bl	8002d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dd6:	201c      	movs	r0, #28
 8000dd8:	f001 fff7 	bl	8002dca <HAL_NVIC_EnableIRQ>
}
 8000ddc:	e010      	b.n	8000e00 <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM4)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a0b      	ldr	r2, [pc, #44]	; (8000e10 <HAL_TIM_Base_MspInit+0xdc>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d10b      	bne.n	8000e00 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <HAL_TIM_Base_MspInit+0xd8>)
 8000dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dec:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <HAL_TIM_Base_MspInit+0xd8>)
 8000dee:	f043 0304 	orr.w	r3, r3, #4
 8000df2:	6593      	str	r3, [r2, #88]	; 0x58
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <HAL_TIM_Base_MspInit+0xd8>)
 8000df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df8:	f003 0304 	and.w	r3, r3, #4
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
}
 8000e00:	bf00      	nop
 8000e02:	3730      	adds	r7, #48	; 0x30
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40012c00 	.word	0x40012c00
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40000800 	.word	0x40000800

08000e14 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	; 0x28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a17      	ldr	r2, [pc, #92]	; (8000e90 <HAL_TIM_IC_MspInit+0x7c>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d128      	bne.n	8000e88 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e36:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <HAL_TIM_IC_MspInit+0x80>)
 8000e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e3a:	4a16      	ldr	r2, [pc, #88]	; (8000e94 <HAL_TIM_IC_MspInit+0x80>)
 8000e3c:	f043 0302 	orr.w	r3, r3, #2
 8000e40:	6593      	str	r3, [r2, #88]	; 0x58
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <HAL_TIM_IC_MspInit+0x80>)
 8000e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <HAL_TIM_IC_MspInit+0x80>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e52:	4a10      	ldr	r2, [pc, #64]	; (8000e94 <HAL_TIM_IC_MspInit+0x80>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <HAL_TIM_IC_MspInit+0x80>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PAS_in_IC_Pin;
 8000e66:	2340      	movs	r3, #64	; 0x40
 8000e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e76:	2302      	movs	r3, #2
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PAS_in_IC_GPIO_Port, &GPIO_InitStruct);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e84:	f002 fa00 	bl	8003288 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e88:	bf00      	nop
 8000e8a:	3728      	adds	r7, #40	; 0x28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40000400 	.word	0x40000400
 8000e94:	40021000 	.word	0x40021000

08000e98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 030c 	add.w	r3, r7, #12
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a12      	ldr	r2, [pc, #72]	; (8000f00 <HAL_TIM_MspPostInit+0x68>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d11d      	bne.n	8000ef6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_TIM_MspPostInit+0x6c>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebe:	4a11      	ldr	r2, [pc, #68]	; (8000f04 <HAL_TIM_MspPostInit+0x6c>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <HAL_TIM_MspPostInit+0x6c>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ed2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ed6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000ee4:	2306      	movs	r3, #6
 8000ee6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	4619      	mov	r1, r3
 8000eee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef2:	f002 f9c9 	bl	8003288 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ef6:	bf00      	nop
 8000ef8:	3720      	adds	r7, #32
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40012c00 	.word	0x40012c00
 8000f04:	40021000 	.word	0x40021000

08000f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <NMI_Handler+0x4>

08000f0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <HardFault_Handler+0x4>

08000f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <MemManage_Handler+0x4>

08000f1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <BusFault_Handler+0x4>

08000f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <UsageFault_Handler+0x4>

08000f26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f54:	f000 f8a4 	bl	80010a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8000f60:	4802      	ldr	r0, [pc, #8]	; (8000f6c <ADC1_2_IRQHandler+0x10>)
 8000f62:	f000 fe6f 	bl	8001c44 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200000c0 	.word	0x200000c0

08000f70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <TIM2_IRQHandler+0x10>)
 8000f76:	f003 fe7d 	bl	8004c74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200001c4 	.word	0x200001c4

08000f84 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <SystemInit+0x20>)
 8000f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f8e:	4a05      	ldr	r2, [pc, #20]	; (8000fa4 <SystemInit+0x20>)
 8000f90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8000fa8:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000faa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fac:	480d      	ldr	r0, [pc, #52]	; (8000fe4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fae:	490e      	ldr	r1, [pc, #56]	; (8000fe8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fb0:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <LoopForever+0xe>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000fb4:	e002      	b.n	8000fbc <LoopCopyDataInit>

08000fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fba:	3304      	adds	r3, #4

08000fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc0:	d3f9      	bcc.n	8000fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc2:	4a0b      	ldr	r2, [pc, #44]	; (8000ff0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fc4:	4c0b      	ldr	r4, [pc, #44]	; (8000ff4 <LoopForever+0x16>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc8:	e001      	b.n	8000fce <LoopFillZerobss>

08000fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fcc:	3204      	adds	r2, #4

08000fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd0:	d3fb      	bcc.n	8000fca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fd2:	f7ff ffd7 	bl	8000f84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fd6:	f005 f9a1 	bl	800631c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fda:	f7ff facd 	bl	8000578 <main>

08000fde <LoopForever>:

LoopForever:
    b LoopForever
 8000fde:	e7fe      	b.n	8000fde <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8000fe0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000fec:	080063a4 	.word	0x080063a4
  ldr r2, =_sbss
 8000ff0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ff4:	20000214 	.word	0x20000214

08000ff8 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ff8:	e7fe      	b.n	8000ff8 <COMP1_2_3_IRQHandler>

08000ffa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001000:	2300      	movs	r3, #0
 8001002:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001004:	2003      	movs	r0, #3
 8001006:	f001 febb 	bl	8002d80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800100a:	2000      	movs	r0, #0
 800100c:	f000 f80e 	bl	800102c <HAL_InitTick>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d002      	beq.n	800101c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	71fb      	strb	r3, [r7, #7]
 800101a:	e001      	b.n	8001020 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800101c:	f7ff fde2 	bl	8000be4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001020:	79fb      	ldrb	r3, [r7, #7]

}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001034:	2300      	movs	r3, #0
 8001036:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001038:	4b16      	ldr	r3, [pc, #88]	; (8001094 <HAL_InitTick+0x68>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d022      	beq.n	8001086 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001040:	4b15      	ldr	r3, [pc, #84]	; (8001098 <HAL_InitTick+0x6c>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b13      	ldr	r3, [pc, #76]	; (8001094 <HAL_InitTick+0x68>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800104c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001050:	fbb2 f3f3 	udiv	r3, r2, r3
 8001054:	4618      	mov	r0, r3
 8001056:	f001 fec6 	bl	8002de6 <HAL_SYSTICK_Config>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d10f      	bne.n	8001080 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b0f      	cmp	r3, #15
 8001064:	d809      	bhi.n	800107a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001066:	2200      	movs	r2, #0
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	f04f 30ff 	mov.w	r0, #4294967295
 800106e:	f001 fe92 	bl	8002d96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001072:	4a0a      	ldr	r2, [pc, #40]	; (800109c <HAL_InitTick+0x70>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	e007      	b.n	800108a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	73fb      	strb	r3, [r7, #15]
 800107e:	e004      	b.n	800108a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	73fb      	strb	r3, [r7, #15]
 8001084:	e001      	b.n	800108a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800108a:	7bfb      	ldrb	r3, [r7, #15]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	2000000c 	.word	0x2000000c
 8001098:	20000004 	.word	0x20000004
 800109c:	20000008 	.word	0x20000008

080010a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a4:	4b05      	ldr	r3, [pc, #20]	; (80010bc <HAL_IncTick+0x1c>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <HAL_IncTick+0x20>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4413      	add	r3, r2
 80010ae:	4a03      	ldr	r2, [pc, #12]	; (80010bc <HAL_IncTick+0x1c>)
 80010b0:	6013      	str	r3, [r2, #0]
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	20000210 	.word	0x20000210
 80010c0:	2000000c 	.word	0x2000000c

080010c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return uwTick;
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <HAL_GetTick+0x14>)
 80010ca:	681b      	ldr	r3, [r3, #0]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20000210 	.word	0x20000210

080010dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e4:	f7ff ffee 	bl	80010c4 <HAL_GetTick>
 80010e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f4:	d004      	beq.n	8001100 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <HAL_Delay+0x40>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	4413      	add	r3, r2
 80010fe:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001100:	bf00      	nop
 8001102:	f7ff ffdf 	bl	80010c4 <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	429a      	cmp	r2, r3
 8001110:	d8f7      	bhi.n	8001102 <HAL_Delay+0x26>
  {
  }
}
 8001112:	bf00      	nop
 8001114:	bf00      	nop
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	2000000c 	.word	0x2000000c

08001120 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	431a      	orrs	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	609a      	str	r2, [r3, #8]
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	431a      	orrs	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	609a      	str	r2, [r3, #8]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800117c:	4618      	mov	r0, r3
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001188:	b480      	push	{r7}
 800118a:	b087      	sub	sp, #28
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	3360      	adds	r3, #96	; 0x60
 800119a:	461a      	mov	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <LL_ADC_SetOffset+0x44>)
 80011aa:	4013      	ands	r3, r2
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	430a      	orrs	r2, r1
 80011b6:	4313      	orrs	r3, r2
 80011b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80011c0:	bf00      	nop
 80011c2:	371c      	adds	r7, #28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	03fff000 	.word	0x03fff000

080011d0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3360      	adds	r3, #96	; 0x60
 80011de:	461a      	mov	r2, r3
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b087      	sub	sp, #28
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	3360      	adds	r3, #96	; 0x60
 800120c:	461a      	mov	r2, r3
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	431a      	orrs	r2, r3
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001226:	bf00      	nop
 8001228:	371c      	adds	r7, #28
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001232:	b480      	push	{r7}
 8001234:	b087      	sub	sp, #28
 8001236:	af00      	add	r7, sp, #0
 8001238:	60f8      	str	r0, [r7, #12]
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	3360      	adds	r3, #96	; 0x60
 8001242:	461a      	mov	r2, r3
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	4413      	add	r3, r2
 800124a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	431a      	orrs	r2, r3
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800125c:	bf00      	nop
 800125e:	371c      	adds	r7, #28
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001268:	b480      	push	{r7}
 800126a:	b087      	sub	sp, #28
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	3360      	adds	r3, #96	; 0x60
 8001278:	461a      	mov	r2, r3
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	431a      	orrs	r2, r3
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001292:	bf00      	nop
 8001294:	371c      	adds	r7, #28
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
 80012a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	431a      	orrs	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	615a      	str	r2, [r3, #20]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d101      	bne.n	80012dc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80012d8:	2301      	movs	r3, #1
 80012da:	e000      	b.n	80012de <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b087      	sub	sp, #28
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	60f8      	str	r0, [r7, #12]
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	3330      	adds	r3, #48	; 0x30
 80012fa:	461a      	mov	r2, r3
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	0a1b      	lsrs	r3, r3, #8
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	f003 030c 	and.w	r3, r3, #12
 8001306:	4413      	add	r3, r2
 8001308:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	f003 031f 	and.w	r3, r3, #31
 8001314:	211f      	movs	r1, #31
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	401a      	ands	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	0e9b      	lsrs	r3, r3, #26
 8001322:	f003 011f 	and.w	r1, r3, #31
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	f003 031f 	and.w	r3, r3, #31
 800132c:	fa01 f303 	lsl.w	r3, r1, r3
 8001330:	431a      	orrs	r2, r3
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001336:	bf00      	nop
 8001338:	371c      	adds	r7, #28
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001356:	2301      	movs	r3, #1
 8001358:	e000      	b.n	800135c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800135a:	2300      	movs	r3, #0
}
 800135c:	4618      	mov	r0, r3
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001368:	b480      	push	{r7}
 800136a:	b087      	sub	sp, #28
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	3314      	adds	r3, #20
 8001378:	461a      	mov	r2, r3
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	0e5b      	lsrs	r3, r3, #25
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	f003 0304 	and.w	r3, r3, #4
 8001384:	4413      	add	r3, r2
 8001386:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	0d1b      	lsrs	r3, r3, #20
 8001390:	f003 031f 	and.w	r3, r3, #31
 8001394:	2107      	movs	r1, #7
 8001396:	fa01 f303 	lsl.w	r3, r1, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	401a      	ands	r2, r3
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	0d1b      	lsrs	r3, r3, #20
 80013a2:	f003 031f 	and.w	r3, r3, #31
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ac:	431a      	orrs	r2, r3
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013b2:	bf00      	nop
 80013b4:	371c      	adds	r7, #28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013d8:	43db      	mvns	r3, r3
 80013da:	401a      	ands	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f003 0318 	and.w	r3, r3, #24
 80013e2:	4908      	ldr	r1, [pc, #32]	; (8001404 <LL_ADC_SetChannelSingleDiff+0x44>)
 80013e4:	40d9      	lsrs	r1, r3
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	400b      	ands	r3, r1
 80013ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013ee:	431a      	orrs	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80013f6:	bf00      	nop
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	0007ffff 	.word	0x0007ffff

08001408 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f003 031f 	and.w	r3, r3, #31
}
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001434:	4618      	mov	r0, r3
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001450:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	6093      	str	r3, [r2, #8]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001474:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001478:	d101      	bne.n	800147e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800147a:	2301      	movs	r3, #1
 800147c:	e000      	b.n	8001480 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800149c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80014c8:	d101      	bne.n	80014ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014ca:	2301      	movs	r3, #1
 80014cc:	e000      	b.n	80014d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014f0:	f043 0201 	orr.w	r2, r3, #1
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001514:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001518:	f043 0202 	orr.w	r2, r3, #2
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b01      	cmp	r3, #1
 800153e:	d101      	bne.n	8001544 <LL_ADC_IsEnabled+0x18>
 8001540:	2301      	movs	r3, #1
 8001542:	e000      	b.n	8001546 <LL_ADC_IsEnabled+0x1a>
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b02      	cmp	r3, #2
 8001564:	d101      	bne.n	800156a <LL_ADC_IsDisableOngoing+0x18>
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <LL_ADC_IsDisableOngoing+0x1a>
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001588:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800158c:	f043 0204 	orr.w	r2, r3, #4
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015b4:	f043 0210 	orr.w	r2, r3, #16
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	2b04      	cmp	r3, #4
 80015da:	d101      	bne.n	80015e0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80015dc:	2301      	movs	r3, #1
 80015de:	e000      	b.n	80015e2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001602:	f043 0220 	orr.w	r2, r3, #32
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b08      	cmp	r3, #8
 8001628:	d101      	bne.n	800162e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800162a:	2301      	movs	r3, #1
 800162c:	e000      	b.n	8001630 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800163c:	b590      	push	{r4, r7, lr}
 800163e:	b089      	sub	sp, #36	; 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001644:	2300      	movs	r3, #0
 8001646:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001648:	2300      	movs	r3, #0
 800164a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e16d      	b.n	8001932 <HAL_ADC_Init+0x2f6>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001660:	2b00      	cmp	r3, #0
 8001662:	d109      	bne.n	8001678 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff fae1 	bl	8000c2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fef1 	bl	8001464 <LL_ADC_IsDeepPowerDownEnabled>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d004      	beq.n	8001692 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fed7 	bl	8001440 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff ff0c 	bl	80014b4 <LL_ADC_IsInternalRegulatorEnabled>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d115      	bne.n	80016ce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fef0 	bl	800148c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016ac:	4ba3      	ldr	r3, [pc, #652]	; (800193c <HAL_ADC_Init+0x300>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	099b      	lsrs	r3, r3, #6
 80016b2:	4aa3      	ldr	r2, [pc, #652]	; (8001940 <HAL_ADC_Init+0x304>)
 80016b4:	fba2 2303 	umull	r2, r3, r2, r3
 80016b8:	099b      	lsrs	r3, r3, #6
 80016ba:	3301      	adds	r3, #1
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016c0:	e002      	b.n	80016c8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f9      	bne.n	80016c2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff feee 	bl	80014b4 <LL_ADC_IsInternalRegulatorEnabled>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10d      	bne.n	80016fa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e2:	f043 0210 	orr.w	r2, r3, #16
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ee:	f043 0201 	orr.w	r2, r3, #1
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff ff62 	bl	80015c8 <LL_ADC_REG_IsConversionOngoing>
 8001704:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800170a:	f003 0310 	and.w	r3, r3, #16
 800170e:	2b00      	cmp	r3, #0
 8001710:	f040 8106 	bne.w	8001920 <HAL_ADC_Init+0x2e4>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	2b00      	cmp	r3, #0
 8001718:	f040 8102 	bne.w	8001920 <HAL_ADC_Init+0x2e4>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001720:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001724:	f043 0202 	orr.w	r2, r3, #2
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fefb 	bl	800152c <LL_ADC_IsEnabled>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d111      	bne.n	8001760 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800173c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001740:	f7ff fef4 	bl	800152c <LL_ADC_IsEnabled>
 8001744:	4604      	mov	r4, r0
 8001746:	487f      	ldr	r0, [pc, #508]	; (8001944 <HAL_ADC_Init+0x308>)
 8001748:	f7ff fef0 	bl	800152c <LL_ADC_IsEnabled>
 800174c:	4603      	mov	r3, r0
 800174e:	4323      	orrs	r3, r4
 8001750:	2b00      	cmp	r3, #0
 8001752:	d105      	bne.n	8001760 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	4619      	mov	r1, r3
 800175a:	487b      	ldr	r0, [pc, #492]	; (8001948 <HAL_ADC_Init+0x30c>)
 800175c:	f7ff fce0 	bl	8001120 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	7f5b      	ldrb	r3, [r3, #29]
 8001764:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800176a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001770:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001776:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800177e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001780:	4313      	orrs	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800178a:	2b01      	cmp	r3, #1
 800178c:	d106      	bne.n	800179c <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001792:	3b01      	subs	r3, #1
 8001794:	045b      	lsls	r3, r3, #17
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d009      	beq.n	80017b8 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	68da      	ldr	r2, [r3, #12]
 80017be:	4b63      	ldr	r3, [pc, #396]	; (800194c <HAL_ADC_Init+0x310>)
 80017c0:	4013      	ands	r3, r2
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6812      	ldr	r2, [r2, #0]
 80017c6:	69b9      	ldr	r1, [r7, #24]
 80017c8:	430b      	orrs	r3, r1
 80017ca:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	430a      	orrs	r2, r1
 80017e0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff feee 	bl	80015c8 <LL_ADC_REG_IsConversionOngoing>
 80017ec:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff ff0f 	bl	8001616 <LL_ADC_INJ_IsConversionOngoing>
 80017f8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d16d      	bne.n	80018dc <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d16a      	bne.n	80018dc <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800180a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001812:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001814:	4313      	orrs	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001822:	f023 0302 	bic.w	r3, r3, #2
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	6812      	ldr	r2, [r2, #0]
 800182a:	69b9      	ldr	r1, [r7, #24]
 800182c:	430b      	orrs	r3, r1
 800182e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d017      	beq.n	8001868 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	691a      	ldr	r2, [r3, #16]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001846:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001850:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001854:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	6911      	ldr	r1, [r2, #16]
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	6812      	ldr	r2, [r2, #0]
 8001860:	430b      	orrs	r3, r1
 8001862:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001866:	e013      	b.n	8001890 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	691a      	ldr	r2, [r3, #16]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001876:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	6812      	ldr	r2, [r2, #0]
 8001884:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001888:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800188c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001896:	2b01      	cmp	r3, #1
 8001898:	d118      	bne.n	80018cc <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80018a4:	f023 0304 	bic.w	r3, r3, #4
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018b0:	4311      	orrs	r1, r2
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80018b6:	4311      	orrs	r1, r2
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80018bc:	430a      	orrs	r2, r1
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f042 0201 	orr.w	r2, r2, #1
 80018c8:	611a      	str	r2, [r3, #16]
 80018ca:	e007      	b.n	80018dc <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	691a      	ldr	r2, [r3, #16]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 0201 	bic.w	r2, r2, #1
 80018da:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	695b      	ldr	r3, [r3, #20]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d10c      	bne.n	80018fe <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f023 010f 	bic.w	r1, r3, #15
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	1e5a      	subs	r2, r3, #1
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	430a      	orrs	r2, r1
 80018fa:	631a      	str	r2, [r3, #48]	; 0x30
 80018fc:	e007      	b.n	800190e <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 020f 	bic.w	r2, r2, #15
 800190c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001912:	f023 0303 	bic.w	r3, r3, #3
 8001916:	f043 0201 	orr.w	r2, r3, #1
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	65da      	str	r2, [r3, #92]	; 0x5c
 800191e:	e007      	b.n	8001930 <HAL_ADC_Init+0x2f4>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001924:	f043 0210 	orr.w	r2, r3, #16
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001930:	7ffb      	ldrb	r3, [r7, #31]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3724      	adds	r7, #36	; 0x24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd90      	pop	{r4, r7, pc}
 800193a:	bf00      	nop
 800193c:	20000004 	.word	0x20000004
 8001940:	053e2d63 	.word	0x053e2d63
 8001944:	50000100 	.word	0x50000100
 8001948:	50000300 	.word	0x50000300
 800194c:	fff04007 	.word	0xfff04007

08001950 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001958:	4894      	ldr	r0, [pc, #592]	; (8001bac <HAL_ADC_Start_IT+0x25c>)
 800195a:	f7ff fd55 	bl	8001408 <LL_ADC_GetMultimode>
 800195e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fe2f 	bl	80015c8 <LL_ADC_REG_IsConversionOngoing>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	f040 8114 	bne.w	8001b9a <HAL_ADC_Start_IT+0x24a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001978:	2b01      	cmp	r3, #1
 800197a:	d101      	bne.n	8001980 <HAL_ADC_Start_IT+0x30>
 800197c:	2302      	movs	r3, #2
 800197e:	e111      	b.n	8001ba4 <HAL_ADC_Start_IT+0x254>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f001 f835 	bl	80029f8 <ADC_Enable>
 800198e:	4603      	mov	r3, r0
 8001990:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001992:	7dfb      	ldrb	r3, [r7, #23]
 8001994:	2b00      	cmp	r3, #0
 8001996:	f040 80fb 	bne.w	8001b90 <HAL_ADC_Start_IT+0x240>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800199e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019a2:	f023 0301 	bic.w	r3, r3, #1
 80019a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a7f      	ldr	r2, [pc, #508]	; (8001bb0 <HAL_ADC_Start_IT+0x260>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d002      	beq.n	80019be <HAL_ADC_Start_IT+0x6e>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	e001      	b.n	80019c2 <HAL_ADC_Start_IT+0x72>
 80019be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6812      	ldr	r2, [r2, #0]
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d002      	beq.n	80019d0 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d105      	bne.n	80019dc <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d006      	beq.n	80019f6 <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ec:	f023 0206 	bic.w	r2, r3, #6
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	661a      	str	r2, [r3, #96]	; 0x60
 80019f4:	e002      	b.n	80019fc <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	221c      	movs	r2, #28
 8001a02:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 021c 	bic.w	r2, r2, #28
 8001a1a:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	2b08      	cmp	r3, #8
 8001a22:	d108      	bne.n	8001a36 <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f042 0208 	orr.w	r2, r2, #8
 8001a32:	605a      	str	r2, [r3, #4]
          break;
 8001a34:	e008      	b.n	8001a48 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f042 0204 	orr.w	r2, r2, #4
 8001a44:	605a      	str	r2, [r3, #4]
          break;
 8001a46:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d107      	bne.n	8001a60 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 0210 	orr.w	r2, r2, #16
 8001a5e:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a52      	ldr	r2, [pc, #328]	; (8001bb0 <HAL_ADC_Start_IT+0x260>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d002      	beq.n	8001a70 <HAL_ADC_Start_IT+0x120>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	e001      	b.n	8001a74 <HAL_ADC_Start_IT+0x124>
 8001a70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d008      	beq.n	8001a8e <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d005      	beq.n	8001a8e <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	2b05      	cmp	r3, #5
 8001a86:	d002      	beq.n	8001a8e <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	2b09      	cmp	r3, #9
 8001a8c:	d13b      	bne.n	8001b06 <HAL_ADC_Start_IT+0x1b6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d02d      	beq.n	8001af8 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001aa4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	d110      	bne.n	8001ad6 <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0220 	bic.w	r2, r2, #32
 8001ac2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ad2:	605a      	str	r2, [r3, #4]
              break;
 8001ad4:	e011      	b.n	8001afa <HAL_ADC_Start_IT+0x1aa>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ae4:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f042 0220 	orr.w	r2, r2, #32
 8001af4:	605a      	str	r2, [r3, #4]
              break;
 8001af6:	e000      	b.n	8001afa <HAL_ADC_Start_IT+0x1aa>
          }
        }
 8001af8:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fd3a 	bl	8001578 <LL_ADC_REG_StartConversion>
 8001b04:	e04d      	b.n	8001ba2 <HAL_ADC_Start_IT+0x252>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a26      	ldr	r2, [pc, #152]	; (8001bb0 <HAL_ADC_Start_IT+0x260>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d002      	beq.n	8001b22 <HAL_ADC_Start_IT+0x1d2>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	e001      	b.n	8001b26 <HAL_ADC_Start_IT+0x1d6>
 8001b22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b26:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d035      	beq.n	8001ba0 <HAL_ADC_Start_IT+0x250>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b38:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b3c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	2b08      	cmp	r3, #8
 8001b4a:	d110      	bne.n	8001b6e <HAL_ADC_Start_IT+0x21e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 0220 	bic.w	r2, r2, #32
 8001b5a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b6a:	605a      	str	r2, [r3, #4]
              break;
 8001b6c:	e019      	b.n	8001ba2 <HAL_ADC_Start_IT+0x252>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b7c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f042 0220 	orr.w	r2, r2, #32
 8001b8c:	605a      	str	r2, [r3, #4]
              break;
 8001b8e:	e008      	b.n	8001ba2 <HAL_ADC_Start_IT+0x252>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001b98:	e003      	b.n	8001ba2 <HAL_ADC_Start_IT+0x252>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	75fb      	strb	r3, [r7, #23]
 8001b9e:	e000      	b.n	8001ba2 <HAL_ADC_Start_IT+0x252>
        }
 8001ba0:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8001ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	50000300 	.word	0x50000300
 8001bb0:	50000100 	.word	0x50000100

08001bb4 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d101      	bne.n	8001bca <HAL_ADC_Stop_IT+0x16>
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	e02b      	b.n	8001c22 <HAL_ADC_Stop_IT+0x6e>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001bd2:	2103      	movs	r1, #3
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 fe53 	bl	8002880 <ADC_ConversionStop>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d119      	bne.n	8001c18 <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 021c 	bic.w	r2, r2, #28
 8001bf2:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 ff61 	bl	8002abc <ADC_Disable>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d109      	bne.n	8001c18 <HAL_ADC_Stop_IT+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c08:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c0c:	f023 0301 	bic.w	r3, r3, #1
 8001c10:	f043 0201 	orr.w	r2, r3, #1
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	; 0x28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c60:	4883      	ldr	r0, [pc, #524]	; (8001e70 <HAL_ADC_IRQHandler+0x22c>)
 8001c62:	f7ff fbd1 	bl	8001408 <LL_ADC_GetMultimode>
 8001c66:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d017      	beq.n	8001ca2 <HAL_ADC_IRQHandler+0x5e>
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d012      	beq.n	8001ca2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c80:	f003 0310 	and.w	r3, r3, #16
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d105      	bne.n	8001c94 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 ff98 	bl	8002bca <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d004      	beq.n	8001cb6 <HAL_ADC_IRQHandler+0x72>
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10a      	bne.n	8001ccc <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 8085 	beq.w	8001dcc <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	f003 0308 	and.w	r3, r3, #8
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d07f      	beq.n	8001dcc <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd0:	f003 0310 	and.w	r3, r3, #16
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d105      	bne.n	8001ce4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cdc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff faeb 	bl	80012c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d064      	beq.n	8001dbe <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a5e      	ldr	r2, [pc, #376]	; (8001e74 <HAL_ADC_IRQHandler+0x230>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d002      	beq.n	8001d04 <HAL_ADC_IRQHandler+0xc0>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	e001      	b.n	8001d08 <HAL_ADC_IRQHandler+0xc4>
 8001d04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6812      	ldr	r2, [r2, #0]
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d008      	beq.n	8001d22 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d005      	beq.n	8001d22 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	2b05      	cmp	r3, #5
 8001d1a:	d002      	beq.n	8001d22 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	2b09      	cmp	r3, #9
 8001d20:	d104      	bne.n	8001d2c <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	623b      	str	r3, [r7, #32]
 8001d2a:	e00d      	b.n	8001d48 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a50      	ldr	r2, [pc, #320]	; (8001e74 <HAL_ADC_IRQHandler+0x230>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d002      	beq.n	8001d3c <HAL_ADC_IRQHandler+0xf8>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	e001      	b.n	8001d40 <HAL_ADC_IRQHandler+0xfc>
 8001d3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d40:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001d48:	6a3b      	ldr	r3, [r7, #32]
 8001d4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d135      	bne.n	8001dbe <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0308 	and.w	r3, r3, #8
 8001d5c:	2b08      	cmp	r3, #8
 8001d5e:	d12e      	bne.n	8001dbe <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff fc2f 	bl	80015c8 <LL_ADC_REG_IsConversionOngoing>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d11a      	bne.n	8001da6 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 020c 	bic.w	r2, r2, #12
 8001d7e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d112      	bne.n	8001dbe <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9c:	f043 0201 	orr.w	r2, r3, #1
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001da4:	e00b      	b.n	8001dbe <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001daa:	f043 0210 	orr.w	r2, r3, #16
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db6:	f043 0201 	orr.w	r2, r3, #1
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7fe fae2 	bl	8000388 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	220c      	movs	r2, #12
 8001dca:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f003 0320 	and.w	r3, r3, #32
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d004      	beq.n	8001de0 <HAL_ADC_IRQHandler+0x19c>
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	f003 0320 	and.w	r3, r3, #32
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10b      	bne.n	8001df8 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 809e 	beq.w	8001f28 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 8098 	beq.w	8001f28 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfc:	f003 0310 	and.w	r3, r3, #16
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d105      	bne.n	8001e10 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e08:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff fa94 	bl	8001342 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001e1a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff fa4f 	bl	80012c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e26:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a11      	ldr	r2, [pc, #68]	; (8001e74 <HAL_ADC_IRQHandler+0x230>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d002      	beq.n	8001e38 <HAL_ADC_IRQHandler+0x1f4>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	e001      	b.n	8001e3c <HAL_ADC_IRQHandler+0x1f8>
 8001e38:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6812      	ldr	r2, [r2, #0]
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d008      	beq.n	8001e56 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d005      	beq.n	8001e56 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	2b06      	cmp	r3, #6
 8001e4e:	d002      	beq.n	8001e56 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	2b07      	cmp	r3, #7
 8001e54:	d104      	bne.n	8001e60 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	623b      	str	r3, [r7, #32]
 8001e5e:	e011      	b.n	8001e84 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a03      	ldr	r2, [pc, #12]	; (8001e74 <HAL_ADC_IRQHandler+0x230>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d006      	beq.n	8001e78 <HAL_ADC_IRQHandler+0x234>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	e005      	b.n	8001e7c <HAL_ADC_IRQHandler+0x238>
 8001e70:	50000300 	.word	0x50000300
 8001e74:	50000100 	.word	0x50000100
 8001e78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e7c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d047      	beq.n	8001f1a <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d007      	beq.n	8001ea4 <HAL_ADC_IRQHandler+0x260>
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d03f      	beq.n	8001f1a <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001e9a:	6a3b      	ldr	r3, [r7, #32]
 8001e9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d13a      	bne.n	8001f1a <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eae:	2b40      	cmp	r3, #64	; 0x40
 8001eb0:	d133      	bne.n	8001f1a <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d12e      	bne.n	8001f1a <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fba8 	bl	8001616 <LL_ADC_INJ_IsConversionOngoing>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d11a      	bne.n	8001f02 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001eda:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d112      	bne.n	8001f1a <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef8:	f043 0201 	orr.w	r2, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f00:	e00b      	b.n	8001f1a <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f06:	f043 0210 	orr.w	r2, r3, #16
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f12:	f043 0201 	orr.w	r2, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 fe2d 	bl	8002b7a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2260      	movs	r2, #96	; 0x60
 8001f26:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d011      	beq.n	8001f56 <HAL_ADC_IRQHandler+0x312>
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00c      	beq.n	8001f56 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f40:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 f895 	bl	8002078 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2280      	movs	r2, #128	; 0x80
 8001f54:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d012      	beq.n	8001f86 <HAL_ADC_IRQHandler+0x342>
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00d      	beq.n	8001f86 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 fe13 	bl	8002ba2 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f84:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d012      	beq.n	8001fb6 <HAL_ADC_IRQHandler+0x372>
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00d      	beq.n	8001fb6 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 fe05 	bl	8002bb6 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fb4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	f003 0310 	and.w	r3, r3, #16
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d036      	beq.n	800202e <HAL_ADC_IRQHandler+0x3ea>
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	f003 0310 	and.w	r3, r3, #16
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d031      	beq.n	800202e <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d102      	bne.n	8001fd8 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd6:	e014      	b.n	8002002 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d008      	beq.n	8001ff0 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001fde:	4825      	ldr	r0, [pc, #148]	; (8002074 <HAL_ADC_IRQHandler+0x430>)
 8001fe0:	f7ff fa20 	bl	8001424 <LL_ADC_GetMultiDMATransfer>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00b      	beq.n	8002002 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8001fea:	2301      	movs	r3, #1
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
 8001fee:	e008      	b.n	8002002 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8001ffe:	2301      	movs	r3, #1
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	2b01      	cmp	r3, #1
 8002006:	d10e      	bne.n	8002026 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002018:	f043 0202 	orr.w	r2, r3, #2
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f833 	bl	800208c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2210      	movs	r2, #16
 800202c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002034:	2b00      	cmp	r3, #0
 8002036:	d018      	beq.n	800206a <HAL_ADC_IRQHandler+0x426>
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800203e:	2b00      	cmp	r3, #0
 8002040:	d013      	beq.n	800206a <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002046:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002052:	f043 0208 	orr.w	r2, r3, #8
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002062:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 fd92 	bl	8002b8e <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800206a:	bf00      	nop
 800206c:	3728      	adds	r7, #40	; 0x28
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	50000300 	.word	0x50000300

08002078 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b0b6      	sub	sp, #216	; 0xd8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d101      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x22>
 80020be:	2302      	movs	r3, #2
 80020c0:	e3c8      	b.n	8002854 <HAL_ADC_ConfigChannel+0x7b4>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff fa7a 	bl	80015c8 <LL_ADC_REG_IsConversionOngoing>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f040 83ad 	bne.w	8002836 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6818      	ldr	r0, [r3, #0]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	6859      	ldr	r1, [r3, #4]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	f7ff f8fe 	bl	80012ea <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fa68 	bl	80015c8 <LL_ADC_REG_IsConversionOngoing>
 80020f8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff fa88 	bl	8001616 <LL_ADC_INJ_IsConversionOngoing>
 8002106:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800210a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800210e:	2b00      	cmp	r3, #0
 8002110:	f040 81d9 	bne.w	80024c6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002114:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002118:	2b00      	cmp	r3, #0
 800211a:	f040 81d4 	bne.w	80024c6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002126:	d10f      	bne.n	8002148 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6818      	ldr	r0, [r3, #0]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2200      	movs	r2, #0
 8002132:	4619      	mov	r1, r3
 8002134:	f7ff f918 	bl	8001368 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff f8ac 	bl	800129e <LL_ADC_SetSamplingTimeCommonConfig>
 8002146:	e00e      	b.n	8002166 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6818      	ldr	r0, [r3, #0]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	6819      	ldr	r1, [r3, #0]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	461a      	mov	r2, r3
 8002156:	f7ff f907 	bl	8001368 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2100      	movs	r1, #0
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff f89c 	bl	800129e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	695a      	ldr	r2, [r3, #20]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	08db      	lsrs	r3, r3, #3
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	2b04      	cmp	r3, #4
 8002186:	d022      	beq.n	80021ce <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6818      	ldr	r0, [r3, #0]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	6919      	ldr	r1, [r3, #16]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002198:	f7fe fff6 	bl	8001188 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6818      	ldr	r0, [r3, #0]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	6919      	ldr	r1, [r3, #16]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	461a      	mov	r2, r3
 80021aa:	f7ff f842 	bl	8001232 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6818      	ldr	r0, [r3, #0]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	6919      	ldr	r1, [r3, #16]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	7f1b      	ldrb	r3, [r3, #28]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d102      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x124>
 80021be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021c2:	e000      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x126>
 80021c4:	2300      	movs	r3, #0
 80021c6:	461a      	mov	r2, r3
 80021c8:	f7ff f84e 	bl	8001268 <LL_ADC_SetOffsetSaturation>
 80021cc:	e17b      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2100      	movs	r1, #0
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe fffb 	bl	80011d0 <LL_ADC_GetOffsetChannel>
 80021da:	4603      	mov	r3, r0
 80021dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d10a      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x15a>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2100      	movs	r1, #0
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe fff0 	bl	80011d0 <LL_ADC_GetOffsetChannel>
 80021f0:	4603      	mov	r3, r0
 80021f2:	0e9b      	lsrs	r3, r3, #26
 80021f4:	f003 021f 	and.w	r2, r3, #31
 80021f8:	e01e      	b.n	8002238 <HAL_ADC_ConfigChannel+0x198>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2100      	movs	r1, #0
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe ffe5 	bl	80011d0 <LL_ADC_GetOffsetChannel>
 8002206:	4603      	mov	r3, r0
 8002208:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002210:	fa93 f3a3 	rbit	r3, r3
 8002214:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002218:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800221c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002220:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002228:	2320      	movs	r3, #32
 800222a:	e004      	b.n	8002236 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800222c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002230:	fab3 f383 	clz	r3, r3
 8002234:	b2db      	uxtb	r3, r3
 8002236:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002240:	2b00      	cmp	r3, #0
 8002242:	d105      	bne.n	8002250 <HAL_ADC_ConfigChannel+0x1b0>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	0e9b      	lsrs	r3, r3, #26
 800224a:	f003 031f 	and.w	r3, r3, #31
 800224e:	e018      	b.n	8002282 <HAL_ADC_ConfigChannel+0x1e2>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002258:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800225c:	fa93 f3a3 	rbit	r3, r3
 8002260:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002264:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002268:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800226c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002274:	2320      	movs	r3, #32
 8002276:	e004      	b.n	8002282 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002278:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800227c:	fab3 f383 	clz	r3, r3
 8002280:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002282:	429a      	cmp	r2, r3
 8002284:	d106      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2200      	movs	r2, #0
 800228c:	2100      	movs	r1, #0
 800228e:	4618      	mov	r0, r3
 8002290:	f7fe ffb4 	bl	80011fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2101      	movs	r1, #1
 800229a:	4618      	mov	r0, r3
 800229c:	f7fe ff98 	bl	80011d0 <LL_ADC_GetOffsetChannel>
 80022a0:	4603      	mov	r3, r0
 80022a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10a      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x220>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2101      	movs	r1, #1
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe ff8d 	bl	80011d0 <LL_ADC_GetOffsetChannel>
 80022b6:	4603      	mov	r3, r0
 80022b8:	0e9b      	lsrs	r3, r3, #26
 80022ba:	f003 021f 	and.w	r2, r3, #31
 80022be:	e01e      	b.n	80022fe <HAL_ADC_ConfigChannel+0x25e>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2101      	movs	r1, #1
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe ff82 	bl	80011d0 <LL_ADC_GetOffsetChannel>
 80022cc:	4603      	mov	r3, r0
 80022ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022d6:	fa93 f3a3 	rbit	r3, r3
 80022da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80022de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80022e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80022ee:	2320      	movs	r3, #32
 80022f0:	e004      	b.n	80022fc <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80022f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022f6:	fab3 f383 	clz	r3, r3
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002306:	2b00      	cmp	r3, #0
 8002308:	d105      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x276>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	0e9b      	lsrs	r3, r3, #26
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	e018      	b.n	8002348 <HAL_ADC_ConfigChannel+0x2a8>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002322:	fa93 f3a3 	rbit	r3, r3
 8002326:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800232a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800232e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002332:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800233a:	2320      	movs	r3, #32
 800233c:	e004      	b.n	8002348 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800233e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002342:	fab3 f383 	clz	r3, r3
 8002346:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002348:	429a      	cmp	r2, r3
 800234a:	d106      	bne.n	800235a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2200      	movs	r2, #0
 8002352:	2101      	movs	r1, #1
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe ff51 	bl	80011fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2102      	movs	r1, #2
 8002360:	4618      	mov	r0, r3
 8002362:	f7fe ff35 	bl	80011d0 <LL_ADC_GetOffsetChannel>
 8002366:	4603      	mov	r3, r0
 8002368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10a      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x2e6>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2102      	movs	r1, #2
 8002376:	4618      	mov	r0, r3
 8002378:	f7fe ff2a 	bl	80011d0 <LL_ADC_GetOffsetChannel>
 800237c:	4603      	mov	r3, r0
 800237e:	0e9b      	lsrs	r3, r3, #26
 8002380:	f003 021f 	and.w	r2, r3, #31
 8002384:	e01e      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x324>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2102      	movs	r1, #2
 800238c:	4618      	mov	r0, r3
 800238e:	f7fe ff1f 	bl	80011d0 <LL_ADC_GetOffsetChannel>
 8002392:	4603      	mov	r3, r0
 8002394:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002398:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800239c:	fa93 f3a3 	rbit	r3, r3
 80023a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80023a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80023ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80023b4:	2320      	movs	r3, #32
 80023b6:	e004      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80023b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023bc:	fab3 f383 	clz	r3, r3
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d105      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x33c>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	0e9b      	lsrs	r3, r3, #26
 80023d6:	f003 031f 	and.w	r3, r3, #31
 80023da:	e016      	b.n	800240a <HAL_ADC_ConfigChannel+0x36a>
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023e8:	fa93 f3a3 	rbit	r3, r3
 80023ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80023ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80023f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80023fc:	2320      	movs	r3, #32
 80023fe:	e004      	b.n	800240a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002400:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002404:	fab3 f383 	clz	r3, r3
 8002408:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800240a:	429a      	cmp	r2, r3
 800240c:	d106      	bne.n	800241c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2200      	movs	r2, #0
 8002414:	2102      	movs	r1, #2
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe fef0 	bl	80011fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2103      	movs	r1, #3
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe fed4 	bl	80011d0 <LL_ADC_GetOffsetChannel>
 8002428:	4603      	mov	r3, r0
 800242a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10a      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x3a8>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2103      	movs	r1, #3
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe fec9 	bl	80011d0 <LL_ADC_GetOffsetChannel>
 800243e:	4603      	mov	r3, r0
 8002440:	0e9b      	lsrs	r3, r3, #26
 8002442:	f003 021f 	and.w	r2, r3, #31
 8002446:	e017      	b.n	8002478 <HAL_ADC_ConfigChannel+0x3d8>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2103      	movs	r1, #3
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe febe 	bl	80011d0 <LL_ADC_GetOffsetChannel>
 8002454:	4603      	mov	r3, r0
 8002456:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002458:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800245a:	fa93 f3a3 	rbit	r3, r3
 800245e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002460:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002462:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002464:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800246a:	2320      	movs	r3, #32
 800246c:	e003      	b.n	8002476 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800246e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002470:	fab3 f383 	clz	r3, r3
 8002474:	b2db      	uxtb	r3, r3
 8002476:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002480:	2b00      	cmp	r3, #0
 8002482:	d105      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x3f0>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	0e9b      	lsrs	r3, r3, #26
 800248a:	f003 031f 	and.w	r3, r3, #31
 800248e:	e011      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x414>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002498:	fa93 f3a3 	rbit	r3, r3
 800249c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800249e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80024a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80024a8:	2320      	movs	r3, #32
 80024aa:	e003      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80024ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d106      	bne.n	80024c6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2200      	movs	r2, #0
 80024be:	2103      	movs	r1, #3
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fe fe9b 	bl	80011fc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff f82e 	bl	800152c <LL_ADC_IsEnabled>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f040 8140 	bne.w	8002758 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6818      	ldr	r0, [r3, #0]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	6819      	ldr	r1, [r3, #0]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	461a      	mov	r2, r3
 80024e6:	f7fe ff6b 	bl	80013c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	4a8f      	ldr	r2, [pc, #572]	; (800272c <HAL_ADC_ConfigChannel+0x68c>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	f040 8131 	bne.w	8002758 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10b      	bne.n	800251e <HAL_ADC_ConfigChannel+0x47e>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	0e9b      	lsrs	r3, r3, #26
 800250c:	3301      	adds	r3, #1
 800250e:	f003 031f 	and.w	r3, r3, #31
 8002512:	2b09      	cmp	r3, #9
 8002514:	bf94      	ite	ls
 8002516:	2301      	movls	r3, #1
 8002518:	2300      	movhi	r3, #0
 800251a:	b2db      	uxtb	r3, r3
 800251c:	e019      	b.n	8002552 <HAL_ADC_ConfigChannel+0x4b2>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002524:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002526:	fa93 f3a3 	rbit	r3, r3
 800252a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800252c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800252e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002530:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002536:	2320      	movs	r3, #32
 8002538:	e003      	b.n	8002542 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800253a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800253c:	fab3 f383 	clz	r3, r3
 8002540:	b2db      	uxtb	r3, r3
 8002542:	3301      	adds	r3, #1
 8002544:	f003 031f 	and.w	r3, r3, #31
 8002548:	2b09      	cmp	r3, #9
 800254a:	bf94      	ite	ls
 800254c:	2301      	movls	r3, #1
 800254e:	2300      	movhi	r3, #0
 8002550:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002552:	2b00      	cmp	r3, #0
 8002554:	d079      	beq.n	800264a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800255e:	2b00      	cmp	r3, #0
 8002560:	d107      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x4d2>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	0e9b      	lsrs	r3, r3, #26
 8002568:	3301      	adds	r3, #1
 800256a:	069b      	lsls	r3, r3, #26
 800256c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002570:	e015      	b.n	800259e <HAL_ADC_ConfigChannel+0x4fe>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800257a:	fa93 f3a3 	rbit	r3, r3
 800257e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002582:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002584:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800258a:	2320      	movs	r3, #32
 800258c:	e003      	b.n	8002596 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800258e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002590:	fab3 f383 	clz	r3, r3
 8002594:	b2db      	uxtb	r3, r3
 8002596:	3301      	adds	r3, #1
 8002598:	069b      	lsls	r3, r3, #26
 800259a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d109      	bne.n	80025be <HAL_ADC_ConfigChannel+0x51e>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	0e9b      	lsrs	r3, r3, #26
 80025b0:	3301      	adds	r3, #1
 80025b2:	f003 031f 	and.w	r3, r3, #31
 80025b6:	2101      	movs	r1, #1
 80025b8:	fa01 f303 	lsl.w	r3, r1, r3
 80025bc:	e017      	b.n	80025ee <HAL_ADC_ConfigChannel+0x54e>
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025c6:	fa93 f3a3 	rbit	r3, r3
 80025ca:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80025cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025ce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80025d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80025d6:	2320      	movs	r3, #32
 80025d8:	e003      	b.n	80025e2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80025da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025dc:	fab3 f383 	clz	r3, r3
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	3301      	adds	r3, #1
 80025e4:	f003 031f 	and.w	r3, r3, #31
 80025e8:	2101      	movs	r1, #1
 80025ea:	fa01 f303 	lsl.w	r3, r1, r3
 80025ee:	ea42 0103 	orr.w	r1, r2, r3
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10a      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x574>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	0e9b      	lsrs	r3, r3, #26
 8002604:	3301      	adds	r3, #1
 8002606:	f003 021f 	and.w	r2, r3, #31
 800260a:	4613      	mov	r3, r2
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	4413      	add	r3, r2
 8002610:	051b      	lsls	r3, r3, #20
 8002612:	e018      	b.n	8002646 <HAL_ADC_ConfigChannel+0x5a6>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800261c:	fa93 f3a3 	rbit	r3, r3
 8002620:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002624:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800262c:	2320      	movs	r3, #32
 800262e:	e003      	b.n	8002638 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002632:	fab3 f383 	clz	r3, r3
 8002636:	b2db      	uxtb	r3, r3
 8002638:	3301      	adds	r3, #1
 800263a:	f003 021f 	and.w	r2, r3, #31
 800263e:	4613      	mov	r3, r2
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	4413      	add	r3, r2
 8002644:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002646:	430b      	orrs	r3, r1
 8002648:	e081      	b.n	800274e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002652:	2b00      	cmp	r3, #0
 8002654:	d107      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x5c6>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	0e9b      	lsrs	r3, r3, #26
 800265c:	3301      	adds	r3, #1
 800265e:	069b      	lsls	r3, r3, #26
 8002660:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002664:	e015      	b.n	8002692 <HAL_ADC_ConfigChannel+0x5f2>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266e:	fa93 f3a3 	rbit	r3, r3
 8002672:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002676:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800267e:	2320      	movs	r3, #32
 8002680:	e003      	b.n	800268a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002684:	fab3 f383 	clz	r3, r3
 8002688:	b2db      	uxtb	r3, r3
 800268a:	3301      	adds	r3, #1
 800268c:	069b      	lsls	r3, r3, #26
 800268e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800269a:	2b00      	cmp	r3, #0
 800269c:	d109      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x612>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	0e9b      	lsrs	r3, r3, #26
 80026a4:	3301      	adds	r3, #1
 80026a6:	f003 031f 	and.w	r3, r3, #31
 80026aa:	2101      	movs	r1, #1
 80026ac:	fa01 f303 	lsl.w	r3, r1, r3
 80026b0:	e017      	b.n	80026e2 <HAL_ADC_ConfigChannel+0x642>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	6a3b      	ldr	r3, [r7, #32]
 80026ba:	fa93 f3a3 	rbit	r3, r3
 80026be:	61fb      	str	r3, [r7, #28]
  return result;
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80026ca:	2320      	movs	r3, #32
 80026cc:	e003      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	fab3 f383 	clz	r3, r3
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	3301      	adds	r3, #1
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	2101      	movs	r1, #1
 80026de:	fa01 f303 	lsl.w	r3, r1, r3
 80026e2:	ea42 0103 	orr.w	r1, r2, r3
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10d      	bne.n	800270e <HAL_ADC_ConfigChannel+0x66e>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	0e9b      	lsrs	r3, r3, #26
 80026f8:	3301      	adds	r3, #1
 80026fa:	f003 021f 	and.w	r2, r3, #31
 80026fe:	4613      	mov	r3, r2
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	4413      	add	r3, r2
 8002704:	3b1e      	subs	r3, #30
 8002706:	051b      	lsls	r3, r3, #20
 8002708:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800270c:	e01e      	b.n	800274c <HAL_ADC_ConfigChannel+0x6ac>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	fa93 f3a3 	rbit	r3, r3
 800271a:	613b      	str	r3, [r7, #16]
  return result;
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d104      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002726:	2320      	movs	r3, #32
 8002728:	e006      	b.n	8002738 <HAL_ADC_ConfigChannel+0x698>
 800272a:	bf00      	nop
 800272c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	fab3 f383 	clz	r3, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	3301      	adds	r3, #1
 800273a:	f003 021f 	and.w	r2, r3, #31
 800273e:	4613      	mov	r3, r2
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	4413      	add	r3, r2
 8002744:	3b1e      	subs	r3, #30
 8002746:	051b      	lsls	r3, r3, #20
 8002748:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800274c:	430b      	orrs	r3, r1
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	6892      	ldr	r2, [r2, #8]
 8002752:	4619      	mov	r1, r3
 8002754:	f7fe fe08 	bl	8001368 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	4b3f      	ldr	r3, [pc, #252]	; (800285c <HAL_ADC_ConfigChannel+0x7bc>)
 800275e:	4013      	ands	r3, r2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d071      	beq.n	8002848 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002764:	483e      	ldr	r0, [pc, #248]	; (8002860 <HAL_ADC_ConfigChannel+0x7c0>)
 8002766:	f7fe fd01 	bl	800116c <LL_ADC_GetCommonPathInternalCh>
 800276a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a3c      	ldr	r2, [pc, #240]	; (8002864 <HAL_ADC_ConfigChannel+0x7c4>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d004      	beq.n	8002782 <HAL_ADC_ConfigChannel+0x6e2>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a3a      	ldr	r2, [pc, #232]	; (8002868 <HAL_ADC_ConfigChannel+0x7c8>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d127      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002782:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002786:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d121      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002796:	d157      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002798:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800279c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027a0:	4619      	mov	r1, r3
 80027a2:	482f      	ldr	r0, [pc, #188]	; (8002860 <HAL_ADC_ConfigChannel+0x7c0>)
 80027a4:	f7fe fccf 	bl	8001146 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027a8:	4b30      	ldr	r3, [pc, #192]	; (800286c <HAL_ADC_ConfigChannel+0x7cc>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	099b      	lsrs	r3, r3, #6
 80027ae:	4a30      	ldr	r2, [pc, #192]	; (8002870 <HAL_ADC_ConfigChannel+0x7d0>)
 80027b0:	fba2 2303 	umull	r2, r3, r2, r3
 80027b4:	099b      	lsrs	r3, r3, #6
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	4613      	mov	r3, r2
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	4413      	add	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027c2:	e002      	b.n	80027ca <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1f9      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027d0:	e03a      	b.n	8002848 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a27      	ldr	r2, [pc, #156]	; (8002874 <HAL_ADC_ConfigChannel+0x7d4>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d113      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x764>
 80027dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10d      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a22      	ldr	r2, [pc, #136]	; (8002878 <HAL_ADC_ConfigChannel+0x7d8>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d02a      	beq.n	8002848 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027fa:	4619      	mov	r1, r3
 80027fc:	4818      	ldr	r0, [pc, #96]	; (8002860 <HAL_ADC_ConfigChannel+0x7c0>)
 80027fe:	f7fe fca2 	bl	8001146 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002802:	e021      	b.n	8002848 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a1c      	ldr	r2, [pc, #112]	; (800287c <HAL_ADC_ConfigChannel+0x7dc>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d11c      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800280e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d116      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a16      	ldr	r2, [pc, #88]	; (8002878 <HAL_ADC_ConfigChannel+0x7d8>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d011      	beq.n	8002848 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002824:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002828:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800282c:	4619      	mov	r1, r3
 800282e:	480c      	ldr	r0, [pc, #48]	; (8002860 <HAL_ADC_ConfigChannel+0x7c0>)
 8002830:	f7fe fc89 	bl	8001146 <LL_ADC_SetCommonPathInternalCh>
 8002834:	e008      	b.n	8002848 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283a:	f043 0220 	orr.w	r2, r3, #32
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002850:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002854:	4618      	mov	r0, r3
 8002856:	37d8      	adds	r7, #216	; 0xd8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	80080000 	.word	0x80080000
 8002860:	50000300 	.word	0x50000300
 8002864:	c3210000 	.word	0xc3210000
 8002868:	90c00010 	.word	0x90c00010
 800286c:	20000004 	.word	0x20000004
 8002870:	053e2d63 	.word	0x053e2d63
 8002874:	c7520000 	.word	0xc7520000
 8002878:	50000100 	.word	0x50000100
 800287c:	cb840000 	.word	0xcb840000

08002880 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7fe fe96 	bl	80015c8 <LL_ADC_REG_IsConversionOngoing>
 800289c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe feb7 	bl	8001616 <LL_ADC_INJ_IsConversionOngoing>
 80028a8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d103      	bne.n	80028b8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 8098 	beq.w	80029e8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d02a      	beq.n	800291c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	7f5b      	ldrb	r3, [r3, #29]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d126      	bne.n	800291c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	7f1b      	ldrb	r3, [r3, #28]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d122      	bne.n	800291c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80028d6:	2301      	movs	r3, #1
 80028d8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80028da:	e014      	b.n	8002906 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	4a45      	ldr	r2, [pc, #276]	; (80029f4 <ADC_ConversionStop+0x174>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d90d      	bls.n	8002900 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e8:	f043 0210 	orr.w	r2, r3, #16
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028f4:	f043 0201 	orr.w	r2, r3, #1
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e074      	b.n	80029ea <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	3301      	adds	r3, #1
 8002904:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002910:	2b40      	cmp	r3, #64	; 0x40
 8002912:	d1e3      	bne.n	80028dc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2240      	movs	r2, #64	; 0x40
 800291a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	2b02      	cmp	r3, #2
 8002920:	d014      	beq.n	800294c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe fe4e 	bl	80015c8 <LL_ADC_REG_IsConversionOngoing>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00c      	beq.n	800294c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f7fe fe0b 	bl	8001552 <LL_ADC_IsDisableOngoing>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d104      	bne.n	800294c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f7fe fe2a 	bl	80015a0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d014      	beq.n	800297c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f7fe fe5d 	bl	8001616 <LL_ADC_INJ_IsConversionOngoing>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00c      	beq.n	800297c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f7fe fdf3 	bl	8001552 <LL_ADC_IsDisableOngoing>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d104      	bne.n	800297c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe fe39 	bl	80015ee <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d005      	beq.n	800298e <ADC_ConversionStop+0x10e>
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	2b03      	cmp	r3, #3
 8002986:	d105      	bne.n	8002994 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002988:	230c      	movs	r3, #12
 800298a:	617b      	str	r3, [r7, #20]
        break;
 800298c:	e005      	b.n	800299a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800298e:	2308      	movs	r3, #8
 8002990:	617b      	str	r3, [r7, #20]
        break;
 8002992:	e002      	b.n	800299a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002994:	2304      	movs	r3, #4
 8002996:	617b      	str	r3, [r7, #20]
        break;
 8002998:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800299a:	f7fe fb93 	bl	80010c4 <HAL_GetTick>
 800299e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80029a0:	e01b      	b.n	80029da <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80029a2:	f7fe fb8f 	bl	80010c4 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b05      	cmp	r3, #5
 80029ae:	d914      	bls.n	80029da <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00d      	beq.n	80029da <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c2:	f043 0210 	orr.w	r2, r3, #16
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ce:	f043 0201 	orr.w	r2, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e007      	b.n	80029ea <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1dc      	bne.n	80029a2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3720      	adds	r7, #32
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	a33fffff 	.word	0xa33fffff

080029f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fe fd91 	bl	800152c <LL_ADC_IsEnabled>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d14d      	bne.n	8002aac <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689a      	ldr	r2, [r3, #8]
 8002a16:	4b28      	ldr	r3, [pc, #160]	; (8002ab8 <ADC_Enable+0xc0>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00d      	beq.n	8002a3a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a22:	f043 0210 	orr.w	r2, r3, #16
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a2e:	f043 0201 	orr.w	r2, r3, #1
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e039      	b.n	8002aae <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fe fd4c 	bl	80014dc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a44:	f7fe fb3e 	bl	80010c4 <HAL_GetTick>
 8002a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a4a:	e028      	b.n	8002a9e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7fe fd6b 	bl	800152c <LL_ADC_IsEnabled>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d104      	bne.n	8002a66 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fe fd3b 	bl	80014dc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a66:	f7fe fb2d 	bl	80010c4 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d914      	bls.n	8002a9e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d00d      	beq.n	8002a9e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a86:	f043 0210 	orr.w	r2, r3, #16
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a92:	f043 0201 	orr.w	r2, r3, #1
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e007      	b.n	8002aae <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d1cf      	bne.n	8002a4c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	8000003f 	.word	0x8000003f

08002abc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7fe fd42 	bl	8001552 <LL_ADC_IsDisableOngoing>
 8002ace:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fe fd29 	bl	800152c <LL_ADC_IsEnabled>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d047      	beq.n	8002b70 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d144      	bne.n	8002b70 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 030d 	and.w	r3, r3, #13
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d10c      	bne.n	8002b0e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fe fd03 	bl	8001504 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2203      	movs	r2, #3
 8002b04:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b06:	f7fe fadd 	bl	80010c4 <HAL_GetTick>
 8002b0a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b0c:	e029      	b.n	8002b62 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b12:	f043 0210 	orr.w	r2, r3, #16
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b1e:	f043 0201 	orr.w	r2, r3, #1
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e023      	b.n	8002b72 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b2a:	f7fe facb 	bl	80010c4 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d914      	bls.n	8002b62 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00d      	beq.n	8002b62 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4a:	f043 0210 	orr.w	r2, r3, #16
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b56:	f043 0201 	orr.w	r2, r3, #1
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e007      	b.n	8002b72 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1dc      	bne.n	8002b2a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
	...

08002be0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bf0:	4b0c      	ldr	r3, [pc, #48]	; (8002c24 <__NVIC_SetPriorityGrouping+0x44>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c12:	4a04      	ldr	r2, [pc, #16]	; (8002c24 <__NVIC_SetPriorityGrouping+0x44>)
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	60d3      	str	r3, [r2, #12]
}
 8002c18:	bf00      	nop
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	e000ed00 	.word	0xe000ed00

08002c28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c2c:	4b04      	ldr	r3, [pc, #16]	; (8002c40 <__NVIC_GetPriorityGrouping+0x18>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	0a1b      	lsrs	r3, r3, #8
 8002c32:	f003 0307 	and.w	r3, r3, #7
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	e000ed00 	.word	0xe000ed00

08002c44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	db0b      	blt.n	8002c6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c56:	79fb      	ldrb	r3, [r7, #7]
 8002c58:	f003 021f 	and.w	r2, r3, #31
 8002c5c:	4907      	ldr	r1, [pc, #28]	; (8002c7c <__NVIC_EnableIRQ+0x38>)
 8002c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c62:	095b      	lsrs	r3, r3, #5
 8002c64:	2001      	movs	r0, #1
 8002c66:	fa00 f202 	lsl.w	r2, r0, r2
 8002c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	e000e100 	.word	0xe000e100

08002c80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	6039      	str	r1, [r7, #0]
 8002c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	db0a      	blt.n	8002caa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	490c      	ldr	r1, [pc, #48]	; (8002ccc <__NVIC_SetPriority+0x4c>)
 8002c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9e:	0112      	lsls	r2, r2, #4
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ca8:	e00a      	b.n	8002cc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	4908      	ldr	r1, [pc, #32]	; (8002cd0 <__NVIC_SetPriority+0x50>)
 8002cb0:	79fb      	ldrb	r3, [r7, #7]
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	3b04      	subs	r3, #4
 8002cb8:	0112      	lsls	r2, r2, #4
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	761a      	strb	r2, [r3, #24]
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	e000e100 	.word	0xe000e100
 8002cd0:	e000ed00 	.word	0xe000ed00

08002cd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b089      	sub	sp, #36	; 0x24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f1c3 0307 	rsb	r3, r3, #7
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	bf28      	it	cs
 8002cf2:	2304      	movcs	r3, #4
 8002cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	2b06      	cmp	r3, #6
 8002cfc:	d902      	bls.n	8002d04 <NVIC_EncodePriority+0x30>
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	3b03      	subs	r3, #3
 8002d02:	e000      	b.n	8002d06 <NVIC_EncodePriority+0x32>
 8002d04:	2300      	movs	r3, #0
 8002d06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d08:	f04f 32ff 	mov.w	r2, #4294967295
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	43da      	mvns	r2, r3
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	401a      	ands	r2, r3
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	fa01 f303 	lsl.w	r3, r1, r3
 8002d26:	43d9      	mvns	r1, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d2c:	4313      	orrs	r3, r2
         );
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3724      	adds	r7, #36	; 0x24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
	...

08002d3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3b01      	subs	r3, #1
 8002d48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d4c:	d301      	bcc.n	8002d52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e00f      	b.n	8002d72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d52:	4a0a      	ldr	r2, [pc, #40]	; (8002d7c <SysTick_Config+0x40>)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3b01      	subs	r3, #1
 8002d58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d5a:	210f      	movs	r1, #15
 8002d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d60:	f7ff ff8e 	bl	8002c80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d64:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <SysTick_Config+0x40>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d6a:	4b04      	ldr	r3, [pc, #16]	; (8002d7c <SysTick_Config+0x40>)
 8002d6c:	2207      	movs	r2, #7
 8002d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	e000e010 	.word	0xe000e010

08002d80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f7ff ff29 	bl	8002be0 <__NVIC_SetPriorityGrouping>
}
 8002d8e:	bf00      	nop
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b086      	sub	sp, #24
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	60b9      	str	r1, [r7, #8]
 8002da0:	607a      	str	r2, [r7, #4]
 8002da2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002da4:	f7ff ff40 	bl	8002c28 <__NVIC_GetPriorityGrouping>
 8002da8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	68b9      	ldr	r1, [r7, #8]
 8002dae:	6978      	ldr	r0, [r7, #20]
 8002db0:	f7ff ff90 	bl	8002cd4 <NVIC_EncodePriority>
 8002db4:	4602      	mov	r2, r0
 8002db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dba:	4611      	mov	r1, r2
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff ff5f 	bl	8002c80 <__NVIC_SetPriority>
}
 8002dc2:	bf00      	nop
 8002dc4:	3718      	adds	r7, #24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b082      	sub	sp, #8
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff ff33 	bl	8002c44 <__NVIC_EnableIRQ>
}
 8002dde:	bf00      	nop
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7ff ffa4 	bl	8002d3c <SysTick_Config>
 8002df4:	4603      	mov	r3, r0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b082      	sub	sp, #8
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e014      	b.n	8002e3a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	791b      	ldrb	r3, [r3, #4]
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d105      	bne.n	8002e26 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7fd ff49 	bl	8000cb8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2202      	movs	r2, #2
 8002e2a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b082      	sub	sp, #8
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
 8002e4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	795b      	ldrb	r3, [r3, #5]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <HAL_DAC_Start+0x16>
 8002e54:	2302      	movs	r3, #2
 8002e56:	e043      	b.n	8002ee0 <HAL_DAC_Start+0x9e>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2202      	movs	r2, #2
 8002e62:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6819      	ldr	r1, [r3, #0]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	2201      	movs	r2, #1
 8002e72:	409a      	lsls	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8002e7c:	2001      	movs	r0, #1
 8002e7e:	f7fe f92d 	bl	80010dc <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10f      	bne.n	8002ea8 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d11d      	bne.n	8002ed2 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f042 0201 	orr.w	r2, r2, #1
 8002ea4:	605a      	str	r2, [r3, #4]
 8002ea6:	e014      	b.n	8002ed2 <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	f003 0310 	and.w	r3, r3, #16
 8002eb8:	2102      	movs	r1, #2
 8002eba:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d107      	bne.n	8002ed2 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f042 0202 	orr.w	r2, r2, #2
 8002ed0:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b087      	sub	sp, #28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
 8002ef4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d105      	bne.n	8002f18 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4413      	add	r3, r2
 8002f12:	3308      	adds	r3, #8
 8002f14:	617b      	str	r3, [r7, #20]
 8002f16:	e004      	b.n	8002f22 <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	3314      	adds	r3, #20
 8002f20:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	461a      	mov	r2, r3
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	371c      	adds	r7, #28
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08a      	sub	sp, #40	; 0x28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	795b      	ldrb	r3, [r3, #5]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_DAC_ConfigChannel+0x18>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e192      	b.n	8003276 <HAL_DAC_ConfigChannel+0x33e>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2201      	movs	r2, #1
 8002f54:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2202      	movs	r2, #2
 8002f5a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2b04      	cmp	r3, #4
 8002f62:	d174      	bne.n	800304e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002f64:	f7fe f8ae 	bl	80010c4 <HAL_GetTick>
 8002f68:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d134      	bne.n	8002fda <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f70:	e011      	b.n	8002f96 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f72:	f7fe f8a7 	bl	80010c4 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d90a      	bls.n	8002f96 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	f043 0208 	orr.w	r2, r3, #8
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2203      	movs	r2, #3
 8002f90:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e16f      	b.n	8003276 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1e6      	bne.n	8002f72 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8002fa4:	2001      	movs	r0, #1
 8002fa6:	f7fe f899 	bl	80010dc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fb2:	641a      	str	r2, [r3, #64]	; 0x40
 8002fb4:	e01e      	b.n	8002ff4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002fb6:	f7fe f885 	bl	80010c4 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d90a      	bls.n	8002fda <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	f043 0208 	orr.w	r2, r3, #8
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2203      	movs	r2, #3
 8002fd4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e14d      	b.n	8003276 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	dbe8      	blt.n	8002fb6 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	f7fe f879 	bl	80010dc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ff2:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f003 0310 	and.w	r3, r3, #16
 8003000:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003004:	fa01 f303 	lsl.w	r3, r1, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	ea02 0103 	and.w	r1, r2, r3
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	409a      	lsls	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f003 0310 	and.w	r3, r3, #16
 800302e:	21ff      	movs	r1, #255	; 0xff
 8003030:	fa01 f303 	lsl.w	r3, r1, r3
 8003034:	43db      	mvns	r3, r3
 8003036:	ea02 0103 	and.w	r1, r2, r3
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f003 0310 	and.w	r3, r3, #16
 8003044:	409a      	lsls	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d11d      	bne.n	8003092 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f003 0310 	and.w	r3, r3, #16
 8003064:	221f      	movs	r2, #31
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43db      	mvns	r3, r3
 800306c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800306e:	4013      	ands	r3, r2
 8003070:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f003 0310 	and.w	r3, r3, #16
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003086:	4313      	orrs	r3, r2
 8003088:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003090:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003098:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f003 0310 	and.w	r3, r3, #16
 80030a0:	2207      	movs	r2, #7
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43db      	mvns	r3, r3
 80030a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030aa:	4013      	ands	r3, r2
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d102      	bne.n	80030bc <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	623b      	str	r3, [r7, #32]
 80030ba:	e00f      	b.n	80030dc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d102      	bne.n	80030ca <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80030c4:	2301      	movs	r3, #1
 80030c6:	623b      	str	r3, [r7, #32]
 80030c8:	e008      	b.n	80030dc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d102      	bne.n	80030d8 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80030d2:	2301      	movs	r3, #1
 80030d4:	623b      	str	r3, [r7, #32]
 80030d6:	e001      	b.n	80030dc <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80030d8:	2300      	movs	r3, #0
 80030da:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	6a3a      	ldr	r2, [r7, #32]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f003 0310 	and.w	r3, r3, #16
 80030f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	43db      	mvns	r3, r3
 80030fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030fe:	4013      	ands	r3, r2
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	791b      	ldrb	r3, [r3, #4]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d102      	bne.n	8003110 <HAL_DAC_ConfigChannel+0x1d8>
 800310a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800310e:	e000      	b.n	8003112 <HAL_DAC_ConfigChannel+0x1da>
 8003110:	2300      	movs	r3, #0
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	4313      	orrs	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f003 0310 	and.w	r3, r3, #16
 800311e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43db      	mvns	r3, r3
 8003128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800312a:	4013      	ands	r3, r2
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	795b      	ldrb	r3, [r3, #5]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d102      	bne.n	800313c <HAL_DAC_ConfigChannel+0x204>
 8003136:	f44f 7300 	mov.w	r3, #512	; 0x200
 800313a:	e000      	b.n	800313e <HAL_DAC_ConfigChannel+0x206>
 800313c:	2300      	movs	r3, #0
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4313      	orrs	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800314a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2b02      	cmp	r3, #2
 8003152:	d114      	bne.n	800317e <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003154:	f000 ff9c 	bl	8004090 <HAL_RCC_GetHCLKFreq>
 8003158:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	4a48      	ldr	r2, [pc, #288]	; (8003280 <HAL_DAC_ConfigChannel+0x348>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d904      	bls.n	800316c <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003168:	627b      	str	r3, [r7, #36]	; 0x24
 800316a:	e00f      	b.n	800318c <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	4a45      	ldr	r2, [pc, #276]	; (8003284 <HAL_DAC_ConfigChannel+0x34c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d90a      	bls.n	800318a <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800317a:	627b      	str	r3, [r7, #36]	; 0x24
 800317c:	e006      	b.n	800318c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003184:	4313      	orrs	r3, r2
 8003186:	627b      	str	r3, [r7, #36]	; 0x24
 8003188:	e000      	b.n	800318c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800318a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f003 0310 	and.w	r3, r3, #16
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800319a:	4313      	orrs	r3, r2
 800319c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6819      	ldr	r1, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f003 0310 	and.w	r3, r3, #16
 80031b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	43da      	mvns	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	400a      	ands	r2, r1
 80031c2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f003 0310 	and.w	r3, r3, #16
 80031d2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	43db      	mvns	r3, r3
 80031dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031de:	4013      	ands	r3, r2
 80031e0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f003 0310 	and.w	r3, r3, #16
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f6:	4313      	orrs	r3, r2
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003200:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6819      	ldr	r1, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f003 0310 	and.w	r3, r3, #16
 800320e:	22c0      	movs	r2, #192	; 0xc0
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	43da      	mvns	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	400a      	ands	r2, r1
 800321c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	089b      	lsrs	r3, r3, #2
 8003224:	f003 030f 	and.w	r3, r3, #15
 8003228:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	089b      	lsrs	r3, r3, #2
 8003230:	021b      	lsls	r3, r3, #8
 8003232:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4313      	orrs	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f003 0310 	and.w	r3, r3, #16
 8003248:	f640 710f 	movw	r1, #3855	; 0xf0f
 800324c:	fa01 f303 	lsl.w	r3, r1, r3
 8003250:	43db      	mvns	r3, r3
 8003252:	ea02 0103 	and.w	r1, r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f003 0310 	and.w	r3, r3, #16
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	409a      	lsls	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2201      	movs	r2, #1
 800326c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3728      	adds	r7, #40	; 0x28
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	09896800 	.word	0x09896800
 8003284:	04c4b400 	.word	0x04c4b400

08003288 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003288:	b480      	push	{r7}
 800328a:	b087      	sub	sp, #28
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003292:	2300      	movs	r3, #0
 8003294:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003296:	e15a      	b.n	800354e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	2101      	movs	r1, #1
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	fa01 f303 	lsl.w	r3, r1, r3
 80032a4:	4013      	ands	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 814c 	beq.w	8003548 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d00b      	beq.n	80032d0 <HAL_GPIO_Init+0x48>
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d007      	beq.n	80032d0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032c4:	2b11      	cmp	r3, #17
 80032c6:	d003      	beq.n	80032d0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b12      	cmp	r3, #18
 80032ce:	d130      	bne.n	8003332 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	2203      	movs	r2, #3
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	43db      	mvns	r3, r3
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	4013      	ands	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003306:	2201      	movs	r2, #1
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	fa02 f303 	lsl.w	r3, r2, r3
 800330e:	43db      	mvns	r3, r3
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	4013      	ands	r3, r2
 8003314:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	091b      	lsrs	r3, r3, #4
 800331c:	f003 0201 	and.w	r2, r3, #1
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	4313      	orrs	r3, r2
 800332a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	2203      	movs	r2, #3
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	43db      	mvns	r3, r3
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	4013      	ands	r3, r2
 8003348:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	4313      	orrs	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b02      	cmp	r3, #2
 8003368:	d003      	beq.n	8003372 <HAL_GPIO_Init+0xea>
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b12      	cmp	r3, #18
 8003370:	d123      	bne.n	80033ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	08da      	lsrs	r2, r3, #3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	3208      	adds	r2, #8
 800337a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800337e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	220f      	movs	r2, #15
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	43db      	mvns	r3, r3
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	4013      	ands	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	691a      	ldr	r2, [r3, #16]
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	08da      	lsrs	r2, r3, #3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3208      	adds	r2, #8
 80033b4:	6939      	ldr	r1, [r7, #16]
 80033b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	2203      	movs	r2, #3
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43db      	mvns	r3, r3
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	4013      	ands	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f003 0203 	and.w	r2, r3, #3
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 80a6 	beq.w	8003548 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033fc:	4b5b      	ldr	r3, [pc, #364]	; (800356c <HAL_GPIO_Init+0x2e4>)
 80033fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003400:	4a5a      	ldr	r2, [pc, #360]	; (800356c <HAL_GPIO_Init+0x2e4>)
 8003402:	f043 0301 	orr.w	r3, r3, #1
 8003406:	6613      	str	r3, [r2, #96]	; 0x60
 8003408:	4b58      	ldr	r3, [pc, #352]	; (800356c <HAL_GPIO_Init+0x2e4>)
 800340a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	60bb      	str	r3, [r7, #8]
 8003412:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003414:	4a56      	ldr	r2, [pc, #344]	; (8003570 <HAL_GPIO_Init+0x2e8>)
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	089b      	lsrs	r3, r3, #2
 800341a:	3302      	adds	r3, #2
 800341c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003420:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	f003 0303 	and.w	r3, r3, #3
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	220f      	movs	r2, #15
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	43db      	mvns	r3, r3
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	4013      	ands	r3, r2
 8003436:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800343e:	d01f      	beq.n	8003480 <HAL_GPIO_Init+0x1f8>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a4c      	ldr	r2, [pc, #304]	; (8003574 <HAL_GPIO_Init+0x2ec>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d019      	beq.n	800347c <HAL_GPIO_Init+0x1f4>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a4b      	ldr	r2, [pc, #300]	; (8003578 <HAL_GPIO_Init+0x2f0>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d013      	beq.n	8003478 <HAL_GPIO_Init+0x1f0>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a4a      	ldr	r2, [pc, #296]	; (800357c <HAL_GPIO_Init+0x2f4>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d00d      	beq.n	8003474 <HAL_GPIO_Init+0x1ec>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a49      	ldr	r2, [pc, #292]	; (8003580 <HAL_GPIO_Init+0x2f8>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d007      	beq.n	8003470 <HAL_GPIO_Init+0x1e8>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a48      	ldr	r2, [pc, #288]	; (8003584 <HAL_GPIO_Init+0x2fc>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d101      	bne.n	800346c <HAL_GPIO_Init+0x1e4>
 8003468:	2305      	movs	r3, #5
 800346a:	e00a      	b.n	8003482 <HAL_GPIO_Init+0x1fa>
 800346c:	2306      	movs	r3, #6
 800346e:	e008      	b.n	8003482 <HAL_GPIO_Init+0x1fa>
 8003470:	2304      	movs	r3, #4
 8003472:	e006      	b.n	8003482 <HAL_GPIO_Init+0x1fa>
 8003474:	2303      	movs	r3, #3
 8003476:	e004      	b.n	8003482 <HAL_GPIO_Init+0x1fa>
 8003478:	2302      	movs	r3, #2
 800347a:	e002      	b.n	8003482 <HAL_GPIO_Init+0x1fa>
 800347c:	2301      	movs	r3, #1
 800347e:	e000      	b.n	8003482 <HAL_GPIO_Init+0x1fa>
 8003480:	2300      	movs	r3, #0
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	f002 0203 	and.w	r2, r2, #3
 8003488:	0092      	lsls	r2, r2, #2
 800348a:	4093      	lsls	r3, r2
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	4313      	orrs	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003492:	4937      	ldr	r1, [pc, #220]	; (8003570 <HAL_GPIO_Init+0x2e8>)
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	089b      	lsrs	r3, r3, #2
 8003498:	3302      	adds	r3, #2
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80034a0:	4b39      	ldr	r3, [pc, #228]	; (8003588 <HAL_GPIO_Init+0x300>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	43db      	mvns	r3, r3
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	4013      	ands	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034c4:	4a30      	ldr	r2, [pc, #192]	; (8003588 <HAL_GPIO_Init+0x300>)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80034ca:	4b2f      	ldr	r3, [pc, #188]	; (8003588 <HAL_GPIO_Init+0x300>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	43db      	mvns	r3, r3
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	4013      	ands	r3, r2
 80034d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034ee:	4a26      	ldr	r2, [pc, #152]	; (8003588 <HAL_GPIO_Init+0x300>)
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034f4:	4b24      	ldr	r3, [pc, #144]	; (8003588 <HAL_GPIO_Init+0x300>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	43db      	mvns	r3, r3
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	4013      	ands	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003518:	4a1b      	ldr	r2, [pc, #108]	; (8003588 <HAL_GPIO_Init+0x300>)
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800351e:	4b1a      	ldr	r3, [pc, #104]	; (8003588 <HAL_GPIO_Init+0x300>)
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	43db      	mvns	r3, r3
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4013      	ands	r3, r2
 800352c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4313      	orrs	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003542:	4a11      	ldr	r2, [pc, #68]	; (8003588 <HAL_GPIO_Init+0x300>)
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	3301      	adds	r3, #1
 800354c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	fa22 f303 	lsr.w	r3, r2, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	f47f ae9d 	bne.w	8003298 <HAL_GPIO_Init+0x10>
  }
}
 800355e:	bf00      	nop
 8003560:	bf00      	nop
 8003562:	371c      	adds	r7, #28
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	40021000 	.word	0x40021000
 8003570:	40010000 	.word	0x40010000
 8003574:	48000400 	.word	0x48000400
 8003578:	48000800 	.word	0x48000800
 800357c:	48000c00 	.word	0x48000c00
 8003580:	48001000 	.word	0x48001000
 8003584:	48001400 	.word	0x48001400
 8003588:	40010400 	.word	0x40010400

0800358c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	460b      	mov	r3, r1
 8003596:	807b      	strh	r3, [r7, #2]
 8003598:	4613      	mov	r3, r2
 800359a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800359c:	787b      	ldrb	r3, [r7, #1]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035a2:	887a      	ldrh	r2, [r7, #2]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035a8:	e002      	b.n	80035b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035aa:	887a      	ldrh	r2, [r7, #2]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d141      	bne.n	800364e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035ca:	4b4b      	ldr	r3, [pc, #300]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d6:	d131      	bne.n	800363c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035d8:	4b47      	ldr	r3, [pc, #284]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035de:	4a46      	ldr	r2, [pc, #280]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035e8:	4b43      	ldr	r3, [pc, #268]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035f0:	4a41      	ldr	r2, [pc, #260]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035f8:	4b40      	ldr	r3, [pc, #256]	; (80036fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2232      	movs	r2, #50	; 0x32
 80035fe:	fb02 f303 	mul.w	r3, r2, r3
 8003602:	4a3f      	ldr	r2, [pc, #252]	; (8003700 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003604:	fba2 2303 	umull	r2, r3, r2, r3
 8003608:	0c9b      	lsrs	r3, r3, #18
 800360a:	3301      	adds	r3, #1
 800360c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800360e:	e002      	b.n	8003616 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	3b01      	subs	r3, #1
 8003614:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003616:	4b38      	ldr	r3, [pc, #224]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800361e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003622:	d102      	bne.n	800362a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f2      	bne.n	8003610 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800362a:	4b33      	ldr	r3, [pc, #204]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003636:	d158      	bne.n	80036ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e057      	b.n	80036ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800363c:	4b2e      	ldr	r3, [pc, #184]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800363e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003642:	4a2d      	ldr	r2, [pc, #180]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003644:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003648:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800364c:	e04d      	b.n	80036ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003654:	d141      	bne.n	80036da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003656:	4b28      	ldr	r3, [pc, #160]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800365e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003662:	d131      	bne.n	80036c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003664:	4b24      	ldr	r3, [pc, #144]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003666:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800366a:	4a23      	ldr	r2, [pc, #140]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800366c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003670:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003674:	4b20      	ldr	r3, [pc, #128]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800367c:	4a1e      	ldr	r2, [pc, #120]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800367e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003682:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003684:	4b1d      	ldr	r3, [pc, #116]	; (80036fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2232      	movs	r2, #50	; 0x32
 800368a:	fb02 f303 	mul.w	r3, r2, r3
 800368e:	4a1c      	ldr	r2, [pc, #112]	; (8003700 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003690:	fba2 2303 	umull	r2, r3, r2, r3
 8003694:	0c9b      	lsrs	r3, r3, #18
 8003696:	3301      	adds	r3, #1
 8003698:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800369a:	e002      	b.n	80036a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	3b01      	subs	r3, #1
 80036a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036a2:	4b15      	ldr	r3, [pc, #84]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ae:	d102      	bne.n	80036b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f2      	bne.n	800369c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036b6:	4b10      	ldr	r3, [pc, #64]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c2:	d112      	bne.n	80036ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e011      	b.n	80036ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036c8:	4b0b      	ldr	r3, [pc, #44]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036ce:	4a0a      	ldr	r2, [pc, #40]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80036d8:	e007      	b.n	80036ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036da:	4b07      	ldr	r3, [pc, #28]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036e2:	4a05      	ldr	r2, [pc, #20]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036e8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	40007000 	.word	0x40007000
 80036fc:	20000004 	.word	0x20000004
 8003700:	431bde83 	.word	0x431bde83

08003704 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003708:	4b05      	ldr	r3, [pc, #20]	; (8003720 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	4a04      	ldr	r2, [pc, #16]	; (8003720 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800370e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003712:	6093      	str	r3, [r2, #8]
}
 8003714:	bf00      	nop
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	40007000 	.word	0x40007000

08003724 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b088      	sub	sp, #32
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e308      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d075      	beq.n	800382e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003742:	4ba3      	ldr	r3, [pc, #652]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 030c 	and.w	r3, r3, #12
 800374a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800374c:	4ba0      	ldr	r3, [pc, #640]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f003 0303 	and.w	r3, r3, #3
 8003754:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	2b0c      	cmp	r3, #12
 800375a:	d102      	bne.n	8003762 <HAL_RCC_OscConfig+0x3e>
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	2b03      	cmp	r3, #3
 8003760:	d002      	beq.n	8003768 <HAL_RCC_OscConfig+0x44>
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	2b08      	cmp	r3, #8
 8003766:	d10b      	bne.n	8003780 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003768:	4b99      	ldr	r3, [pc, #612]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d05b      	beq.n	800382c <HAL_RCC_OscConfig+0x108>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d157      	bne.n	800382c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e2e3      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003788:	d106      	bne.n	8003798 <HAL_RCC_OscConfig+0x74>
 800378a:	4b91      	ldr	r3, [pc, #580]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a90      	ldr	r2, [pc, #576]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 8003790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	e01d      	b.n	80037d4 <HAL_RCC_OscConfig+0xb0>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037a0:	d10c      	bne.n	80037bc <HAL_RCC_OscConfig+0x98>
 80037a2:	4b8b      	ldr	r3, [pc, #556]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a8a      	ldr	r2, [pc, #552]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80037a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	4b88      	ldr	r3, [pc, #544]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a87      	ldr	r2, [pc, #540]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80037b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	e00b      	b.n	80037d4 <HAL_RCC_OscConfig+0xb0>
 80037bc:	4b84      	ldr	r3, [pc, #528]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a83      	ldr	r2, [pc, #524]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80037c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c6:	6013      	str	r3, [r2, #0]
 80037c8:	4b81      	ldr	r3, [pc, #516]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a80      	ldr	r2, [pc, #512]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80037ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d013      	beq.n	8003804 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037dc:	f7fd fc72 	bl	80010c4 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037e4:	f7fd fc6e 	bl	80010c4 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b64      	cmp	r3, #100	; 0x64
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e2a8      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037f6:	4b76      	ldr	r3, [pc, #472]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d0f0      	beq.n	80037e4 <HAL_RCC_OscConfig+0xc0>
 8003802:	e014      	b.n	800382e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003804:	f7fd fc5e 	bl	80010c4 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800380c:	f7fd fc5a 	bl	80010c4 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b64      	cmp	r3, #100	; 0x64
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e294      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800381e:	4b6c      	ldr	r3, [pc, #432]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1f0      	bne.n	800380c <HAL_RCC_OscConfig+0xe8>
 800382a:	e000      	b.n	800382e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800382c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d075      	beq.n	8003926 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800383a:	4b65      	ldr	r3, [pc, #404]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 030c 	and.w	r3, r3, #12
 8003842:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003844:	4b62      	ldr	r3, [pc, #392]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f003 0303 	and.w	r3, r3, #3
 800384c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	2b0c      	cmp	r3, #12
 8003852:	d102      	bne.n	800385a <HAL_RCC_OscConfig+0x136>
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	2b02      	cmp	r3, #2
 8003858:	d002      	beq.n	8003860 <HAL_RCC_OscConfig+0x13c>
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	2b04      	cmp	r3, #4
 800385e:	d11f      	bne.n	80038a0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003860:	4b5b      	ldr	r3, [pc, #364]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003868:	2b00      	cmp	r3, #0
 800386a:	d005      	beq.n	8003878 <HAL_RCC_OscConfig+0x154>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e267      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003878:	4b55      	ldr	r3, [pc, #340]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	061b      	lsls	r3, r3, #24
 8003886:	4952      	ldr	r1, [pc, #328]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 8003888:	4313      	orrs	r3, r2
 800388a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800388c:	4b51      	ldr	r3, [pc, #324]	; (80039d4 <HAL_RCC_OscConfig+0x2b0>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f7fd fbcb 	bl	800102c <HAL_InitTick>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d043      	beq.n	8003924 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e253      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d023      	beq.n	80038f0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038a8:	4b49      	ldr	r3, [pc, #292]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a48      	ldr	r2, [pc, #288]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80038ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b4:	f7fd fc06 	bl	80010c4 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038bc:	f7fd fc02 	bl	80010c4 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e23c      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038ce:	4b40      	ldr	r3, [pc, #256]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0f0      	beq.n	80038bc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038da:	4b3d      	ldr	r3, [pc, #244]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	061b      	lsls	r3, r3, #24
 80038e8:	4939      	ldr	r1, [pc, #228]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	604b      	str	r3, [r1, #4]
 80038ee:	e01a      	b.n	8003926 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038f0:	4b37      	ldr	r3, [pc, #220]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a36      	ldr	r2, [pc, #216]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80038f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fc:	f7fd fbe2 	bl	80010c4 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003904:	f7fd fbde 	bl	80010c4 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e218      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003916:	4b2e      	ldr	r3, [pc, #184]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f0      	bne.n	8003904 <HAL_RCC_OscConfig+0x1e0>
 8003922:	e000      	b.n	8003926 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003924:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0308 	and.w	r3, r3, #8
 800392e:	2b00      	cmp	r3, #0
 8003930:	d03c      	beq.n	80039ac <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d01c      	beq.n	8003974 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800393a:	4b25      	ldr	r3, [pc, #148]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 800393c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003940:	4a23      	ldr	r2, [pc, #140]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 8003942:	f043 0301 	orr.w	r3, r3, #1
 8003946:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394a:	f7fd fbbb 	bl	80010c4 <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003950:	e008      	b.n	8003964 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003952:	f7fd fbb7 	bl	80010c4 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e1f1      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003964:	4b1a      	ldr	r3, [pc, #104]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 8003966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0ef      	beq.n	8003952 <HAL_RCC_OscConfig+0x22e>
 8003972:	e01b      	b.n	80039ac <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003974:	4b16      	ldr	r3, [pc, #88]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 8003976:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800397a:	4a15      	ldr	r2, [pc, #84]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 800397c:	f023 0301 	bic.w	r3, r3, #1
 8003980:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003984:	f7fd fb9e 	bl	80010c4 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800398c:	f7fd fb9a 	bl	80010c4 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e1d4      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800399e:	4b0c      	ldr	r3, [pc, #48]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80039a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1ef      	bne.n	800398c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 80ab 	beq.w	8003b10 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ba:	2300      	movs	r3, #0
 80039bc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039be:	4b04      	ldr	r3, [pc, #16]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80039c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d106      	bne.n	80039d8 <HAL_RCC_OscConfig+0x2b4>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e005      	b.n	80039da <HAL_RCC_OscConfig+0x2b6>
 80039ce:	bf00      	nop
 80039d0:	40021000 	.word	0x40021000
 80039d4:	20000008 	.word	0x20000008
 80039d8:	2300      	movs	r3, #0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00d      	beq.n	80039fa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039de:	4baf      	ldr	r3, [pc, #700]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 80039e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e2:	4aae      	ldr	r2, [pc, #696]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 80039e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e8:	6593      	str	r3, [r2, #88]	; 0x58
 80039ea:	4bac      	ldr	r3, [pc, #688]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 80039ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80039f6:	2301      	movs	r3, #1
 80039f8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039fa:	4ba9      	ldr	r3, [pc, #676]	; (8003ca0 <HAL_RCC_OscConfig+0x57c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d118      	bne.n	8003a38 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a06:	4ba6      	ldr	r3, [pc, #664]	; (8003ca0 <HAL_RCC_OscConfig+0x57c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4aa5      	ldr	r2, [pc, #660]	; (8003ca0 <HAL_RCC_OscConfig+0x57c>)
 8003a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a12:	f7fd fb57 	bl	80010c4 <HAL_GetTick>
 8003a16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a18:	e008      	b.n	8003a2c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1a:	f7fd fb53 	bl	80010c4 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e18d      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a2c:	4b9c      	ldr	r3, [pc, #624]	; (8003ca0 <HAL_RCC_OscConfig+0x57c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0f0      	beq.n	8003a1a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d108      	bne.n	8003a52 <HAL_RCC_OscConfig+0x32e>
 8003a40:	4b96      	ldr	r3, [pc, #600]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a46:	4a95      	ldr	r2, [pc, #596]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003a48:	f043 0301 	orr.w	r3, r3, #1
 8003a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a50:	e024      	b.n	8003a9c <HAL_RCC_OscConfig+0x378>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2b05      	cmp	r3, #5
 8003a58:	d110      	bne.n	8003a7c <HAL_RCC_OscConfig+0x358>
 8003a5a:	4b90      	ldr	r3, [pc, #576]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a60:	4a8e      	ldr	r2, [pc, #568]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003a62:	f043 0304 	orr.w	r3, r3, #4
 8003a66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a6a:	4b8c      	ldr	r3, [pc, #560]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a70:	4a8a      	ldr	r2, [pc, #552]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003a72:	f043 0301 	orr.w	r3, r3, #1
 8003a76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a7a:	e00f      	b.n	8003a9c <HAL_RCC_OscConfig+0x378>
 8003a7c:	4b87      	ldr	r3, [pc, #540]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a82:	4a86      	ldr	r2, [pc, #536]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003a84:	f023 0301 	bic.w	r3, r3, #1
 8003a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a8c:	4b83      	ldr	r3, [pc, #524]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a92:	4a82      	ldr	r2, [pc, #520]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003a94:	f023 0304 	bic.w	r3, r3, #4
 8003a98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d016      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa4:	f7fd fb0e 	bl	80010c4 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aaa:	e00a      	b.n	8003ac2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aac:	f7fd fb0a 	bl	80010c4 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e142      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ac2:	4b76      	ldr	r3, [pc, #472]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0ed      	beq.n	8003aac <HAL_RCC_OscConfig+0x388>
 8003ad0:	e015      	b.n	8003afe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad2:	f7fd faf7 	bl	80010c4 <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ad8:	e00a      	b.n	8003af0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ada:	f7fd faf3 	bl	80010c4 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e12b      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003af0:	4b6a      	ldr	r3, [pc, #424]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1ed      	bne.n	8003ada <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003afe:	7ffb      	ldrb	r3, [r7, #31]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d105      	bne.n	8003b10 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b04:	4b65      	ldr	r3, [pc, #404]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b08:	4a64      	ldr	r2, [pc, #400]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003b0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b0e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0320 	and.w	r3, r3, #32
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d03c      	beq.n	8003b96 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d01c      	beq.n	8003b5e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b24:	4b5d      	ldr	r3, [pc, #372]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003b26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b2a:	4a5c      	ldr	r2, [pc, #368]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003b2c:	f043 0301 	orr.w	r3, r3, #1
 8003b30:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b34:	f7fd fac6 	bl	80010c4 <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b3c:	f7fd fac2 	bl	80010c4 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e0fc      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b4e:	4b53      	ldr	r3, [pc, #332]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003b50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0ef      	beq.n	8003b3c <HAL_RCC_OscConfig+0x418>
 8003b5c:	e01b      	b.n	8003b96 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b5e:	4b4f      	ldr	r3, [pc, #316]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003b60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b64:	4a4d      	ldr	r2, [pc, #308]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003b66:	f023 0301 	bic.w	r3, r3, #1
 8003b6a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6e:	f7fd faa9 	bl	80010c4 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b74:	e008      	b.n	8003b88 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b76:	f7fd faa5 	bl	80010c4 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e0df      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b88:	4b44      	ldr	r3, [pc, #272]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003b8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1ef      	bne.n	8003b76 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 80d3 	beq.w	8003d46 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ba0:	4b3e      	ldr	r3, [pc, #248]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f003 030c 	and.w	r3, r3, #12
 8003ba8:	2b0c      	cmp	r3, #12
 8003baa:	f000 808d 	beq.w	8003cc8 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d15a      	bne.n	8003c6c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb6:	4b39      	ldr	r3, [pc, #228]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a38      	ldr	r2, [pc, #224]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003bbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc2:	f7fd fa7f 	bl	80010c4 <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bc8:	e008      	b.n	8003bdc <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bca:	f7fd fa7b 	bl	80010c4 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e0b5      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bdc:	4b2f      	ldr	r3, [pc, #188]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1f0      	bne.n	8003bca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003be8:	4b2c      	ldr	r3, [pc, #176]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003bea:	68da      	ldr	r2, [r3, #12]
 8003bec:	4b2d      	ldr	r3, [pc, #180]	; (8003ca4 <HAL_RCC_OscConfig+0x580>)
 8003bee:	4013      	ands	r3, r2
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6a11      	ldr	r1, [r2, #32]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bf8:	3a01      	subs	r2, #1
 8003bfa:	0112      	lsls	r2, r2, #4
 8003bfc:	4311      	orrs	r1, r2
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003c02:	0212      	lsls	r2, r2, #8
 8003c04:	4311      	orrs	r1, r2
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c0a:	0852      	lsrs	r2, r2, #1
 8003c0c:	3a01      	subs	r2, #1
 8003c0e:	0552      	lsls	r2, r2, #21
 8003c10:	4311      	orrs	r1, r2
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c16:	0852      	lsrs	r2, r2, #1
 8003c18:	3a01      	subs	r2, #1
 8003c1a:	0652      	lsls	r2, r2, #25
 8003c1c:	4311      	orrs	r1, r2
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c22:	06d2      	lsls	r2, r2, #27
 8003c24:	430a      	orrs	r2, r1
 8003c26:	491d      	ldr	r1, [pc, #116]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c2c:	4b1b      	ldr	r3, [pc, #108]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a1a      	ldr	r2, [pc, #104]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003c32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c36:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c38:	4b18      	ldr	r3, [pc, #96]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	4a17      	ldr	r2, [pc, #92]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c42:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c44:	f7fd fa3e 	bl	80010c4 <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c4c:	f7fd fa3a 	bl	80010c4 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e074      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c5e:	4b0f      	ldr	r3, [pc, #60]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0f0      	beq.n	8003c4c <HAL_RCC_OscConfig+0x528>
 8003c6a:	e06c      	b.n	8003d46 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c6c:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a0a      	ldr	r2, [pc, #40]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003c72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c76:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003c78:	4b08      	ldr	r3, [pc, #32]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	4a07      	ldr	r2, [pc, #28]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003c7e:	f023 0303 	bic.w	r3, r3, #3
 8003c82:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003c84:	4b05      	ldr	r3, [pc, #20]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	4a04      	ldr	r2, [pc, #16]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003c8a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c92:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c94:	f7fd fa16 	bl	80010c4 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c9a:	e00e      	b.n	8003cba <HAL_RCC_OscConfig+0x596>
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	40007000 	.word	0x40007000
 8003ca4:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca8:	f7fd fa0c 	bl	80010c4 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e046      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cba:	4b25      	ldr	r3, [pc, #148]	; (8003d50 <HAL_RCC_OscConfig+0x62c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f0      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x584>
 8003cc6:	e03e      	b.n	8003d46 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d101      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e039      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003cd4:	4b1e      	ldr	r3, [pc, #120]	; (8003d50 <HAL_RCC_OscConfig+0x62c>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f003 0203 	and.w	r2, r3, #3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d12c      	bne.n	8003d42 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d123      	bne.n	8003d42 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d04:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d11b      	bne.n	8003d42 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d14:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d113      	bne.n	8003d42 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d24:	085b      	lsrs	r3, r3, #1
 8003d26:	3b01      	subs	r3, #1
 8003d28:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d109      	bne.n	8003d42 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d38:	085b      	lsrs	r3, r3, #1
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d001      	beq.n	8003d46 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3720      	adds	r7, #32
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40021000 	.word	0x40021000

08003d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e11e      	b.n	8003faa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d6c:	4b91      	ldr	r3, [pc, #580]	; (8003fb4 <HAL_RCC_ClockConfig+0x260>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 030f 	and.w	r3, r3, #15
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d910      	bls.n	8003d9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d7a:	4b8e      	ldr	r3, [pc, #568]	; (8003fb4 <HAL_RCC_ClockConfig+0x260>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f023 020f 	bic.w	r2, r3, #15
 8003d82:	498c      	ldr	r1, [pc, #560]	; (8003fb4 <HAL_RCC_ClockConfig+0x260>)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8a:	4b8a      	ldr	r3, [pc, #552]	; (8003fb4 <HAL_RCC_ClockConfig+0x260>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d001      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e106      	b.n	8003faa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d073      	beq.n	8003e90 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	d129      	bne.n	8003e04 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003db0:	4b81      	ldr	r3, [pc, #516]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0f4      	b.n	8003faa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003dc0:	f000 f972 	bl	80040a8 <RCC_GetSysClockFreqFromPLLSource>
 8003dc4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	4a7c      	ldr	r2, [pc, #496]	; (8003fbc <HAL_RCC_ClockConfig+0x268>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d93f      	bls.n	8003e4e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003dce:	4b7a      	ldr	r3, [pc, #488]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d009      	beq.n	8003dee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d033      	beq.n	8003e4e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d12f      	bne.n	8003e4e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003dee:	4b72      	ldr	r3, [pc, #456]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003df6:	4a70      	ldr	r2, [pc, #448]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dfc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003dfe:	2380      	movs	r3, #128	; 0x80
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	e024      	b.n	8003e4e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d107      	bne.n	8003e1c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e0c:	4b6a      	ldr	r3, [pc, #424]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d109      	bne.n	8003e2c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e0c6      	b.n	8003faa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e1c:	4b66      	ldr	r3, [pc, #408]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e0be      	b.n	8003faa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003e2c:	f000 f8ce 	bl	8003fcc <HAL_RCC_GetSysClockFreq>
 8003e30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	4a61      	ldr	r2, [pc, #388]	; (8003fbc <HAL_RCC_ClockConfig+0x268>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d909      	bls.n	8003e4e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e3a:	4b5f      	ldr	r3, [pc, #380]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e42:	4a5d      	ldr	r2, [pc, #372]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e48:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003e4a:	2380      	movs	r3, #128	; 0x80
 8003e4c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e4e:	4b5a      	ldr	r3, [pc, #360]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f023 0203 	bic.w	r2, r3, #3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	4957      	ldr	r1, [pc, #348]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e60:	f7fd f930 	bl	80010c4 <HAL_GetTick>
 8003e64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e66:	e00a      	b.n	8003e7e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e68:	f7fd f92c 	bl	80010c4 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e095      	b.n	8003faa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e7e:	4b4e      	ldr	r3, [pc, #312]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 020c 	and.w	r2, r3, #12
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d1eb      	bne.n	8003e68 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d023      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d005      	beq.n	8003eb4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ea8:	4b43      	ldr	r3, [pc, #268]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	4a42      	ldr	r2, [pc, #264]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003eae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003eb2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0308 	and.w	r3, r3, #8
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d007      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003ec0:	4b3d      	ldr	r3, [pc, #244]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ec8:	4a3b      	ldr	r2, [pc, #236]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003eca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ece:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ed0:	4b39      	ldr	r3, [pc, #228]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	4936      	ldr	r1, [pc, #216]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	608b      	str	r3, [r1, #8]
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	2b80      	cmp	r3, #128	; 0x80
 8003ee8:	d105      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003eea:	4b33      	ldr	r3, [pc, #204]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	4a32      	ldr	r2, [pc, #200]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003ef0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ef4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ef6:	4b2f      	ldr	r3, [pc, #188]	; (8003fb4 <HAL_RCC_ClockConfig+0x260>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 030f 	and.w	r3, r3, #15
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d21d      	bcs.n	8003f40 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f04:	4b2b      	ldr	r3, [pc, #172]	; (8003fb4 <HAL_RCC_ClockConfig+0x260>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f023 020f 	bic.w	r2, r3, #15
 8003f0c:	4929      	ldr	r1, [pc, #164]	; (8003fb4 <HAL_RCC_ClockConfig+0x260>)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f14:	f7fd f8d6 	bl	80010c4 <HAL_GetTick>
 8003f18:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f1a:	e00a      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f1c:	f7fd f8d2 	bl	80010c4 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e03b      	b.n	8003faa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f32:	4b20      	ldr	r3, [pc, #128]	; (8003fb4 <HAL_RCC_ClockConfig+0x260>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d1ed      	bne.n	8003f1c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d008      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f4c:	4b1a      	ldr	r3, [pc, #104]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	4917      	ldr	r1, [pc, #92]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d009      	beq.n	8003f7e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f6a:	4b13      	ldr	r3, [pc, #76]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	490f      	ldr	r1, [pc, #60]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f7e:	f000 f825 	bl	8003fcc <HAL_RCC_GetSysClockFreq>
 8003f82:	4602      	mov	r2, r0
 8003f84:	4b0c      	ldr	r3, [pc, #48]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	091b      	lsrs	r3, r3, #4
 8003f8a:	f003 030f 	and.w	r3, r3, #15
 8003f8e:	490c      	ldr	r1, [pc, #48]	; (8003fc0 <HAL_RCC_ClockConfig+0x26c>)
 8003f90:	5ccb      	ldrb	r3, [r1, r3]
 8003f92:	f003 031f 	and.w	r3, r3, #31
 8003f96:	fa22 f303 	lsr.w	r3, r2, r3
 8003f9a:	4a0a      	ldr	r2, [pc, #40]	; (8003fc4 <HAL_RCC_ClockConfig+0x270>)
 8003f9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003f9e:	4b0a      	ldr	r3, [pc, #40]	; (8003fc8 <HAL_RCC_ClockConfig+0x274>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fd f842 	bl	800102c <HAL_InitTick>
 8003fa8:	4603      	mov	r3, r0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3718      	adds	r7, #24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	40022000 	.word	0x40022000
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	04c4b400 	.word	0x04c4b400
 8003fc0:	0800638c 	.word	0x0800638c
 8003fc4:	20000004 	.word	0x20000004
 8003fc8:	20000008 	.word	0x20000008

08003fcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003fd2:	4b2c      	ldr	r3, [pc, #176]	; (8004084 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 030c 	and.w	r3, r3, #12
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d102      	bne.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003fde:	4b2a      	ldr	r3, [pc, #168]	; (8004088 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003fe0:	613b      	str	r3, [r7, #16]
 8003fe2:	e047      	b.n	8004074 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003fe4:	4b27      	ldr	r3, [pc, #156]	; (8004084 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 030c 	and.w	r3, r3, #12
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d102      	bne.n	8003ff6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ff0:	4b26      	ldr	r3, [pc, #152]	; (800408c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	e03e      	b.n	8004074 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003ff6:	4b23      	ldr	r3, [pc, #140]	; (8004084 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 030c 	and.w	r3, r3, #12
 8003ffe:	2b0c      	cmp	r3, #12
 8004000:	d136      	bne.n	8004070 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004002:	4b20      	ldr	r3, [pc, #128]	; (8004084 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800400c:	4b1d      	ldr	r3, [pc, #116]	; (8004084 <HAL_RCC_GetSysClockFreq+0xb8>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	091b      	lsrs	r3, r3, #4
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	3301      	adds	r3, #1
 8004018:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2b03      	cmp	r3, #3
 800401e:	d10c      	bne.n	800403a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004020:	4a1a      	ldr	r2, [pc, #104]	; (800408c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	fbb2 f3f3 	udiv	r3, r2, r3
 8004028:	4a16      	ldr	r2, [pc, #88]	; (8004084 <HAL_RCC_GetSysClockFreq+0xb8>)
 800402a:	68d2      	ldr	r2, [r2, #12]
 800402c:	0a12      	lsrs	r2, r2, #8
 800402e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004032:	fb02 f303 	mul.w	r3, r2, r3
 8004036:	617b      	str	r3, [r7, #20]
      break;
 8004038:	e00c      	b.n	8004054 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800403a:	4a13      	ldr	r2, [pc, #76]	; (8004088 <HAL_RCC_GetSysClockFreq+0xbc>)
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004042:	4a10      	ldr	r2, [pc, #64]	; (8004084 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004044:	68d2      	ldr	r2, [r2, #12]
 8004046:	0a12      	lsrs	r2, r2, #8
 8004048:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800404c:	fb02 f303 	mul.w	r3, r2, r3
 8004050:	617b      	str	r3, [r7, #20]
      break;
 8004052:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004054:	4b0b      	ldr	r3, [pc, #44]	; (8004084 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	0e5b      	lsrs	r3, r3, #25
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	3301      	adds	r3, #1
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	fbb2 f3f3 	udiv	r3, r2, r3
 800406c:	613b      	str	r3, [r7, #16]
 800406e:	e001      	b.n	8004074 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004074:	693b      	ldr	r3, [r7, #16]
}
 8004076:	4618      	mov	r0, r3
 8004078:	371c      	adds	r7, #28
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	40021000 	.word	0x40021000
 8004088:	00f42400 	.word	0x00f42400
 800408c:	007a1200 	.word	0x007a1200

08004090 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004094:	4b03      	ldr	r3, [pc, #12]	; (80040a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004096:	681b      	ldr	r3, [r3, #0]
}
 8004098:	4618      	mov	r0, r3
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	20000004 	.word	0x20000004

080040a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040ae:	4b1e      	ldr	r3, [pc, #120]	; (8004128 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040b8:	4b1b      	ldr	r3, [pc, #108]	; (8004128 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	091b      	lsrs	r3, r3, #4
 80040be:	f003 030f 	and.w	r3, r3, #15
 80040c2:	3301      	adds	r3, #1
 80040c4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	2b03      	cmp	r3, #3
 80040ca:	d10c      	bne.n	80040e6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040cc:	4a17      	ldr	r2, [pc, #92]	; (800412c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d4:	4a14      	ldr	r2, [pc, #80]	; (8004128 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040d6:	68d2      	ldr	r2, [r2, #12]
 80040d8:	0a12      	lsrs	r2, r2, #8
 80040da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040de:	fb02 f303 	mul.w	r3, r2, r3
 80040e2:	617b      	str	r3, [r7, #20]
    break;
 80040e4:	e00c      	b.n	8004100 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040e6:	4a12      	ldr	r2, [pc, #72]	; (8004130 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ee:	4a0e      	ldr	r2, [pc, #56]	; (8004128 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040f0:	68d2      	ldr	r2, [r2, #12]
 80040f2:	0a12      	lsrs	r2, r2, #8
 80040f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040f8:	fb02 f303 	mul.w	r3, r2, r3
 80040fc:	617b      	str	r3, [r7, #20]
    break;
 80040fe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004100:	4b09      	ldr	r3, [pc, #36]	; (8004128 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	0e5b      	lsrs	r3, r3, #25
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	3301      	adds	r3, #1
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	fbb2 f3f3 	udiv	r3, r2, r3
 8004118:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800411a:	687b      	ldr	r3, [r7, #4]
}
 800411c:	4618      	mov	r0, r3
 800411e:	371c      	adds	r7, #28
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	40021000 	.word	0x40021000
 800412c:	007a1200 	.word	0x007a1200
 8004130:	00f42400 	.word	0x00f42400

08004134 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800413c:	2300      	movs	r3, #0
 800413e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004140:	2300      	movs	r3, #0
 8004142:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 8098 	beq.w	8004282 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004152:	2300      	movs	r3, #0
 8004154:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004156:	4b43      	ldr	r3, [pc, #268]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10d      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004162:	4b40      	ldr	r3, [pc, #256]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004166:	4a3f      	ldr	r2, [pc, #252]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800416c:	6593      	str	r3, [r2, #88]	; 0x58
 800416e:	4b3d      	ldr	r3, [pc, #244]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004176:	60bb      	str	r3, [r7, #8]
 8004178:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800417a:	2301      	movs	r3, #1
 800417c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800417e:	4b3a      	ldr	r3, [pc, #232]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a39      	ldr	r2, [pc, #228]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004188:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800418a:	f7fc ff9b 	bl	80010c4 <HAL_GetTick>
 800418e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004190:	e009      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004192:	f7fc ff97 	bl	80010c4 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d902      	bls.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	74fb      	strb	r3, [r7, #19]
        break;
 80041a4:	e005      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041a6:	4b30      	ldr	r3, [pc, #192]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0ef      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80041b2:	7cfb      	ldrb	r3, [r7, #19]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d159      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041b8:	4b2a      	ldr	r3, [pc, #168]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041c2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d01e      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d019      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041d4:	4b23      	ldr	r3, [pc, #140]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041e0:	4b20      	ldr	r3, [pc, #128]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e6:	4a1f      	ldr	r2, [pc, #124]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041f0:	4b1c      	ldr	r3, [pc, #112]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f6:	4a1b      	ldr	r2, [pc, #108]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004200:	4a18      	ldr	r2, [pc, #96]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	d016      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004212:	f7fc ff57 	bl	80010c4 <HAL_GetTick>
 8004216:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004218:	e00b      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800421a:	f7fc ff53 	bl	80010c4 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	f241 3288 	movw	r2, #5000	; 0x1388
 8004228:	4293      	cmp	r3, r2
 800422a:	d902      	bls.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	74fb      	strb	r3, [r7, #19]
            break;
 8004230:	e006      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004232:	4b0c      	ldr	r3, [pc, #48]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0ec      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004240:	7cfb      	ldrb	r3, [r7, #19]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10b      	bne.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004246:	4b07      	ldr	r3, [pc, #28]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004254:	4903      	ldr	r1, [pc, #12]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004256:	4313      	orrs	r3, r2
 8004258:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800425c:	e008      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800425e:	7cfb      	ldrb	r3, [r7, #19]
 8004260:	74bb      	strb	r3, [r7, #18]
 8004262:	e005      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004264:	40021000 	.word	0x40021000
 8004268:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426c:	7cfb      	ldrb	r3, [r7, #19]
 800426e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004270:	7c7b      	ldrb	r3, [r7, #17]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d105      	bne.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004276:	4ba6      	ldr	r3, [pc, #664]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427a:	4aa5      	ldr	r2, [pc, #660]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800427c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004280:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00a      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800428e:	4ba0      	ldr	r3, [pc, #640]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004294:	f023 0203 	bic.w	r2, r3, #3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	499c      	ldr	r1, [pc, #624]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00a      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042b0:	4b97      	ldr	r3, [pc, #604]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b6:	f023 020c 	bic.w	r2, r3, #12
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	4994      	ldr	r1, [pc, #592]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0304 	and.w	r3, r3, #4
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00a      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042d2:	4b8f      	ldr	r3, [pc, #572]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	498b      	ldr	r1, [pc, #556]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0308 	and.w	r3, r3, #8
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00a      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042f4:	4b86      	ldr	r3, [pc, #536]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	4983      	ldr	r1, [pc, #524]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004304:	4313      	orrs	r3, r2
 8004306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0320 	and.w	r3, r3, #32
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00a      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004316:	4b7e      	ldr	r3, [pc, #504]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	497a      	ldr	r1, [pc, #488]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004326:	4313      	orrs	r3, r2
 8004328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00a      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004338:	4b75      	ldr	r3, [pc, #468]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800433a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	4972      	ldr	r1, [pc, #456]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004348:	4313      	orrs	r3, r2
 800434a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00a      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800435a:	4b6d      	ldr	r3, [pc, #436]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800435c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004360:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	4969      	ldr	r1, [pc, #420]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800436a:	4313      	orrs	r3, r2
 800436c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00a      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800437c:	4b64      	ldr	r3, [pc, #400]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800437e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004382:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	4961      	ldr	r1, [pc, #388]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800438c:	4313      	orrs	r3, r2
 800438e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00a      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800439e:	4b5c      	ldr	r3, [pc, #368]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	4958      	ldr	r1, [pc, #352]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d015      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043c0:	4b53      	ldr	r3, [pc, #332]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ce:	4950      	ldr	r1, [pc, #320]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043de:	d105      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043e0:	4b4b      	ldr	r3, [pc, #300]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	4a4a      	ldr	r2, [pc, #296]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043ea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d015      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043f8:	4b45      	ldr	r3, [pc, #276]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004406:	4942      	ldr	r1, [pc, #264]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004408:	4313      	orrs	r3, r2
 800440a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004412:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004416:	d105      	bne.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004418:	4b3d      	ldr	r3, [pc, #244]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	4a3c      	ldr	r2, [pc, #240]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800441e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004422:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d015      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004430:	4b37      	ldr	r3, [pc, #220]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004436:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443e:	4934      	ldr	r1, [pc, #208]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004440:	4313      	orrs	r3, r2
 8004442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800444e:	d105      	bne.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004450:	4b2f      	ldr	r3, [pc, #188]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	4a2e      	ldr	r2, [pc, #184]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004456:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800445a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d015      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004468:	4b29      	ldr	r3, [pc, #164]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004476:	4926      	ldr	r1, [pc, #152]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004478:	4313      	orrs	r3, r2
 800447a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004482:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004486:	d105      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004488:	4b21      	ldr	r3, [pc, #132]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	4a20      	ldr	r2, [pc, #128]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800448e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004492:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d015      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044a0:	4b1b      	ldr	r3, [pc, #108]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ae:	4918      	ldr	r1, [pc, #96]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044be:	d105      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044c0:	4b13      	ldr	r3, [pc, #76]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	4a12      	ldr	r2, [pc, #72]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d015      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80044d8:	4b0d      	ldr	r3, [pc, #52]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e6:	490a      	ldr	r1, [pc, #40]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044f6:	d105      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80044f8:	4b05      	ldr	r3, [pc, #20]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	4a04      	ldr	r2, [pc, #16]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004502:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004504:	7cbb      	ldrb	r3, [r7, #18]
}
 8004506:	4618      	mov	r0, r3
 8004508:	3718      	adds	r7, #24
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	40021000 	.word	0x40021000

08004514 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e049      	b.n	80045ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d106      	bne.n	8004540 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7fc fbfa 	bl	8000d34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	3304      	adds	r3, #4
 8004550:	4619      	mov	r1, r3
 8004552:	4610      	mov	r0, r2
 8004554:	f001 f814 	bl	8005580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
	...

080045c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d001      	beq.n	80045dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e042      	b.n	8004662 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2202      	movs	r2, #2
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a21      	ldr	r2, [pc, #132]	; (8004670 <HAL_TIM_Base_Start+0xac>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d018      	beq.n	8004620 <HAL_TIM_Base_Start+0x5c>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f6:	d013      	beq.n	8004620 <HAL_TIM_Base_Start+0x5c>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a1d      	ldr	r2, [pc, #116]	; (8004674 <HAL_TIM_Base_Start+0xb0>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d00e      	beq.n	8004620 <HAL_TIM_Base_Start+0x5c>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a1c      	ldr	r2, [pc, #112]	; (8004678 <HAL_TIM_Base_Start+0xb4>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d009      	beq.n	8004620 <HAL_TIM_Base_Start+0x5c>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a1a      	ldr	r2, [pc, #104]	; (800467c <HAL_TIM_Base_Start+0xb8>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d004      	beq.n	8004620 <HAL_TIM_Base_Start+0x5c>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a19      	ldr	r2, [pc, #100]	; (8004680 <HAL_TIM_Base_Start+0xbc>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d115      	bne.n	800464c <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689a      	ldr	r2, [r3, #8]
 8004626:	4b17      	ldr	r3, [pc, #92]	; (8004684 <HAL_TIM_Base_Start+0xc0>)
 8004628:	4013      	ands	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2b06      	cmp	r3, #6
 8004630:	d015      	beq.n	800465e <HAL_TIM_Base_Start+0x9a>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004638:	d011      	beq.n	800465e <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f042 0201 	orr.w	r2, r2, #1
 8004648:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800464a:	e008      	b.n	800465e <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0201 	orr.w	r2, r2, #1
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	e000      	b.n	8004660 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800465e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	40012c00 	.word	0x40012c00
 8004674:	40000400 	.word	0x40000400
 8004678:	40000800 	.word	0x40000800
 800467c:	40013400 	.word	0x40013400
 8004680:	40014000 	.word	0x40014000
 8004684:	00010007 	.word	0x00010007

08004688 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e049      	b.n	800472e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d106      	bne.n	80046b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f841 	bl	8004736 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3304      	adds	r3, #4
 80046c4:	4619      	mov	r1, r3
 80046c6:	4610      	mov	r0, r2
 80046c8:	f000 ff5a 	bl	8005580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004736:	b480      	push	{r7}
 8004738:	b083      	sub	sp, #12
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
	...

0800474c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d109      	bne.n	8004770 <HAL_TIM_PWM_Start+0x24>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b01      	cmp	r3, #1
 8004766:	bf14      	ite	ne
 8004768:	2301      	movne	r3, #1
 800476a:	2300      	moveq	r3, #0
 800476c:	b2db      	uxtb	r3, r3
 800476e:	e03c      	b.n	80047ea <HAL_TIM_PWM_Start+0x9e>
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	2b04      	cmp	r3, #4
 8004774:	d109      	bne.n	800478a <HAL_TIM_PWM_Start+0x3e>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b01      	cmp	r3, #1
 8004780:	bf14      	ite	ne
 8004782:	2301      	movne	r3, #1
 8004784:	2300      	moveq	r3, #0
 8004786:	b2db      	uxtb	r3, r3
 8004788:	e02f      	b.n	80047ea <HAL_TIM_PWM_Start+0x9e>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b08      	cmp	r3, #8
 800478e:	d109      	bne.n	80047a4 <HAL_TIM_PWM_Start+0x58>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b01      	cmp	r3, #1
 800479a:	bf14      	ite	ne
 800479c:	2301      	movne	r3, #1
 800479e:	2300      	moveq	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	e022      	b.n	80047ea <HAL_TIM_PWM_Start+0x9e>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	2b0c      	cmp	r3, #12
 80047a8:	d109      	bne.n	80047be <HAL_TIM_PWM_Start+0x72>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	bf14      	ite	ne
 80047b6:	2301      	movne	r3, #1
 80047b8:	2300      	moveq	r3, #0
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	e015      	b.n	80047ea <HAL_TIM_PWM_Start+0x9e>
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b10      	cmp	r3, #16
 80047c2:	d109      	bne.n	80047d8 <HAL_TIM_PWM_Start+0x8c>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	bf14      	ite	ne
 80047d0:	2301      	movne	r3, #1
 80047d2:	2300      	moveq	r3, #0
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	e008      	b.n	80047ea <HAL_TIM_PWM_Start+0x9e>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	bf14      	ite	ne
 80047e4:	2301      	movne	r3, #1
 80047e6:	2300      	moveq	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e097      	b.n	8004922 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d104      	bne.n	8004802 <HAL_TIM_PWM_Start+0xb6>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004800:	e023      	b.n	800484a <HAL_TIM_PWM_Start+0xfe>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b04      	cmp	r3, #4
 8004806:	d104      	bne.n	8004812 <HAL_TIM_PWM_Start+0xc6>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004810:	e01b      	b.n	800484a <HAL_TIM_PWM_Start+0xfe>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b08      	cmp	r3, #8
 8004816:	d104      	bne.n	8004822 <HAL_TIM_PWM_Start+0xd6>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004820:	e013      	b.n	800484a <HAL_TIM_PWM_Start+0xfe>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	2b0c      	cmp	r3, #12
 8004826:	d104      	bne.n	8004832 <HAL_TIM_PWM_Start+0xe6>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004830:	e00b      	b.n	800484a <HAL_TIM_PWM_Start+0xfe>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b10      	cmp	r3, #16
 8004836:	d104      	bne.n	8004842 <HAL_TIM_PWM_Start+0xf6>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004840:	e003      	b.n	800484a <HAL_TIM_PWM_Start+0xfe>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2202      	movs	r2, #2
 8004846:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2201      	movs	r2, #1
 8004850:	6839      	ldr	r1, [r7, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f001 fbd4 	bl	8006000 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a33      	ldr	r2, [pc, #204]	; (800492c <HAL_TIM_PWM_Start+0x1e0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d013      	beq.n	800488a <HAL_TIM_PWM_Start+0x13e>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a32      	ldr	r2, [pc, #200]	; (8004930 <HAL_TIM_PWM_Start+0x1e4>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d00e      	beq.n	800488a <HAL_TIM_PWM_Start+0x13e>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a30      	ldr	r2, [pc, #192]	; (8004934 <HAL_TIM_PWM_Start+0x1e8>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d009      	beq.n	800488a <HAL_TIM_PWM_Start+0x13e>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a2f      	ldr	r2, [pc, #188]	; (8004938 <HAL_TIM_PWM_Start+0x1ec>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d004      	beq.n	800488a <HAL_TIM_PWM_Start+0x13e>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a2d      	ldr	r2, [pc, #180]	; (800493c <HAL_TIM_PWM_Start+0x1f0>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d101      	bne.n	800488e <HAL_TIM_PWM_Start+0x142>
 800488a:	2301      	movs	r3, #1
 800488c:	e000      	b.n	8004890 <HAL_TIM_PWM_Start+0x144>
 800488e:	2300      	movs	r3, #0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d007      	beq.n	80048a4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048a2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a20      	ldr	r2, [pc, #128]	; (800492c <HAL_TIM_PWM_Start+0x1e0>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d018      	beq.n	80048e0 <HAL_TIM_PWM_Start+0x194>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b6:	d013      	beq.n	80048e0 <HAL_TIM_PWM_Start+0x194>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a20      	ldr	r2, [pc, #128]	; (8004940 <HAL_TIM_PWM_Start+0x1f4>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d00e      	beq.n	80048e0 <HAL_TIM_PWM_Start+0x194>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a1f      	ldr	r2, [pc, #124]	; (8004944 <HAL_TIM_PWM_Start+0x1f8>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d009      	beq.n	80048e0 <HAL_TIM_PWM_Start+0x194>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a17      	ldr	r2, [pc, #92]	; (8004930 <HAL_TIM_PWM_Start+0x1e4>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d004      	beq.n	80048e0 <HAL_TIM_PWM_Start+0x194>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a16      	ldr	r2, [pc, #88]	; (8004934 <HAL_TIM_PWM_Start+0x1e8>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d115      	bne.n	800490c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	4b18      	ldr	r3, [pc, #96]	; (8004948 <HAL_TIM_PWM_Start+0x1fc>)
 80048e8:	4013      	ands	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2b06      	cmp	r3, #6
 80048f0:	d015      	beq.n	800491e <HAL_TIM_PWM_Start+0x1d2>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f8:	d011      	beq.n	800491e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f042 0201 	orr.w	r2, r2, #1
 8004908:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800490a:	e008      	b.n	800491e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 0201 	orr.w	r2, r2, #1
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	e000      	b.n	8004920 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800491e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	40012c00 	.word	0x40012c00
 8004930:	40013400 	.word	0x40013400
 8004934:	40014000 	.word	0x40014000
 8004938:	40014400 	.word	0x40014400
 800493c:	40014800 	.word	0x40014800
 8004940:	40000400 	.word	0x40000400
 8004944:	40000800 	.word	0x40000800
 8004948:	00010007 	.word	0x00010007

0800494c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e049      	b.n	80049f2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d106      	bne.n	8004978 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7fc fa4e 	bl	8000e14 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2202      	movs	r2, #2
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3304      	adds	r3, #4
 8004988:	4619      	mov	r1, r3
 800498a:	4610      	mov	r0, r2
 800498c:	f000 fdf8 	bl	8005580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
	...

080049fc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d104      	bne.n	8004a16 <HAL_TIM_IC_Start_IT+0x1a>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	e023      	b.n	8004a5e <HAL_TIM_IC_Start_IT+0x62>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b04      	cmp	r3, #4
 8004a1a:	d104      	bne.n	8004a26 <HAL_TIM_IC_Start_IT+0x2a>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	e01b      	b.n	8004a5e <HAL_TIM_IC_Start_IT+0x62>
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d104      	bne.n	8004a36 <HAL_TIM_IC_Start_IT+0x3a>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	e013      	b.n	8004a5e <HAL_TIM_IC_Start_IT+0x62>
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b0c      	cmp	r3, #12
 8004a3a:	d104      	bne.n	8004a46 <HAL_TIM_IC_Start_IT+0x4a>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	e00b      	b.n	8004a5e <HAL_TIM_IC_Start_IT+0x62>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b10      	cmp	r3, #16
 8004a4a:	d104      	bne.n	8004a56 <HAL_TIM_IC_Start_IT+0x5a>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	e003      	b.n	8004a5e <HAL_TIM_IC_Start_IT+0x62>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d104      	bne.n	8004a70 <HAL_TIM_IC_Start_IT+0x74>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	e013      	b.n	8004a98 <HAL_TIM_IC_Start_IT+0x9c>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	d104      	bne.n	8004a80 <HAL_TIM_IC_Start_IT+0x84>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	e00b      	b.n	8004a98 <HAL_TIM_IC_Start_IT+0x9c>
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	2b08      	cmp	r3, #8
 8004a84:	d104      	bne.n	8004a90 <HAL_TIM_IC_Start_IT+0x94>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	e003      	b.n	8004a98 <HAL_TIM_IC_Start_IT+0x9c>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d102      	bne.n	8004aa6 <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004aa0:	7bbb      	ldrb	r3, [r7, #14]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d001      	beq.n	8004aaa <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e0d3      	b.n	8004c52 <HAL_TIM_IC_Start_IT+0x256>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d104      	bne.n	8004aba <HAL_TIM_IC_Start_IT+0xbe>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ab8:	e023      	b.n	8004b02 <HAL_TIM_IC_Start_IT+0x106>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b04      	cmp	r3, #4
 8004abe:	d104      	bne.n	8004aca <HAL_TIM_IC_Start_IT+0xce>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ac8:	e01b      	b.n	8004b02 <HAL_TIM_IC_Start_IT+0x106>
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	d104      	bne.n	8004ada <HAL_TIM_IC_Start_IT+0xde>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ad8:	e013      	b.n	8004b02 <HAL_TIM_IC_Start_IT+0x106>
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b0c      	cmp	r3, #12
 8004ade:	d104      	bne.n	8004aea <HAL_TIM_IC_Start_IT+0xee>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ae8:	e00b      	b.n	8004b02 <HAL_TIM_IC_Start_IT+0x106>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b10      	cmp	r3, #16
 8004aee:	d104      	bne.n	8004afa <HAL_TIM_IC_Start_IT+0xfe>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004af8:	e003      	b.n	8004b02 <HAL_TIM_IC_Start_IT+0x106>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2202      	movs	r2, #2
 8004afe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d104      	bne.n	8004b12 <HAL_TIM_IC_Start_IT+0x116>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b10:	e013      	b.n	8004b3a <HAL_TIM_IC_Start_IT+0x13e>
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d104      	bne.n	8004b22 <HAL_TIM_IC_Start_IT+0x126>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b20:	e00b      	b.n	8004b3a <HAL_TIM_IC_Start_IT+0x13e>
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	2b08      	cmp	r3, #8
 8004b26:	d104      	bne.n	8004b32 <HAL_TIM_IC_Start_IT+0x136>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b30:	e003      	b.n	8004b3a <HAL_TIM_IC_Start_IT+0x13e>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2202      	movs	r2, #2
 8004b36:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	2b0c      	cmp	r3, #12
 8004b3e:	d841      	bhi.n	8004bc4 <HAL_TIM_IC_Start_IT+0x1c8>
 8004b40:	a201      	add	r2, pc, #4	; (adr r2, 8004b48 <HAL_TIM_IC_Start_IT+0x14c>)
 8004b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b46:	bf00      	nop
 8004b48:	08004b7d 	.word	0x08004b7d
 8004b4c:	08004bc5 	.word	0x08004bc5
 8004b50:	08004bc5 	.word	0x08004bc5
 8004b54:	08004bc5 	.word	0x08004bc5
 8004b58:	08004b8f 	.word	0x08004b8f
 8004b5c:	08004bc5 	.word	0x08004bc5
 8004b60:	08004bc5 	.word	0x08004bc5
 8004b64:	08004bc5 	.word	0x08004bc5
 8004b68:	08004ba1 	.word	0x08004ba1
 8004b6c:	08004bc5 	.word	0x08004bc5
 8004b70:	08004bc5 	.word	0x08004bc5
 8004b74:	08004bc5 	.word	0x08004bc5
 8004b78:	08004bb3 	.word	0x08004bb3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68da      	ldr	r2, [r3, #12]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0202 	orr.w	r2, r2, #2
 8004b8a:	60da      	str	r2, [r3, #12]
      break;
 8004b8c:	e01b      	b.n	8004bc6 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68da      	ldr	r2, [r3, #12]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f042 0204 	orr.w	r2, r2, #4
 8004b9c:	60da      	str	r2, [r3, #12]
      break;
 8004b9e:	e012      	b.n	8004bc6 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68da      	ldr	r2, [r3, #12]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f042 0208 	orr.w	r2, r2, #8
 8004bae:	60da      	str	r2, [r3, #12]
      break;
 8004bb0:	e009      	b.n	8004bc6 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68da      	ldr	r2, [r3, #12]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f042 0210 	orr.w	r2, r2, #16
 8004bc0:	60da      	str	r2, [r3, #12]
      break;
 8004bc2:	e000      	b.n	8004bc6 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8004bc4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	6839      	ldr	r1, [r7, #0]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f001 fa16 	bl	8006000 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a20      	ldr	r2, [pc, #128]	; (8004c5c <HAL_TIM_IC_Start_IT+0x260>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d018      	beq.n	8004c10 <HAL_TIM_IC_Start_IT+0x214>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be6:	d013      	beq.n	8004c10 <HAL_TIM_IC_Start_IT+0x214>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a1c      	ldr	r2, [pc, #112]	; (8004c60 <HAL_TIM_IC_Start_IT+0x264>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d00e      	beq.n	8004c10 <HAL_TIM_IC_Start_IT+0x214>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a1b      	ldr	r2, [pc, #108]	; (8004c64 <HAL_TIM_IC_Start_IT+0x268>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d009      	beq.n	8004c10 <HAL_TIM_IC_Start_IT+0x214>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a19      	ldr	r2, [pc, #100]	; (8004c68 <HAL_TIM_IC_Start_IT+0x26c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d004      	beq.n	8004c10 <HAL_TIM_IC_Start_IT+0x214>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a18      	ldr	r2, [pc, #96]	; (8004c6c <HAL_TIM_IC_Start_IT+0x270>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d115      	bne.n	8004c3c <HAL_TIM_IC_Start_IT+0x240>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689a      	ldr	r2, [r3, #8]
 8004c16:	4b16      	ldr	r3, [pc, #88]	; (8004c70 <HAL_TIM_IC_Start_IT+0x274>)
 8004c18:	4013      	ands	r3, r2
 8004c1a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2b06      	cmp	r3, #6
 8004c20:	d015      	beq.n	8004c4e <HAL_TIM_IC_Start_IT+0x252>
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c28:	d011      	beq.n	8004c4e <HAL_TIM_IC_Start_IT+0x252>
    {
      __HAL_TIM_ENABLE(htim);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f042 0201 	orr.w	r2, r2, #1
 8004c38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c3a:	e008      	b.n	8004c4e <HAL_TIM_IC_Start_IT+0x252>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0201 	orr.w	r2, r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]
 8004c4c:	e000      	b.n	8004c50 <HAL_TIM_IC_Start_IT+0x254>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	40012c00 	.word	0x40012c00
 8004c60:	40000400 	.word	0x40000400
 8004c64:	40000800 	.word	0x40000800
 8004c68:	40013400 	.word	0x40013400
 8004c6c:	40014000 	.word	0x40014000
 8004c70:	00010007 	.word	0x00010007

08004c74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d122      	bne.n	8004cd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d11b      	bne.n	8004cd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f06f 0202 	mvn.w	r2, #2
 8004ca0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	f003 0303 	and.w	r3, r3, #3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7fb fafe 	bl	80002b8 <HAL_TIM_IC_CaptureCallback>
 8004cbc:	e005      	b.n	8004cca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 fc40 	bl	8005544 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 fc47 	bl	8005558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	f003 0304 	and.w	r3, r3, #4
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	d122      	bne.n	8004d24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b04      	cmp	r3, #4
 8004cea:	d11b      	bne.n	8004d24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f06f 0204 	mvn.w	r2, #4
 8004cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d003      	beq.n	8004d12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7fb fad4 	bl	80002b8 <HAL_TIM_IC_CaptureCallback>
 8004d10:	e005      	b.n	8004d1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 fc16 	bl	8005544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 fc1d 	bl	8005558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	f003 0308 	and.w	r3, r3, #8
 8004d2e:	2b08      	cmp	r3, #8
 8004d30:	d122      	bne.n	8004d78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f003 0308 	and.w	r3, r3, #8
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	d11b      	bne.n	8004d78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f06f 0208 	mvn.w	r2, #8
 8004d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2204      	movs	r2, #4
 8004d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	f003 0303 	and.w	r3, r3, #3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7fb faaa 	bl	80002b8 <HAL_TIM_IC_CaptureCallback>
 8004d64:	e005      	b.n	8004d72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 fbec 	bl	8005544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 fbf3 	bl	8005558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	f003 0310 	and.w	r3, r3, #16
 8004d82:	2b10      	cmp	r3, #16
 8004d84:	d122      	bne.n	8004dcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	f003 0310 	and.w	r3, r3, #16
 8004d90:	2b10      	cmp	r3, #16
 8004d92:	d11b      	bne.n	8004dcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f06f 0210 	mvn.w	r2, #16
 8004d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2208      	movs	r2, #8
 8004da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7fb fa80 	bl	80002b8 <HAL_TIM_IC_CaptureCallback>
 8004db8:	e005      	b.n	8004dc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 fbc2 	bl	8005544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 fbc9 	bl	8005558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d10e      	bne.n	8004df8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d107      	bne.n	8004df8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f06f 0201 	mvn.w	r2, #1
 8004df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 fb9c 	bl	8005530 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e02:	2b80      	cmp	r3, #128	; 0x80
 8004e04:	d10e      	bne.n	8004e24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e10:	2b80      	cmp	r3, #128	; 0x80
 8004e12:	d107      	bne.n	8004e24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f001 fa40 	bl	80062a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e32:	d10e      	bne.n	8004e52 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e3e:	2b80      	cmp	r3, #128	; 0x80
 8004e40:	d107      	bne.n	8004e52 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f001 fa33 	bl	80062b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5c:	2b40      	cmp	r3, #64	; 0x40
 8004e5e:	d10e      	bne.n	8004e7e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6a:	2b40      	cmp	r3, #64	; 0x40
 8004e6c:	d107      	bne.n	8004e7e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 fb77 	bl	800556c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	f003 0320 	and.w	r3, r3, #32
 8004e88:	2b20      	cmp	r3, #32
 8004e8a:	d10e      	bne.n	8004eaa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f003 0320 	and.w	r3, r3, #32
 8004e96:	2b20      	cmp	r3, #32
 8004e98:	d107      	bne.n	8004eaa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f06f 0220 	mvn.w	r2, #32
 8004ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f001 f9f3 	bl	8006290 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004eb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eb8:	d10f      	bne.n	8004eda <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ec4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ec8:	d107      	bne.n	8004eda <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004ed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f001 f9f9 	bl	80062cc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ee4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ee8:	d10f      	bne.n	8004f0a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ef4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ef8:	d107      	bne.n	8004f0a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f001 f9eb 	bl	80062e0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f18:	d10f      	bne.n	8004f3a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f28:	d107      	bne.n	8004f3a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f001 f9dd 	bl	80062f4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f48:	d10f      	bne.n	8004f6a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f58:	d107      	bne.n	8004f6a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004f62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f001 f9cf 	bl	8006308 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f6a:	bf00      	nop
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b084      	sub	sp, #16
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	60f8      	str	r0, [r7, #12]
 8004f7a:	60b9      	str	r1, [r7, #8]
 8004f7c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d101      	bne.n	8004f8c <HAL_TIM_IC_ConfigChannel+0x1a>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	e082      	b.n	8005092 <HAL_TIM_IC_ConfigChannel+0x120>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d11b      	bne.n	8004fd2 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6818      	ldr	r0, [r3, #0]
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	6819      	ldr	r1, [r3, #0]
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	f000 fe6f 	bl	8005c8c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	699a      	ldr	r2, [r3, #24]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 020c 	bic.w	r2, r2, #12
 8004fbc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6999      	ldr	r1, [r3, #24]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	689a      	ldr	r2, [r3, #8]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	619a      	str	r2, [r3, #24]
 8004fd0:	e05a      	b.n	8005088 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2b04      	cmp	r3, #4
 8004fd6:	d11c      	bne.n	8005012 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6818      	ldr	r0, [r3, #0]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	6819      	ldr	r1, [r3, #0]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f000 fee7 	bl	8005dba <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	699a      	ldr	r2, [r3, #24]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004ffa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6999      	ldr	r1, [r3, #24]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	021a      	lsls	r2, r3, #8
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	619a      	str	r2, [r3, #24]
 8005010:	e03a      	b.n	8005088 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b08      	cmp	r3, #8
 8005016:	d11b      	bne.n	8005050 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6818      	ldr	r0, [r3, #0]
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	6819      	ldr	r1, [r3, #0]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	f000 ff34 	bl	8005e94 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	69da      	ldr	r2, [r3, #28]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 020c 	bic.w	r2, r2, #12
 800503a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	69d9      	ldr	r1, [r3, #28]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	689a      	ldr	r2, [r3, #8]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	61da      	str	r2, [r3, #28]
 800504e:	e01b      	b.n	8005088 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6818      	ldr	r0, [r3, #0]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	6819      	ldr	r1, [r3, #0]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f000 ff54 	bl	8005f0c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	69da      	ldr	r2, [r3, #28]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005072:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	69d9      	ldr	r1, [r3, #28]
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	021a      	lsls	r2, r3, #8
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
	...

0800509c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d101      	bne.n	80050b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80050b2:	2302      	movs	r3, #2
 80050b4:	e0fd      	b.n	80052b2 <HAL_TIM_PWM_ConfigChannel+0x216>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2b14      	cmp	r3, #20
 80050c2:	f200 80f0 	bhi.w	80052a6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80050c6:	a201      	add	r2, pc, #4	; (adr r2, 80050cc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80050c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050cc:	08005121 	.word	0x08005121
 80050d0:	080052a7 	.word	0x080052a7
 80050d4:	080052a7 	.word	0x080052a7
 80050d8:	080052a7 	.word	0x080052a7
 80050dc:	08005161 	.word	0x08005161
 80050e0:	080052a7 	.word	0x080052a7
 80050e4:	080052a7 	.word	0x080052a7
 80050e8:	080052a7 	.word	0x080052a7
 80050ec:	080051a3 	.word	0x080051a3
 80050f0:	080052a7 	.word	0x080052a7
 80050f4:	080052a7 	.word	0x080052a7
 80050f8:	080052a7 	.word	0x080052a7
 80050fc:	080051e3 	.word	0x080051e3
 8005100:	080052a7 	.word	0x080052a7
 8005104:	080052a7 	.word	0x080052a7
 8005108:	080052a7 	.word	0x080052a7
 800510c:	08005225 	.word	0x08005225
 8005110:	080052a7 	.word	0x080052a7
 8005114:	080052a7 	.word	0x080052a7
 8005118:	080052a7 	.word	0x080052a7
 800511c:	08005265 	.word	0x08005265
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68b9      	ldr	r1, [r7, #8]
 8005126:	4618      	mov	r0, r3
 8005128:	f000 faba 	bl	80056a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	699a      	ldr	r2, [r3, #24]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f042 0208 	orr.w	r2, r2, #8
 800513a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	699a      	ldr	r2, [r3, #24]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 0204 	bic.w	r2, r2, #4
 800514a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6999      	ldr	r1, [r3, #24]
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	691a      	ldr	r2, [r3, #16]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	430a      	orrs	r2, r1
 800515c:	619a      	str	r2, [r3, #24]
      break;
 800515e:	e0a3      	b.n	80052a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68b9      	ldr	r1, [r7, #8]
 8005166:	4618      	mov	r0, r3
 8005168:	f000 fb2a 	bl	80057c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	699a      	ldr	r2, [r3, #24]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800517a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	699a      	ldr	r2, [r3, #24]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800518a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6999      	ldr	r1, [r3, #24]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	021a      	lsls	r2, r3, #8
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	619a      	str	r2, [r3, #24]
      break;
 80051a0:	e082      	b.n	80052a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68b9      	ldr	r1, [r7, #8]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f000 fb93 	bl	80058d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	69da      	ldr	r2, [r3, #28]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f042 0208 	orr.w	r2, r2, #8
 80051bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	69da      	ldr	r2, [r3, #28]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 0204 	bic.w	r2, r2, #4
 80051cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	69d9      	ldr	r1, [r3, #28]
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	691a      	ldr	r2, [r3, #16]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	61da      	str	r2, [r3, #28]
      break;
 80051e0:	e062      	b.n	80052a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68b9      	ldr	r1, [r7, #8]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 fbfb 	bl	80059e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	69da      	ldr	r2, [r3, #28]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	69da      	ldr	r2, [r3, #28]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800520c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	69d9      	ldr	r1, [r3, #28]
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	021a      	lsls	r2, r3, #8
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	61da      	str	r2, [r3, #28]
      break;
 8005222:	e041      	b.n	80052a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68b9      	ldr	r1, [r7, #8]
 800522a:	4618      	mov	r0, r3
 800522c:	f000 fc64 	bl	8005af8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f042 0208 	orr.w	r2, r2, #8
 800523e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f022 0204 	bic.w	r2, r2, #4
 800524e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	691a      	ldr	r2, [r3, #16]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005262:	e021      	b.n	80052a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68b9      	ldr	r1, [r7, #8]
 800526a:	4618      	mov	r0, r3
 800526c:	f000 fca8 	bl	8005bc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800527e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800528e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	021a      	lsls	r2, r3, #8
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80052a4:	e000      	b.n	80052a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80052a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop

080052bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d101      	bne.n	80052d4 <HAL_TIM_ConfigClockSource+0x18>
 80052d0:	2302      	movs	r3, #2
 80052d2:	e0dd      	b.n	8005490 <HAL_TIM_ConfigClockSource+0x1d4>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2202      	movs	r2, #2
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80052f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a62      	ldr	r2, [pc, #392]	; (8005498 <HAL_TIM_ConfigClockSource+0x1dc>)
 800530e:	4293      	cmp	r3, r2
 8005310:	f000 80a9 	beq.w	8005466 <HAL_TIM_ConfigClockSource+0x1aa>
 8005314:	4a60      	ldr	r2, [pc, #384]	; (8005498 <HAL_TIM_ConfigClockSource+0x1dc>)
 8005316:	4293      	cmp	r3, r2
 8005318:	f200 80ae 	bhi.w	8005478 <HAL_TIM_ConfigClockSource+0x1bc>
 800531c:	4a5f      	ldr	r2, [pc, #380]	; (800549c <HAL_TIM_ConfigClockSource+0x1e0>)
 800531e:	4293      	cmp	r3, r2
 8005320:	f000 80a1 	beq.w	8005466 <HAL_TIM_ConfigClockSource+0x1aa>
 8005324:	4a5d      	ldr	r2, [pc, #372]	; (800549c <HAL_TIM_ConfigClockSource+0x1e0>)
 8005326:	4293      	cmp	r3, r2
 8005328:	f200 80a6 	bhi.w	8005478 <HAL_TIM_ConfigClockSource+0x1bc>
 800532c:	4a5c      	ldr	r2, [pc, #368]	; (80054a0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800532e:	4293      	cmp	r3, r2
 8005330:	f000 8099 	beq.w	8005466 <HAL_TIM_ConfigClockSource+0x1aa>
 8005334:	4a5a      	ldr	r2, [pc, #360]	; (80054a0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005336:	4293      	cmp	r3, r2
 8005338:	f200 809e 	bhi.w	8005478 <HAL_TIM_ConfigClockSource+0x1bc>
 800533c:	4a59      	ldr	r2, [pc, #356]	; (80054a4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800533e:	4293      	cmp	r3, r2
 8005340:	f000 8091 	beq.w	8005466 <HAL_TIM_ConfigClockSource+0x1aa>
 8005344:	4a57      	ldr	r2, [pc, #348]	; (80054a4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005346:	4293      	cmp	r3, r2
 8005348:	f200 8096 	bhi.w	8005478 <HAL_TIM_ConfigClockSource+0x1bc>
 800534c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005350:	f000 8089 	beq.w	8005466 <HAL_TIM_ConfigClockSource+0x1aa>
 8005354:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005358:	f200 808e 	bhi.w	8005478 <HAL_TIM_ConfigClockSource+0x1bc>
 800535c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005360:	d03e      	beq.n	80053e0 <HAL_TIM_ConfigClockSource+0x124>
 8005362:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005366:	f200 8087 	bhi.w	8005478 <HAL_TIM_ConfigClockSource+0x1bc>
 800536a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800536e:	f000 8085 	beq.w	800547c <HAL_TIM_ConfigClockSource+0x1c0>
 8005372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005376:	d87f      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x1bc>
 8005378:	2b70      	cmp	r3, #112	; 0x70
 800537a:	d01a      	beq.n	80053b2 <HAL_TIM_ConfigClockSource+0xf6>
 800537c:	2b70      	cmp	r3, #112	; 0x70
 800537e:	d87b      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x1bc>
 8005380:	2b60      	cmp	r3, #96	; 0x60
 8005382:	d050      	beq.n	8005426 <HAL_TIM_ConfigClockSource+0x16a>
 8005384:	2b60      	cmp	r3, #96	; 0x60
 8005386:	d877      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x1bc>
 8005388:	2b50      	cmp	r3, #80	; 0x50
 800538a:	d03c      	beq.n	8005406 <HAL_TIM_ConfigClockSource+0x14a>
 800538c:	2b50      	cmp	r3, #80	; 0x50
 800538e:	d873      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x1bc>
 8005390:	2b40      	cmp	r3, #64	; 0x40
 8005392:	d058      	beq.n	8005446 <HAL_TIM_ConfigClockSource+0x18a>
 8005394:	2b40      	cmp	r3, #64	; 0x40
 8005396:	d86f      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x1bc>
 8005398:	2b30      	cmp	r3, #48	; 0x30
 800539a:	d064      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0x1aa>
 800539c:	2b30      	cmp	r3, #48	; 0x30
 800539e:	d86b      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x1bc>
 80053a0:	2b20      	cmp	r3, #32
 80053a2:	d060      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0x1aa>
 80053a4:	2b20      	cmp	r3, #32
 80053a6:	d867      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x1bc>
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d05c      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0x1aa>
 80053ac:	2b10      	cmp	r3, #16
 80053ae:	d05a      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0x1aa>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80053b0:	e062      	b.n	8005478 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6818      	ldr	r0, [r3, #0]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	6899      	ldr	r1, [r3, #8]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f000 fdfd 	bl	8005fc0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	609a      	str	r2, [r3, #8]
      break;
 80053de:	e04e      	b.n	800547e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_ETR_SetConfig(htim->Instance,
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6818      	ldr	r0, [r3, #0]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	6899      	ldr	r1, [r3, #8]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f000 fde6 	bl	8005fc0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689a      	ldr	r2, [r3, #8]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005402:	609a      	str	r2, [r3, #8]
      break;
 8005404:	e03b      	b.n	800547e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6818      	ldr	r0, [r3, #0]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	6859      	ldr	r1, [r3, #4]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	461a      	mov	r2, r3
 8005414:	f000 fca2 	bl	8005d5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2150      	movs	r1, #80	; 0x50
 800541e:	4618      	mov	r0, r3
 8005420:	f000 fdb1 	bl	8005f86 <TIM_ITRx_SetConfig>
      break;
 8005424:	e02b      	b.n	800547e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6818      	ldr	r0, [r3, #0]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	6859      	ldr	r1, [r3, #4]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	461a      	mov	r2, r3
 8005434:	f000 fcfe 	bl	8005e34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2160      	movs	r1, #96	; 0x60
 800543e:	4618      	mov	r0, r3
 8005440:	f000 fda1 	bl	8005f86 <TIM_ITRx_SetConfig>
      break;
 8005444:	e01b      	b.n	800547e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6818      	ldr	r0, [r3, #0]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	6859      	ldr	r1, [r3, #4]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	461a      	mov	r2, r3
 8005454:	f000 fc82 	bl	8005d5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2140      	movs	r1, #64	; 0x40
 800545e:	4618      	mov	r0, r3
 8005460:	f000 fd91 	bl	8005f86 <TIM_ITRx_SetConfig>
      break;
 8005464:	e00b      	b.n	800547e <HAL_TIM_ConfigClockSource+0x1c2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4619      	mov	r1, r3
 8005470:	4610      	mov	r0, r2
 8005472:	f000 fd88 	bl	8005f86 <TIM_ITRx_SetConfig>
        break;
 8005476:	e002      	b.n	800547e <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 8005478:	bf00      	nop
 800547a:	e000      	b.n	800547e <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 800547c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	00100070 	.word	0x00100070
 800549c:	00100040 	.word	0x00100040
 80054a0:	00100030 	.word	0x00100030
 80054a4:	00100020 	.word	0x00100020

080054a8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80054b2:	2300      	movs	r3, #0
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	2b0c      	cmp	r3, #12
 80054ba:	d831      	bhi.n	8005520 <HAL_TIM_ReadCapturedValue+0x78>
 80054bc:	a201      	add	r2, pc, #4	; (adr r2, 80054c4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80054be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c2:	bf00      	nop
 80054c4:	080054f9 	.word	0x080054f9
 80054c8:	08005521 	.word	0x08005521
 80054cc:	08005521 	.word	0x08005521
 80054d0:	08005521 	.word	0x08005521
 80054d4:	08005503 	.word	0x08005503
 80054d8:	08005521 	.word	0x08005521
 80054dc:	08005521 	.word	0x08005521
 80054e0:	08005521 	.word	0x08005521
 80054e4:	0800550d 	.word	0x0800550d
 80054e8:	08005521 	.word	0x08005521
 80054ec:	08005521 	.word	0x08005521
 80054f0:	08005521 	.word	0x08005521
 80054f4:	08005517 	.word	0x08005517
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054fe:	60fb      	str	r3, [r7, #12]

      break;
 8005500:	e00f      	b.n	8005522 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005508:	60fb      	str	r3, [r7, #12]

      break;
 800550a:	e00a      	b.n	8005522 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005512:	60fb      	str	r3, [r7, #12]

      break;
 8005514:	e005      	b.n	8005522 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551c:	60fb      	str	r3, [r7, #12]

      break;
 800551e:	e000      	b.n	8005522 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005520:	bf00      	nop
  }

  return tmpreg;
 8005522:	68fb      	ldr	r3, [r7, #12]
}
 8005524:	4618      	mov	r0, r3
 8005526:	3714      	adds	r7, #20
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a3c      	ldr	r2, [pc, #240]	; (8005684 <TIM_Base_SetConfig+0x104>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d00f      	beq.n	80055b8 <TIM_Base_SetConfig+0x38>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800559e:	d00b      	beq.n	80055b8 <TIM_Base_SetConfig+0x38>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a39      	ldr	r2, [pc, #228]	; (8005688 <TIM_Base_SetConfig+0x108>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d007      	beq.n	80055b8 <TIM_Base_SetConfig+0x38>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a38      	ldr	r2, [pc, #224]	; (800568c <TIM_Base_SetConfig+0x10c>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d003      	beq.n	80055b8 <TIM_Base_SetConfig+0x38>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a37      	ldr	r2, [pc, #220]	; (8005690 <TIM_Base_SetConfig+0x110>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d108      	bne.n	80055ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a2d      	ldr	r2, [pc, #180]	; (8005684 <TIM_Base_SetConfig+0x104>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d01b      	beq.n	800560a <TIM_Base_SetConfig+0x8a>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d8:	d017      	beq.n	800560a <TIM_Base_SetConfig+0x8a>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a2a      	ldr	r2, [pc, #168]	; (8005688 <TIM_Base_SetConfig+0x108>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d013      	beq.n	800560a <TIM_Base_SetConfig+0x8a>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a29      	ldr	r2, [pc, #164]	; (800568c <TIM_Base_SetConfig+0x10c>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d00f      	beq.n	800560a <TIM_Base_SetConfig+0x8a>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a28      	ldr	r2, [pc, #160]	; (8005690 <TIM_Base_SetConfig+0x110>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d00b      	beq.n	800560a <TIM_Base_SetConfig+0x8a>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a27      	ldr	r2, [pc, #156]	; (8005694 <TIM_Base_SetConfig+0x114>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d007      	beq.n	800560a <TIM_Base_SetConfig+0x8a>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a26      	ldr	r2, [pc, #152]	; (8005698 <TIM_Base_SetConfig+0x118>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d003      	beq.n	800560a <TIM_Base_SetConfig+0x8a>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a25      	ldr	r2, [pc, #148]	; (800569c <TIM_Base_SetConfig+0x11c>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d108      	bne.n	800561c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	4313      	orrs	r3, r2
 800561a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	4313      	orrs	r3, r2
 8005628:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	689a      	ldr	r2, [r3, #8]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a10      	ldr	r2, [pc, #64]	; (8005684 <TIM_Base_SetConfig+0x104>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d00f      	beq.n	8005668 <TIM_Base_SetConfig+0xe8>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a11      	ldr	r2, [pc, #68]	; (8005690 <TIM_Base_SetConfig+0x110>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d00b      	beq.n	8005668 <TIM_Base_SetConfig+0xe8>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a10      	ldr	r2, [pc, #64]	; (8005694 <TIM_Base_SetConfig+0x114>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d007      	beq.n	8005668 <TIM_Base_SetConfig+0xe8>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a0f      	ldr	r2, [pc, #60]	; (8005698 <TIM_Base_SetConfig+0x118>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d003      	beq.n	8005668 <TIM_Base_SetConfig+0xe8>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a0e      	ldr	r2, [pc, #56]	; (800569c <TIM_Base_SetConfig+0x11c>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d103      	bne.n	8005670 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	691a      	ldr	r2, [r3, #16]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	615a      	str	r2, [r3, #20]
}
 8005676:	bf00      	nop
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	40012c00 	.word	0x40012c00
 8005688:	40000400 	.word	0x40000400
 800568c:	40000800 	.word	0x40000800
 8005690:	40013400 	.word	0x40013400
 8005694:	40014000 	.word	0x40014000
 8005698:	40014400 	.word	0x40014400
 800569c:	40014800 	.word	0x40014800

080056a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	f023 0201 	bic.w	r2, r3, #1
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 0303 	bic.w	r3, r3, #3
 80056da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f023 0302 	bic.w	r3, r3, #2
 80056ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a2c      	ldr	r2, [pc, #176]	; (80057ac <TIM_OC1_SetConfig+0x10c>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d00f      	beq.n	8005720 <TIM_OC1_SetConfig+0x80>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a2b      	ldr	r2, [pc, #172]	; (80057b0 <TIM_OC1_SetConfig+0x110>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d00b      	beq.n	8005720 <TIM_OC1_SetConfig+0x80>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a2a      	ldr	r2, [pc, #168]	; (80057b4 <TIM_OC1_SetConfig+0x114>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d007      	beq.n	8005720 <TIM_OC1_SetConfig+0x80>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a29      	ldr	r2, [pc, #164]	; (80057b8 <TIM_OC1_SetConfig+0x118>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d003      	beq.n	8005720 <TIM_OC1_SetConfig+0x80>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a28      	ldr	r2, [pc, #160]	; (80057bc <TIM_OC1_SetConfig+0x11c>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d10c      	bne.n	800573a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f023 0308 	bic.w	r3, r3, #8
 8005726:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	4313      	orrs	r3, r2
 8005730:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	f023 0304 	bic.w	r3, r3, #4
 8005738:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a1b      	ldr	r2, [pc, #108]	; (80057ac <TIM_OC1_SetConfig+0x10c>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d00f      	beq.n	8005762 <TIM_OC1_SetConfig+0xc2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a1a      	ldr	r2, [pc, #104]	; (80057b0 <TIM_OC1_SetConfig+0x110>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d00b      	beq.n	8005762 <TIM_OC1_SetConfig+0xc2>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a19      	ldr	r2, [pc, #100]	; (80057b4 <TIM_OC1_SetConfig+0x114>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d007      	beq.n	8005762 <TIM_OC1_SetConfig+0xc2>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a18      	ldr	r2, [pc, #96]	; (80057b8 <TIM_OC1_SetConfig+0x118>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d003      	beq.n	8005762 <TIM_OC1_SetConfig+0xc2>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a17      	ldr	r2, [pc, #92]	; (80057bc <TIM_OC1_SetConfig+0x11c>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d111      	bne.n	8005786 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005768:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005770:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	4313      	orrs	r3, r2
 800577a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	4313      	orrs	r3, r2
 8005784:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	621a      	str	r2, [r3, #32]
}
 80057a0:	bf00      	nop
 80057a2:	371c      	adds	r7, #28
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	40012c00 	.word	0x40012c00
 80057b0:	40013400 	.word	0x40013400
 80057b4:	40014000 	.word	0x40014000
 80057b8:	40014400 	.word	0x40014400
 80057bc:	40014800 	.word	0x40014800

080057c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	f023 0210 	bic.w	r2, r3, #16
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	021b      	lsls	r3, r3, #8
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	4313      	orrs	r3, r2
 8005806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	f023 0320 	bic.w	r3, r3, #32
 800580e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	011b      	lsls	r3, r3, #4
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	4313      	orrs	r3, r2
 800581a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a28      	ldr	r2, [pc, #160]	; (80058c0 <TIM_OC2_SetConfig+0x100>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d003      	beq.n	800582c <TIM_OC2_SetConfig+0x6c>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a27      	ldr	r2, [pc, #156]	; (80058c4 <TIM_OC2_SetConfig+0x104>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d10d      	bne.n	8005848 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005832:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	011b      	lsls	r3, r3, #4
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	4313      	orrs	r3, r2
 800583e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005846:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a1d      	ldr	r2, [pc, #116]	; (80058c0 <TIM_OC2_SetConfig+0x100>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d00f      	beq.n	8005870 <TIM_OC2_SetConfig+0xb0>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a1c      	ldr	r2, [pc, #112]	; (80058c4 <TIM_OC2_SetConfig+0x104>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d00b      	beq.n	8005870 <TIM_OC2_SetConfig+0xb0>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a1b      	ldr	r2, [pc, #108]	; (80058c8 <TIM_OC2_SetConfig+0x108>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d007      	beq.n	8005870 <TIM_OC2_SetConfig+0xb0>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a1a      	ldr	r2, [pc, #104]	; (80058cc <TIM_OC2_SetConfig+0x10c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d003      	beq.n	8005870 <TIM_OC2_SetConfig+0xb0>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a19      	ldr	r2, [pc, #100]	; (80058d0 <TIM_OC2_SetConfig+0x110>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d113      	bne.n	8005898 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005876:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800587e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	4313      	orrs	r3, r2
 800588a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	4313      	orrs	r3, r2
 8005896:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	621a      	str	r2, [r3, #32]
}
 80058b2:	bf00      	nop
 80058b4:	371c      	adds	r7, #28
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	40012c00 	.word	0x40012c00
 80058c4:	40013400 	.word	0x40013400
 80058c8:	40014000 	.word	0x40014000
 80058cc:	40014400 	.word	0x40014400
 80058d0:	40014800 	.word	0x40014800

080058d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f023 0303 	bic.w	r3, r3, #3
 800590e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	4313      	orrs	r3, r2
 8005918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	021b      	lsls	r3, r3, #8
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	4313      	orrs	r3, r2
 800592c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a27      	ldr	r2, [pc, #156]	; (80059d0 <TIM_OC3_SetConfig+0xfc>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d003      	beq.n	800593e <TIM_OC3_SetConfig+0x6a>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a26      	ldr	r2, [pc, #152]	; (80059d4 <TIM_OC3_SetConfig+0x100>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d10d      	bne.n	800595a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005944:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	021b      	lsls	r3, r3, #8
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	4313      	orrs	r3, r2
 8005950:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005958:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a1c      	ldr	r2, [pc, #112]	; (80059d0 <TIM_OC3_SetConfig+0xfc>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d00f      	beq.n	8005982 <TIM_OC3_SetConfig+0xae>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a1b      	ldr	r2, [pc, #108]	; (80059d4 <TIM_OC3_SetConfig+0x100>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d00b      	beq.n	8005982 <TIM_OC3_SetConfig+0xae>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a1a      	ldr	r2, [pc, #104]	; (80059d8 <TIM_OC3_SetConfig+0x104>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d007      	beq.n	8005982 <TIM_OC3_SetConfig+0xae>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a19      	ldr	r2, [pc, #100]	; (80059dc <TIM_OC3_SetConfig+0x108>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d003      	beq.n	8005982 <TIM_OC3_SetConfig+0xae>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a18      	ldr	r2, [pc, #96]	; (80059e0 <TIM_OC3_SetConfig+0x10c>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d113      	bne.n	80059aa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	011b      	lsls	r3, r3, #4
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	4313      	orrs	r3, r2
 800599c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	011b      	lsls	r3, r3, #4
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	621a      	str	r2, [r3, #32]
}
 80059c4:	bf00      	nop
 80059c6:	371c      	adds	r7, #28
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	40012c00 	.word	0x40012c00
 80059d4:	40013400 	.word	0x40013400
 80059d8:	40014000 	.word	0x40014000
 80059dc:	40014400 	.word	0x40014400
 80059e0:	40014800 	.word	0x40014800

080059e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b087      	sub	sp, #28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	021b      	lsls	r3, r3, #8
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	031b      	lsls	r3, r3, #12
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a28      	ldr	r2, [pc, #160]	; (8005ae4 <TIM_OC4_SetConfig+0x100>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d003      	beq.n	8005a50 <TIM_OC4_SetConfig+0x6c>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a27      	ldr	r2, [pc, #156]	; (8005ae8 <TIM_OC4_SetConfig+0x104>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d10d      	bne.n	8005a6c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	031b      	lsls	r3, r3, #12
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a1d      	ldr	r2, [pc, #116]	; (8005ae4 <TIM_OC4_SetConfig+0x100>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d00f      	beq.n	8005a94 <TIM_OC4_SetConfig+0xb0>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a1c      	ldr	r2, [pc, #112]	; (8005ae8 <TIM_OC4_SetConfig+0x104>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d00b      	beq.n	8005a94 <TIM_OC4_SetConfig+0xb0>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a1b      	ldr	r2, [pc, #108]	; (8005aec <TIM_OC4_SetConfig+0x108>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d007      	beq.n	8005a94 <TIM_OC4_SetConfig+0xb0>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a1a      	ldr	r2, [pc, #104]	; (8005af0 <TIM_OC4_SetConfig+0x10c>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d003      	beq.n	8005a94 <TIM_OC4_SetConfig+0xb0>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a19      	ldr	r2, [pc, #100]	; (8005af4 <TIM_OC4_SetConfig+0x110>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d113      	bne.n	8005abc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a9a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005aa2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	019b      	lsls	r3, r3, #6
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	019b      	lsls	r3, r3, #6
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	621a      	str	r2, [r3, #32]
}
 8005ad6:	bf00      	nop
 8005ad8:	371c      	adds	r7, #28
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	40012c00 	.word	0x40012c00
 8005ae8:	40013400 	.word	0x40013400
 8005aec:	40014000 	.word	0x40014000
 8005af0:	40014400 	.word	0x40014400
 8005af4:	40014800 	.word	0x40014800

08005af8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b087      	sub	sp, #28
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005b3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	041b      	lsls	r3, r3, #16
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a17      	ldr	r2, [pc, #92]	; (8005bac <TIM_OC5_SetConfig+0xb4>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d00f      	beq.n	8005b72 <TIM_OC5_SetConfig+0x7a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a16      	ldr	r2, [pc, #88]	; (8005bb0 <TIM_OC5_SetConfig+0xb8>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d00b      	beq.n	8005b72 <TIM_OC5_SetConfig+0x7a>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a15      	ldr	r2, [pc, #84]	; (8005bb4 <TIM_OC5_SetConfig+0xbc>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d007      	beq.n	8005b72 <TIM_OC5_SetConfig+0x7a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a14      	ldr	r2, [pc, #80]	; (8005bb8 <TIM_OC5_SetConfig+0xc0>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d003      	beq.n	8005b72 <TIM_OC5_SetConfig+0x7a>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a13      	ldr	r2, [pc, #76]	; (8005bbc <TIM_OC5_SetConfig+0xc4>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d109      	bne.n	8005b86 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	021b      	lsls	r3, r3, #8
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	621a      	str	r2, [r3, #32]
}
 8005ba0:	bf00      	nop
 8005ba2:	371c      	adds	r7, #28
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr
 8005bac:	40012c00 	.word	0x40012c00
 8005bb0:	40013400 	.word	0x40013400
 8005bb4:	40014000 	.word	0x40014000
 8005bb8:	40014400 	.word	0x40014400
 8005bbc:	40014800 	.word	0x40014800

08005bc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b087      	sub	sp, #28
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	021b      	lsls	r3, r3, #8
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	051b      	lsls	r3, r3, #20
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a18      	ldr	r2, [pc, #96]	; (8005c78 <TIM_OC6_SetConfig+0xb8>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d00f      	beq.n	8005c3c <TIM_OC6_SetConfig+0x7c>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a17      	ldr	r2, [pc, #92]	; (8005c7c <TIM_OC6_SetConfig+0xbc>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d00b      	beq.n	8005c3c <TIM_OC6_SetConfig+0x7c>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a16      	ldr	r2, [pc, #88]	; (8005c80 <TIM_OC6_SetConfig+0xc0>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d007      	beq.n	8005c3c <TIM_OC6_SetConfig+0x7c>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a15      	ldr	r2, [pc, #84]	; (8005c84 <TIM_OC6_SetConfig+0xc4>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d003      	beq.n	8005c3c <TIM_OC6_SetConfig+0x7c>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a14      	ldr	r2, [pc, #80]	; (8005c88 <TIM_OC6_SetConfig+0xc8>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d109      	bne.n	8005c50 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	029b      	lsls	r3, r3, #10
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	621a      	str	r2, [r3, #32]
}
 8005c6a:	bf00      	nop
 8005c6c:	371c      	adds	r7, #28
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	40012c00 	.word	0x40012c00
 8005c7c:	40013400 	.word	0x40013400
 8005c80:	40014000 	.word	0x40014000
 8005c84:	40014400 	.word	0x40014400
 8005c88:	40014800 	.word	0x40014800

08005c8c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
 8005c98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	f023 0201 	bic.w	r2, r3, #1
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	4a24      	ldr	r2, [pc, #144]	; (8005d48 <TIM_TI1_SetConfig+0xbc>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d013      	beq.n	8005ce2 <TIM_TI1_SetConfig+0x56>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc0:	d00f      	beq.n	8005ce2 <TIM_TI1_SetConfig+0x56>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	4a21      	ldr	r2, [pc, #132]	; (8005d4c <TIM_TI1_SetConfig+0xc0>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d00b      	beq.n	8005ce2 <TIM_TI1_SetConfig+0x56>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	4a20      	ldr	r2, [pc, #128]	; (8005d50 <TIM_TI1_SetConfig+0xc4>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d007      	beq.n	8005ce2 <TIM_TI1_SetConfig+0x56>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	4a1f      	ldr	r2, [pc, #124]	; (8005d54 <TIM_TI1_SetConfig+0xc8>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d003      	beq.n	8005ce2 <TIM_TI1_SetConfig+0x56>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4a1e      	ldr	r2, [pc, #120]	; (8005d58 <TIM_TI1_SetConfig+0xcc>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d101      	bne.n	8005ce6 <TIM_TI1_SetConfig+0x5a>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e000      	b.n	8005ce8 <TIM_TI1_SetConfig+0x5c>
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d008      	beq.n	8005cfe <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	f023 0303 	bic.w	r3, r3, #3
 8005cf2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	617b      	str	r3, [r7, #20]
 8005cfc:	e003      	b.n	8005d06 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f043 0301 	orr.w	r3, r3, #1
 8005d04:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	011b      	lsls	r3, r3, #4
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	f023 030a 	bic.w	r3, r3, #10
 8005d20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	f003 030a 	and.w	r3, r3, #10
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	621a      	str	r2, [r3, #32]
}
 8005d3a:	bf00      	nop
 8005d3c:	371c      	adds	r7, #28
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	40012c00 	.word	0x40012c00
 8005d4c:	40000400 	.word	0x40000400
 8005d50:	40000800 	.word	0x40000800
 8005d54:	40013400 	.word	0x40013400
 8005d58:	40014000 	.word	0x40014000

08005d5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b087      	sub	sp, #28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	f023 0201 	bic.w	r2, r3, #1
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	011b      	lsls	r3, r3, #4
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	f023 030a 	bic.w	r3, r3, #10
 8005d98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	621a      	str	r2, [r3, #32]
}
 8005dae:	bf00      	nop
 8005db0:	371c      	adds	r7, #28
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b087      	sub	sp, #28
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	60f8      	str	r0, [r7, #12]
 8005dc2:	60b9      	str	r1, [r7, #8]
 8005dc4:	607a      	str	r2, [r7, #4]
 8005dc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6a1b      	ldr	r3, [r3, #32]
 8005dcc:	f023 0210 	bic.w	r2, r3, #16
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	699b      	ldr	r3, [r3, #24]
 8005dd8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005de6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	021b      	lsls	r3, r3, #8
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005df8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	031b      	lsls	r3, r3, #12
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e0c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	011b      	lsls	r3, r3, #4
 8005e12:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	621a      	str	r2, [r3, #32]
}
 8005e28:	bf00      	nop
 8005e2a:	371c      	adds	r7, #28
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b087      	sub	sp, #28
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6a1b      	ldr	r3, [r3, #32]
 8005e44:	f023 0210 	bic.w	r2, r3, #16
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	031b      	lsls	r3, r3, #12
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	011b      	lsls	r3, r3, #4
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	621a      	str	r2, [r3, #32]
}
 8005e88:	bf00      	nop
 8005e8a:	371c      	adds	r7, #28
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
 8005ea0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	69db      	ldr	r3, [r3, #28]
 8005eb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6a1b      	ldr	r3, [r3, #32]
 8005eb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f023 0303 	bic.w	r3, r3, #3
 8005ec0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ed0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	011b      	lsls	r3, r3, #4
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005ee4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	021b      	lsls	r3, r3, #8
 8005eea:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	621a      	str	r2, [r3, #32]
}
 8005f00:	bf00      	nop
 8005f02:	371c      	adds	r7, #28
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b087      	sub	sp, #28
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
 8005f18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
 8005f1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	69db      	ldr	r3, [r3, #28]
 8005f2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
 8005f30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f38:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	021b      	lsls	r3, r3, #8
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f4a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	031b      	lsls	r3, r3, #12
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005f5e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	031b      	lsls	r3, r3, #12
 8005f64:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	621a      	str	r2, [r3, #32]
}
 8005f7a:	bf00      	nop
 8005f7c:	371c      	adds	r7, #28
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b085      	sub	sp, #20
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
 8005f8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	f043 0307 	orr.w	r3, r3, #7
 8005fac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	609a      	str	r2, [r3, #8]
}
 8005fb4:	bf00      	nop
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
 8005fcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	021a      	lsls	r2, r3, #8
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	609a      	str	r2, [r3, #8]
}
 8005ff4:	bf00      	nop
 8005ff6:	371c      	adds	r7, #28
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006000:	b480      	push	{r7}
 8006002:	b087      	sub	sp, #28
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	f003 031f 	and.w	r3, r3, #31
 8006012:	2201      	movs	r2, #1
 8006014:	fa02 f303 	lsl.w	r3, r2, r3
 8006018:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6a1a      	ldr	r2, [r3, #32]
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	43db      	mvns	r3, r3
 8006022:	401a      	ands	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6a1a      	ldr	r2, [r3, #32]
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	f003 031f 	and.w	r3, r3, #31
 8006032:	6879      	ldr	r1, [r7, #4]
 8006034:	fa01 f303 	lsl.w	r3, r1, r3
 8006038:	431a      	orrs	r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	621a      	str	r2, [r3, #32]
}
 800603e:	bf00      	nop
 8006040:	371c      	adds	r7, #28
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
	...

0800604c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800605c:	2b01      	cmp	r3, #1
 800605e:	d101      	bne.n	8006064 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006060:	2302      	movs	r3, #2
 8006062:	e065      	b.n	8006130 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a2c      	ldr	r2, [pc, #176]	; (800613c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d004      	beq.n	8006098 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a2b      	ldr	r2, [pc, #172]	; (8006140 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d108      	bne.n	80060aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800609e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80060b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	4313      	orrs	r3, r2
 80060be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a1b      	ldr	r2, [pc, #108]	; (800613c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d018      	beq.n	8006104 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060da:	d013      	beq.n	8006104 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a18      	ldr	r2, [pc, #96]	; (8006144 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d00e      	beq.n	8006104 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a17      	ldr	r2, [pc, #92]	; (8006148 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d009      	beq.n	8006104 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a12      	ldr	r2, [pc, #72]	; (8006140 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d004      	beq.n	8006104 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a13      	ldr	r2, [pc, #76]	; (800614c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d10c      	bne.n	800611e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800610a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	4313      	orrs	r3, r2
 8006114:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2201      	movs	r2, #1
 8006122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3714      	adds	r7, #20
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr
 800613c:	40012c00 	.word	0x40012c00
 8006140:	40013400 	.word	0x40013400
 8006144:	40000400 	.word	0x40000400
 8006148:	40000800 	.word	0x40000800
 800614c:	40014000 	.word	0x40014000

08006150 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006164:	2b01      	cmp	r3, #1
 8006166:	d101      	bne.n	800616c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006168:	2302      	movs	r3, #2
 800616a:	e087      	b.n	800627c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	4313      	orrs	r3, r2
 8006180:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	4313      	orrs	r3, r2
 800618e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	4313      	orrs	r3, r2
 800619c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d2:	4313      	orrs	r3, r2
 80061d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	041b      	lsls	r3, r3, #16
 80061e2:	4313      	orrs	r3, r2
 80061e4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a27      	ldr	r2, [pc, #156]	; (8006288 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d004      	beq.n	80061fa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a25      	ldr	r2, [pc, #148]	; (800628c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d106      	bne.n	8006208 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	69db      	ldr	r3, [r3, #28]
 8006204:	4313      	orrs	r3, r2
 8006206:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a1e      	ldr	r2, [pc, #120]	; (8006288 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d004      	beq.n	800621c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a1d      	ldr	r2, [pc, #116]	; (800628c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d126      	bne.n	800626a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006226:	051b      	lsls	r3, r3, #20
 8006228:	4313      	orrs	r3, r2
 800622a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	4313      	orrs	r3, r2
 8006238:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006244:	4313      	orrs	r3, r2
 8006246:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a0e      	ldr	r2, [pc, #56]	; (8006288 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d004      	beq.n	800625c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a0d      	ldr	r2, [pc, #52]	; (800628c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d106      	bne.n	800626a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006266:	4313      	orrs	r3, r2
 8006268:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3714      	adds	r7, #20
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr
 8006288:	40012c00 	.word	0x40012c00
 800628c:	40013400 	.word	0x40013400

08006290 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <__libc_init_array>:
 800631c:	b570      	push	{r4, r5, r6, lr}
 800631e:	4d0d      	ldr	r5, [pc, #52]	; (8006354 <__libc_init_array+0x38>)
 8006320:	4c0d      	ldr	r4, [pc, #52]	; (8006358 <__libc_init_array+0x3c>)
 8006322:	1b64      	subs	r4, r4, r5
 8006324:	10a4      	asrs	r4, r4, #2
 8006326:	2600      	movs	r6, #0
 8006328:	42a6      	cmp	r6, r4
 800632a:	d109      	bne.n	8006340 <__libc_init_array+0x24>
 800632c:	4d0b      	ldr	r5, [pc, #44]	; (800635c <__libc_init_array+0x40>)
 800632e:	4c0c      	ldr	r4, [pc, #48]	; (8006360 <__libc_init_array+0x44>)
 8006330:	f000 f820 	bl	8006374 <_init>
 8006334:	1b64      	subs	r4, r4, r5
 8006336:	10a4      	asrs	r4, r4, #2
 8006338:	2600      	movs	r6, #0
 800633a:	42a6      	cmp	r6, r4
 800633c:	d105      	bne.n	800634a <__libc_init_array+0x2e>
 800633e:	bd70      	pop	{r4, r5, r6, pc}
 8006340:	f855 3b04 	ldr.w	r3, [r5], #4
 8006344:	4798      	blx	r3
 8006346:	3601      	adds	r6, #1
 8006348:	e7ee      	b.n	8006328 <__libc_init_array+0xc>
 800634a:	f855 3b04 	ldr.w	r3, [r5], #4
 800634e:	4798      	blx	r3
 8006350:	3601      	adds	r6, #1
 8006352:	e7f2      	b.n	800633a <__libc_init_array+0x1e>
 8006354:	0800639c 	.word	0x0800639c
 8006358:	0800639c 	.word	0x0800639c
 800635c:	0800639c 	.word	0x0800639c
 8006360:	080063a0 	.word	0x080063a0

08006364 <memset>:
 8006364:	4402      	add	r2, r0
 8006366:	4603      	mov	r3, r0
 8006368:	4293      	cmp	r3, r2
 800636a:	d100      	bne.n	800636e <memset+0xa>
 800636c:	4770      	bx	lr
 800636e:	f803 1b01 	strb.w	r1, [r3], #1
 8006372:	e7f9      	b.n	8006368 <memset+0x4>

08006374 <_init>:
 8006374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006376:	bf00      	nop
 8006378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800637a:	bc08      	pop	{r3}
 800637c:	469e      	mov	lr, r3
 800637e:	4770      	bx	lr

08006380 <_fini>:
 8006380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006382:	bf00      	nop
 8006384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006386:	bc08      	pop	{r3}
 8006388:	469e      	mov	lr, r3
 800638a:	4770      	bx	lr
