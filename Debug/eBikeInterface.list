
eBikeInterface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069bc  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08006b94  08006b94  00016b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ba4  08006ba4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006ba4  08006ba4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ba4  08006ba4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ba4  08006ba4  00016ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ba8  08006ba8  00016ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  20000010  08006bbc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08006bbc  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015397  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000270c  00000000  00000000  000353d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001388  00000000  00000000  00037ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001270  00000000  00000000  00038e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fa99  00000000  00000000  0003a0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013335  00000000  00000000  00059b79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7e0a  00000000  00000000  0006ceae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00144cb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005418  00000000  00000000  00144d0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006b7c 	.word	0x08006b7c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08006b7c 	.word	0x08006b7c

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f001 f829 	bl	8001272 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f84c 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 fbaa 	bl	800097c <MX_GPIO_Init>
  MX_ADC2_Init();
 8000228:	f000 f8a0 	bl	800036c <MX_ADC2_Init>
  MX_DAC1_Init();
 800022c:	f000 f92e 	bl	800048c <MX_DAC1_Init>
  MX_TIM2_Init();
 8000230:	f000 fa50 	bl	80006d4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000234:	f000 faca 	bl	80007cc <MX_TIM3_Init>
  MX_TIM1_Init();
 8000238:	f000 f99c 	bl	8000574 <MX_TIM1_Init>
  MX_TIM4_Init();
 800023c:	f000 fb1a 	bl	8000874 <MX_TIM4_Init>
  MX_COMP1_Init();
 8000240:	f000 f8fc 	bl	800043c <MX_COMP1_Init>
  MX_DAC3_Init();
 8000244:	f000 f95c 	bl	8000500 <MX_DAC3_Init>
  MX_TIM6_Init();
 8000248:	f000 fb62 	bl	8000910 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  init_ADC_Channel(&ADC2ChannelConfig);
 800024c:	4813      	ldr	r0, [pc, #76]	; (800029c <main+0x84>)
 800024e:	f000 fd21 	bl	8000c94 <init_ADC_Channel>

  HAL_COMP_Start(&hcomp1);
 8000252:	4813      	ldr	r0, [pc, #76]	; (80002a0 <main+0x88>)
 8000254:	f002 ff84 	bl	8003160 <HAL_COMP_Start>
  HAL_TIM_Base_Start(&htim2);
 8000258:	4812      	ldr	r0, [pc, #72]	; (80002a4 <main+0x8c>)
 800025a:	f004 fd29 	bl	8004cb0 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 800025e:	2104      	movs	r1, #4
 8000260:	4810      	ldr	r0, [pc, #64]	; (80002a4 <main+0x8c>)
 8000262:	f004 ff41 	bl	80050e8 <HAL_TIM_IC_Start_IT>

  htim1.Instance->CCR1 = 0;
 8000266:	4b10      	ldr	r3, [pc, #64]	; (80002a8 <main+0x90>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	2200      	movs	r2, #0
 800026c:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_Base_Start(&htim1);
 800026e:	480e      	ldr	r0, [pc, #56]	; (80002a8 <main+0x90>)
 8000270:	f004 fd1e 	bl	8004cb0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000274:	2100      	movs	r1, #0
 8000276:	480c      	ldr	r0, [pc, #48]	; (80002a8 <main+0x90>)
 8000278:	f004 fdde 	bl	8004e38 <HAL_TIM_PWM_Start>

  HAL_ADC_Start_IT(&hadc2);
 800027c:	480b      	ldr	r0, [pc, #44]	; (80002ac <main+0x94>)
 800027e:	f001 fca3 	bl	8001bc8 <HAL_ADC_Start_IT>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000282:	2110      	movs	r1, #16
 8000284:	480a      	ldr	r0, [pc, #40]	; (80002b0 <main+0x98>)
 8000286:	f003 f8e4 	bl	8003452 <HAL_DAC_Start>
  HAL_TIM_Base_Start(&htim4);
 800028a:	480a      	ldr	r0, [pc, #40]	; (80002b4 <main+0x9c>)
 800028c:	f004 fd10 	bl	8004cb0 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  refreshPPM(AnalogThrottleValue);
 8000290:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <main+0xa0>)
 8000292:	881b      	ldrh	r3, [r3, #0]
 8000294:	4618      	mov	r0, r3
 8000296:	f000 fd49 	bl	8000d2c <refreshPPM>
 800029a:	e7f9      	b.n	8000290 <main+0x78>
 800029c:	2000003c 	.word	0x2000003c
 80002a0:	20000144 	.word	0x20000144
 80002a4:	2000024c 	.word	0x2000024c
 80002a8:	20000200 	.word	0x20000200
 80002ac:	200000d8 	.word	0x200000d8
 80002b0:	200000c4 	.word	0x200000c4
 80002b4:	20000078 	.word	0x20000078
 80002b8:	20000060 	.word	0x20000060

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b0a4      	sub	sp, #144	; 0x90
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002c6:	2238      	movs	r2, #56	; 0x38
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f006 fc4e 	bl	8006b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	605a      	str	r2, [r3, #4]
 80002da:	609a      	str	r2, [r3, #8]
 80002dc:	60da      	str	r2, [r3, #12]
 80002de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e0:	463b      	mov	r3, r7
 80002e2:	2244      	movs	r2, #68	; 0x44
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f006 fc40 	bl	8006b6c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002f0:	f003 fcda 	bl	8003ca8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f4:	2302      	movs	r3, #2
 80002f6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002fc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fe:	2340      	movs	r3, #64	; 0x40
 8000300:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000302:	2300      	movs	r3, #0
 8000304:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000306:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800030a:	4618      	mov	r0, r3
 800030c:	f003 fd80 	bl	8003e10 <HAL_RCC_OscConfig>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000316:	f000 fd39 	bl	8000d8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031a:	230f      	movs	r3, #15
 800031c:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800031e:	2301      	movs	r3, #1
 8000320:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000322:	2300      	movs	r3, #0
 8000324:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800032a:	2300      	movs	r3, #0
 800032c:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800032e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000332:	2100      	movs	r1, #0
 8000334:	4618      	mov	r0, r3
 8000336:	f004 f883 	bl	8004440 <HAL_RCC_ClockConfig>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000340:	f000 fd24 	bl	8000d8c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000344:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000348:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800034a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800034e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000350:	463b      	mov	r3, r7
 8000352:	4618      	mov	r0, r3
 8000354:	f004 fa64 	bl	8004820 <HAL_RCCEx_PeriphCLKConfig>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800035e:	f000 fd15 	bl	8000d8c <Error_Handler>
  }
}
 8000362:	bf00      	nop
 8000364:	3790      	adds	r7, #144	; 0x90
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
	...

0800036c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b088      	sub	sp, #32
 8000370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000372:	463b      	mov	r3, r7
 8000374:	2220      	movs	r2, #32
 8000376:	2100      	movs	r1, #0
 8000378:	4618      	mov	r0, r3
 800037a:	f006 fbf7 	bl	8006b6c <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800037e:	4b2c      	ldr	r3, [pc, #176]	; (8000430 <MX_ADC2_Init+0xc4>)
 8000380:	4a2c      	ldr	r2, [pc, #176]	; (8000434 <MX_ADC2_Init+0xc8>)
 8000382:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000384:	4b2a      	ldr	r3, [pc, #168]	; (8000430 <MX_ADC2_Init+0xc4>)
 8000386:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800038a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800038c:	4b28      	ldr	r3, [pc, #160]	; (8000430 <MX_ADC2_Init+0xc4>)
 800038e:	2200      	movs	r2, #0
 8000390:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000392:	4b27      	ldr	r3, [pc, #156]	; (8000430 <MX_ADC2_Init+0xc4>)
 8000394:	2200      	movs	r2, #0
 8000396:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000398:	4b25      	ldr	r3, [pc, #148]	; (8000430 <MX_ADC2_Init+0xc4>)
 800039a:	2200      	movs	r2, #0
 800039c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800039e:	4b24      	ldr	r3, [pc, #144]	; (8000430 <MX_ADC2_Init+0xc4>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003a4:	4b22      	ldr	r3, [pc, #136]	; (8000430 <MX_ADC2_Init+0xc4>)
 80003a6:	2204      	movs	r2, #4
 80003a8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80003aa:	4b21      	ldr	r3, [pc, #132]	; (8000430 <MX_ADC2_Init+0xc4>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80003b0:	4b1f      	ldr	r3, [pc, #124]	; (8000430 <MX_ADC2_Init+0xc4>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80003b6:	4b1e      	ldr	r3, [pc, #120]	; (8000430 <MX_ADC2_Init+0xc4>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80003bc:	4b1c      	ldr	r3, [pc, #112]	; (8000430 <MX_ADC2_Init+0xc4>)
 80003be:	2200      	movs	r2, #0
 80003c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 80003c4:	4b1a      	ldr	r3, [pc, #104]	; (8000430 <MX_ADC2_Init+0xc4>)
 80003c6:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 80003ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80003cc:	4b18      	ldr	r3, [pc, #96]	; (8000430 <MX_ADC2_Init+0xc4>)
 80003ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003d2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80003d4:	4b16      	ldr	r3, [pc, #88]	; (8000430 <MX_ADC2_Init+0xc4>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003dc:	4b14      	ldr	r3, [pc, #80]	; (8000430 <MX_ADC2_Init+0xc4>)
 80003de:	2200      	movs	r2, #0
 80003e0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80003e2:	4b13      	ldr	r3, [pc, #76]	; (8000430 <MX_ADC2_Init+0xc4>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80003ea:	4811      	ldr	r0, [pc, #68]	; (8000430 <MX_ADC2_Init+0xc4>)
 80003ec:	f001 fa62 	bl	80018b4 <HAL_ADC_Init>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80003f6:	f000 fcc9 	bl	8000d8c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003fa:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <MX_ADC2_Init+0xcc>)
 80003fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003fe:	2306      	movs	r3, #6
 8000400:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000402:	2302      	movs	r3, #2
 8000404:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000406:	237f      	movs	r3, #127	; 0x7f
 8000408:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800040a:	2304      	movs	r3, #4
 800040c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800040e:	2300      	movs	r3, #0
 8000410:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000412:	463b      	mov	r3, r7
 8000414:	4619      	mov	r1, r3
 8000416:	4806      	ldr	r0, [pc, #24]	; (8000430 <MX_ADC2_Init+0xc4>)
 8000418:	f001 ff7e 	bl	8002318 <HAL_ADC_ConfigChannel>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000422:	f000 fcb3 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000426:	bf00      	nop
 8000428:	3720      	adds	r7, #32
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	200000d8 	.word	0x200000d8
 8000434:	50000100 	.word	0x50000100
 8000438:	04300002 	.word	0x04300002

0800043c <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000440:	4b10      	ldr	r3, [pc, #64]	; (8000484 <MX_COMP1_Init+0x48>)
 8000442:	4a11      	ldr	r2, [pc, #68]	; (8000488 <MX_COMP1_Init+0x4c>)
 8000444:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000446:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <MX_COMP1_Init+0x48>)
 8000448:	2200      	movs	r2, #0
 800044a:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_1_4VREFINT;
 800044c:	4b0d      	ldr	r3, [pc, #52]	; (8000484 <MX_COMP1_Init+0x48>)
 800044e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000452:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000454:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <MX_COMP1_Init+0x48>)
 8000456:	2200      	movs	r2, #0
 8000458:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_50MV;
 800045a:	4b0a      	ldr	r3, [pc, #40]	; (8000484 <MX_COMP1_Init+0x48>)
 800045c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000460:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000462:	4b08      	ldr	r3, [pc, #32]	; (8000484 <MX_COMP1_Init+0x48>)
 8000464:	2200      	movs	r2, #0
 8000466:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000468:	4b06      	ldr	r3, [pc, #24]	; (8000484 <MX_COMP1_Init+0x48>)
 800046a:	2200      	movs	r2, #0
 800046c:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800046e:	4805      	ldr	r0, [pc, #20]	; (8000484 <MX_COMP1_Init+0x48>)
 8000470:	f002 fd9a 	bl	8002fa8 <HAL_COMP_Init>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_COMP1_Init+0x42>
  {
    Error_Handler();
 800047a:	f000 fc87 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	20000144 	.word	0x20000144
 8000488:	40010200 	.word	0x40010200

0800048c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b08c      	sub	sp, #48	; 0x30
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000492:	463b      	mov	r3, r7
 8000494:	2230      	movs	r2, #48	; 0x30
 8000496:	2100      	movs	r1, #0
 8000498:	4618      	mov	r0, r3
 800049a:	f006 fb67 	bl	8006b6c <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800049e:	4b16      	ldr	r3, [pc, #88]	; (80004f8 <MX_DAC1_Init+0x6c>)
 80004a0:	4a16      	ldr	r2, [pc, #88]	; (80004fc <MX_DAC1_Init+0x70>)
 80004a2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80004a4:	4814      	ldr	r0, [pc, #80]	; (80004f8 <MX_DAC1_Init+0x6c>)
 80004a6:	f002 ffb2 	bl	800340e <HAL_DAC_Init>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80004b0:	f000 fc6c 	bl	8000d8c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80004b4:	2302      	movs	r3, #2
 80004b6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80004b8:	2300      	movs	r3, #0
 80004ba:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80004bc:	2300      	movs	r3, #0
 80004be:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80004c0:	2300      	movs	r3, #0
 80004c2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 80004c4:	2316      	movs	r3, #22
 80004c6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80004c8:	2300      	movs	r3, #0
 80004ca:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80004cc:	2300      	movs	r3, #0
 80004ce:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80004d0:	2301      	movs	r3, #1
 80004d2:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80004d4:	2300      	movs	r3, #0
 80004d6:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80004d8:	463b      	mov	r3, r7
 80004da:	2210      	movs	r2, #16
 80004dc:	4619      	mov	r1, r3
 80004de:	4806      	ldr	r0, [pc, #24]	; (80004f8 <MX_DAC1_Init+0x6c>)
 80004e0:	f003 f896 	bl	8003610 <HAL_DAC_ConfigChannel>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80004ea:	f000 fc4f 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80004ee:	bf00      	nop
 80004f0:	3730      	adds	r7, #48	; 0x30
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	200000c4 	.word	0x200000c4
 80004fc:	50000800 	.word	0x50000800

08000500 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08c      	sub	sp, #48	; 0x30
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000506:	463b      	mov	r3, r7
 8000508:	2230      	movs	r2, #48	; 0x30
 800050a:	2100      	movs	r1, #0
 800050c:	4618      	mov	r0, r3
 800050e:	f006 fb2d 	bl	8006b6c <memset>
  /* USER CODE BEGIN DAC3_Init 1 */

  /* USER CODE END DAC3_Init 1 */
  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8000512:	4b16      	ldr	r3, [pc, #88]	; (800056c <MX_DAC3_Init+0x6c>)
 8000514:	4a16      	ldr	r2, [pc, #88]	; (8000570 <MX_DAC3_Init+0x70>)
 8000516:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8000518:	4814      	ldr	r0, [pc, #80]	; (800056c <MX_DAC3_Init+0x6c>)
 800051a:	f002 ff78 	bl	800340e <HAL_DAC_Init>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8000524:	f000 fc32 	bl	8000d8c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000528:	2302      	movs	r3, #2
 800052a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800052c:	2300      	movs	r3, #0
 800052e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000530:	2300      	movs	r3, #0
 8000532:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000534:	2300      	movs	r3, #0
 8000536:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000538:	2300      	movs	r3, #0
 800053a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800053c:	2300      	movs	r3, #0
 800053e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000540:	2302      	movs	r3, #2
 8000542:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000544:	2302      	movs	r3, #2
 8000546:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000548:	2300      	movs	r3, #0
 800054a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800054c:	463b      	mov	r3, r7
 800054e:	2200      	movs	r2, #0
 8000550:	4619      	mov	r1, r3
 8000552:	4806      	ldr	r0, [pc, #24]	; (800056c <MX_DAC3_Init+0x6c>)
 8000554:	f003 f85c 	bl	8003610 <HAL_DAC_ConfigChannel>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 800055e:	f000 fc15 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8000562:	bf00      	nop
 8000564:	3730      	adds	r7, #48	; 0x30
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000064 	.word	0x20000064
 8000570:	50001000 	.word	0x50001000

08000574 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b09c      	sub	sp, #112	; 0x70
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800057a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000588:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000594:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]
 80005a4:	615a      	str	r2, [r3, #20]
 80005a6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2234      	movs	r2, #52	; 0x34
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f006 fadc 	bl	8006b6c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005b4:	4b45      	ldr	r3, [pc, #276]	; (80006cc <MX_TIM1_Init+0x158>)
 80005b6:	4a46      	ldr	r2, [pc, #280]	; (80006d0 <MX_TIM1_Init+0x15c>)
 80005b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 80005ba:	4b44      	ldr	r3, [pc, #272]	; (80006cc <MX_TIM1_Init+0x158>)
 80005bc:	220f      	movs	r2, #15
 80005be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c0:	4b42      	ldr	r3, [pc, #264]	; (80006cc <MX_TIM1_Init+0x158>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 80005c6:	4b41      	ldr	r3, [pc, #260]	; (80006cc <MX_TIM1_Init+0x158>)
 80005c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80005cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ce:	4b3f      	ldr	r3, [pc, #252]	; (80006cc <MX_TIM1_Init+0x158>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005d4:	4b3d      	ldr	r3, [pc, #244]	; (80006cc <MX_TIM1_Init+0x158>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005da:	4b3c      	ldr	r3, [pc, #240]	; (80006cc <MX_TIM1_Init+0x158>)
 80005dc:	2200      	movs	r2, #0
 80005de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005e0:	483a      	ldr	r0, [pc, #232]	; (80006cc <MX_TIM1_Init+0x158>)
 80005e2:	f004 fb0d 	bl	8004c00 <HAL_TIM_Base_Init>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80005ec:	f000 fbce 	bl	8000d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005f6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80005fa:	4619      	mov	r1, r3
 80005fc:	4833      	ldr	r0, [pc, #204]	; (80006cc <MX_TIM1_Init+0x158>)
 80005fe:	f005 f9d3 	bl	80059a8 <HAL_TIM_ConfigClockSource>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000608:	f000 fbc0 	bl	8000d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800060c:	482f      	ldr	r0, [pc, #188]	; (80006cc <MX_TIM1_Init+0x158>)
 800060e:	f004 fbb1 	bl	8004d74 <HAL_TIM_PWM_Init>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000618:	f000 fbb8 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800061c:	2300      	movs	r3, #0
 800061e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000620:	2300      	movs	r3, #0
 8000622:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000624:	2300      	movs	r3, #0
 8000626:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000628:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800062c:	4619      	mov	r1, r3
 800062e:	4827      	ldr	r0, [pc, #156]	; (80006cc <MX_TIM1_Init+0x158>)
 8000630:	f006 f882 	bl	8006738 <HAL_TIMEx_MasterConfigSynchronization>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800063a:	f000 fba7 	bl	8000d8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800063e:	2360      	movs	r3, #96	; 0x60
 8000640:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000646:	2300      	movs	r3, #0
 8000648:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800064a:	2300      	movs	r3, #0
 800064c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800064e:	2300      	movs	r3, #0
 8000650:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000652:	2300      	movs	r3, #0
 8000654:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000656:	2300      	movs	r3, #0
 8000658:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800065a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800065e:	2200      	movs	r2, #0
 8000660:	4619      	mov	r1, r3
 8000662:	481a      	ldr	r0, [pc, #104]	; (80006cc <MX_TIM1_Init+0x158>)
 8000664:	f005 f890 	bl	8005788 <HAL_TIM_PWM_ConfigChannel>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800066e:	f000 fb8d 	bl	8000d8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000672:	2300      	movs	r3, #0
 8000674:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000676:	2300      	movs	r3, #0
 8000678:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000686:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800068a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000690:	2300      	movs	r3, #0
 8000692:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000694:	2300      	movs	r3, #0
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000698:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800069c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80006a2:	2300      	movs	r3, #0
 80006a4:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006a6:	2300      	movs	r3, #0
 80006a8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4619      	mov	r1, r3
 80006ae:	4807      	ldr	r0, [pc, #28]	; (80006cc <MX_TIM1_Init+0x158>)
 80006b0:	f006 f8c4 	bl	800683c <HAL_TIMEx_ConfigBreakDeadTime>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 80006ba:	f000 fb67 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80006be:	4803      	ldr	r0, [pc, #12]	; (80006cc <MX_TIM1_Init+0x158>)
 80006c0:	f000 fd12 	bl	80010e8 <HAL_TIM_MspPostInit>

}
 80006c4:	bf00      	nop
 80006c6:	3770      	adds	r7, #112	; 0x70
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000200 	.word	0x20000200
 80006d0:	40012c00 	.word	0x40012c00

080006d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08c      	sub	sp, #48	; 0x30
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000700:	4b30      	ldr	r3, [pc, #192]	; (80007c4 <MX_TIM2_Init+0xf0>)
 8000702:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000706:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8000708:	4b2e      	ldr	r3, [pc, #184]	; (80007c4 <MX_TIM2_Init+0xf0>)
 800070a:	220f      	movs	r2, #15
 800070c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070e:	4b2d      	ldr	r3, [pc, #180]	; (80007c4 <MX_TIM2_Init+0xf0>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3.2E7;
 8000714:	4b2b      	ldr	r3, [pc, #172]	; (80007c4 <MX_TIM2_Init+0xf0>)
 8000716:	4a2c      	ldr	r2, [pc, #176]	; (80007c8 <MX_TIM2_Init+0xf4>)
 8000718:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071a:	4b2a      	ldr	r3, [pc, #168]	; (80007c4 <MX_TIM2_Init+0xf0>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000720:	4b28      	ldr	r3, [pc, #160]	; (80007c4 <MX_TIM2_Init+0xf0>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000726:	4827      	ldr	r0, [pc, #156]	; (80007c4 <MX_TIM2_Init+0xf0>)
 8000728:	f004 fa6a 	bl	8004c00 <HAL_TIM_Base_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000732:	f000 fb2b 	bl	8000d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800073c:	f107 0320 	add.w	r3, r7, #32
 8000740:	4619      	mov	r1, r3
 8000742:	4820      	ldr	r0, [pc, #128]	; (80007c4 <MX_TIM2_Init+0xf0>)
 8000744:	f005 f930 	bl	80059a8 <HAL_TIM_ConfigClockSource>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800074e:	f000 fb1d 	bl	8000d8c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000752:	481c      	ldr	r0, [pc, #112]	; (80007c4 <MX_TIM2_Init+0xf0>)
 8000754:	f004 fc70 	bl	8005038 <HAL_TIM_IC_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800075e:	f000 fb15 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4619      	mov	r1, r3
 8000770:	4814      	ldr	r0, [pc, #80]	; (80007c4 <MX_TIM2_Init+0xf0>)
 8000772:	f005 ffe1 	bl	8006738 <HAL_TIMEx_MasterConfigSynchronization>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 800077c:	f000 fb06 	bl	8000d8c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000780:	2300      	movs	r3, #0
 8000782:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000784:	2301      	movs	r3, #1
 8000786:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 4;
 800078c:	2304      	movs	r3, #4
 800078e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	2204      	movs	r2, #4
 8000794:	4619      	mov	r1, r3
 8000796:	480b      	ldr	r0, [pc, #44]	; (80007c4 <MX_TIM2_Init+0xf0>)
 8000798:	f004 ff61 	bl	800565e <HAL_TIM_IC_ConfigChannel>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80007a2:	f000 faf3 	bl	8000d8c <Error_Handler>
  }
  if (HAL_TIMEx_TISelection(&htim2, TIM_TIM2_TI2_COMP1, TIM_CHANNEL_2) != HAL_OK)
 80007a6:	2204      	movs	r2, #4
 80007a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ac:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_TIM2_Init+0xf0>)
 80007ae:	f006 f8e5 	bl	800697c <HAL_TIMEx_TISelection>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80007b8:	f000 fae8 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	3730      	adds	r7, #48	; 0x30
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	2000024c 	.word	0x2000024c
 80007c8:	01e84800 	.word	0x01e84800

080007cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007ea:	4b20      	ldr	r3, [pc, #128]	; (800086c <MX_TIM3_Init+0xa0>)
 80007ec:	4a20      	ldr	r2, [pc, #128]	; (8000870 <MX_TIM3_Init+0xa4>)
 80007ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007f0:	4b1e      	ldr	r3, [pc, #120]	; (800086c <MX_TIM3_Init+0xa0>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f6:	4b1d      	ldr	r3, [pc, #116]	; (800086c <MX_TIM3_Init+0xa0>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80007fc:	4b1b      	ldr	r3, [pc, #108]	; (800086c <MX_TIM3_Init+0xa0>)
 80007fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000802:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000804:	4b19      	ldr	r3, [pc, #100]	; (800086c <MX_TIM3_Init+0xa0>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080a:	4b18      	ldr	r3, [pc, #96]	; (800086c <MX_TIM3_Init+0xa0>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000810:	4816      	ldr	r0, [pc, #88]	; (800086c <MX_TIM3_Init+0xa0>)
 8000812:	f004 fc11 	bl	8005038 <HAL_TIM_IC_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800081c:	f000 fab6 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4619      	mov	r1, r3
 800082e:	480f      	ldr	r0, [pc, #60]	; (800086c <MX_TIM3_Init+0xa0>)
 8000830:	f005 ff82 	bl	8006738 <HAL_TIMEx_MasterConfigSynchronization>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800083a:	f000 faa7 	bl	8000d8c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000842:	2301      	movs	r3, #1
 8000844:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2200      	movs	r2, #0
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_TIM3_Init+0xa0>)
 8000856:	f004 ff02 	bl	800565e <HAL_TIM_IC_ConfigChannel>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000860:	f000 fa94 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	3720      	adds	r7, #32
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000168 	.word	0x20000168
 8000870:	40000400 	.word	0x40000400

08000874 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b088      	sub	sp, #32
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800087a:	f107 0310 	add.w	r3, r7, #16
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000892:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <MX_TIM4_Init+0x94>)
 8000894:	4a1d      	ldr	r2, [pc, #116]	; (800090c <MX_TIM4_Init+0x98>)
 8000896:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15;
 8000898:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <MX_TIM4_Init+0x94>)
 800089a:	220f      	movs	r2, #15
 800089c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089e:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <MX_TIM4_Init+0x94>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80008a4:	4b18      	ldr	r3, [pc, #96]	; (8000908 <MX_TIM4_Init+0x94>)
 80008a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008aa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ac:	4b16      	ldr	r3, [pc, #88]	; (8000908 <MX_TIM4_Init+0x94>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <MX_TIM4_Init+0x94>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008b8:	4813      	ldr	r0, [pc, #76]	; (8000908 <MX_TIM4_Init+0x94>)
 80008ba:	f004 f9a1 	bl	8004c00 <HAL_TIM_Base_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80008c4:	f000 fa62 	bl	8000d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80008ce:	f107 0310 	add.w	r3, r7, #16
 80008d2:	4619      	mov	r1, r3
 80008d4:	480c      	ldr	r0, [pc, #48]	; (8000908 <MX_TIM4_Init+0x94>)
 80008d6:	f005 f867 	bl	80059a8 <HAL_TIM_ConfigClockSource>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80008e0:	f000 fa54 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008e4:	2320      	movs	r3, #32
 80008e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	4619      	mov	r1, r3
 80008f0:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_TIM4_Init+0x94>)
 80008f2:	f005 ff21 	bl	8006738 <HAL_TIMEx_MasterConfigSynchronization>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80008fc:	f000 fa46 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	3720      	adds	r7, #32
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000078 	.word	0x20000078
 800090c:	40000800 	.word	0x40000800

08000910 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_TIM6_Init+0x64>)
 8000922:	4a15      	ldr	r2, [pc, #84]	; (8000978 <MX_TIM6_Init+0x68>)
 8000924:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16;
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <MX_TIM6_Init+0x64>)
 8000928:	2210      	movs	r2, #16
 800092a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_TIM6_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <MX_TIM6_Init+0x64>)
 8000934:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000938:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_TIM6_Init+0x64>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000940:	480c      	ldr	r0, [pc, #48]	; (8000974 <MX_TIM6_Init+0x64>)
 8000942:	f004 f95d 	bl	8004c00 <HAL_TIM_Base_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800094c:	f000 fa1e 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000950:	2300      	movs	r3, #0
 8000952:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	4619      	mov	r1, r3
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_TIM6_Init+0x64>)
 800095e:	f005 feeb 	bl	8006738 <HAL_TIMEx_MasterConfigSynchronization>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000968:	f000 fa10 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	200001b4 	.word	0x200001b4
 8000978:	40001000 	.word	0x40001000

0800097c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <MX_GPIO_Init+0x60>)
 8000992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000994:	4a11      	ldr	r2, [pc, #68]	; (80009dc <MX_GPIO_Init+0x60>)
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <MX_GPIO_Init+0x60>)
 800099e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, GPIO_PIN_RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b2:	f003 f961 	bl	8003c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Status_LED_Pin */
  GPIO_InitStruct.Pin = Status_LED_Pin;
 80009b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Status_LED_GPIO_Port, &GPIO_InitStruct);
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	4619      	mov	r1, r3
 80009cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d0:	f002 ffd0 	bl	8003974 <HAL_GPIO_Init>

}
 80009d4:	bf00      	nop
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40021000 	.word	0x40021000

080009e0 <NormalizeChannel>:

/* USER CODE BEGIN 4 */

int32_t NormalizeChannel(uint16_t ChannelValue, int32_t InMin, int32_t InMax, int32_t OutMin, int32_t OutMax)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b087      	sub	sp, #28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60b9      	str	r1, [r7, #8]
 80009e8:	607a      	str	r2, [r7, #4]
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	4603      	mov	r3, r0
 80009ee:	81fb      	strh	r3, [r7, #14]
	if ( ChannelValue <= InMin) return OutMin;
 80009f0:	89fb      	ldrh	r3, [r7, #14]
 80009f2:	68ba      	ldr	r2, [r7, #8]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	db01      	blt.n	80009fc <NormalizeChannel+0x1c>
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	e03a      	b.n	8000a72 <NormalizeChannel+0x92>
	if ( ChannelValue >= InMax) return OutMax;
 80009fc:	89fb      	ldrh	r3, [r7, #14]
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	dc01      	bgt.n	8000a08 <NormalizeChannel+0x28>
 8000a04:	6a3b      	ldr	r3, [r7, #32]
 8000a06:	e034      	b.n	8000a72 <NormalizeChannel+0x92>

	float ScaleA = ((float)(OutMax - OutMin))/(float)(InMax - InMin);
 8000a08:	6a3a      	ldr	r2, [r7, #32]
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	ee07 3a90 	vmov	s15, r3
 8000a12:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	ee07 3a90 	vmov	s15, r3
 8000a20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a28:	edc7 7a05 	vstr	s15, [r7, #20]
	float ScaleB = (float)OutMin-((float)InMin * ScaleA);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	ee07 3a90 	vmov	s15, r3
 8000a32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	ee07 3a90 	vmov	s15, r3
 8000a3c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a40:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a4c:	edc7 7a04 	vstr	s15, [r7, #16]
	return (int32_t)(ChannelValue * ScaleA + ScaleB);
 8000a50:	89fb      	ldrh	r3, [r7, #14]
 8000a52:	ee07 3a90 	vmov	s15, r3
 8000a56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a62:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a6e:	ee17 3a90 	vmov	r3, s15
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	371c      	adds	r7, #28
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
	...

08000a80 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
  {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)	//Input capture source is from COMP1 with a 1/4*VREF threshold
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	7f1b      	ldrb	r3, [r3, #28]
 8000a8c:	2b02      	cmp	r3, #2
 8000a8e:	d153      	bne.n	8000b38 <HAL_TIM_IC_CaptureCallback+0xb8>
	{
		if (!ICSpeedIsFirstCapt)
 8000a90:	4b2b      	ldr	r3, [pc, #172]	; (8000b40 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d10a      	bne.n	8000aae <HAL_TIM_IC_CaptureCallback+0x2e>
		{
			ICSpeedVal1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000a98:	2104      	movs	r1, #4
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f005 f87a 	bl	8005b94 <HAL_TIM_ReadCapturedValue>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	4a28      	ldr	r2, [pc, #160]	; (8000b44 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000aa4:	6013      	str	r3, [r2, #0]
			ICSpeedIsFirstCapt = 1;
 8000aa6:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	701a      	strb	r2, [r3, #0]
				ICSpeedDiff = 0;
			}
		}

	}
  }
 8000aac:	e044      	b.n	8000b38 <HAL_TIM_IC_CaptureCallback+0xb8>
			ICSpeedVal2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000aae:	2104      	movs	r1, #4
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f005 f86f 	bl	8005b94 <HAL_TIM_ReadCapturedValue>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	4a23      	ldr	r2, [pc, #140]	; (8000b48 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000aba:	6013      	str	r3, [r2, #0]
			if ( counter !=0)
 8000abc:	4b23      	ldr	r3, [pc, #140]	; (8000b4c <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d01c      	beq.n	8000afe <HAL_TIM_IC_CaptureCallback+0x7e>
				if (ICSpeedVal1 < ICSpeedVal2) // Overflowed ?
 8000ac4:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d20a      	bcs.n	8000ae6 <HAL_TIM_IC_CaptureCallback+0x66>
					ICSpeedDiff += ICSpeedVal2-ICSpeedVal1;
 8000ad0:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	1ad2      	subs	r2, r2, r3
 8000ada:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4413      	add	r3, r2
 8000ae0:	4a1b      	ldr	r2, [pc, #108]	; (8000b50 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000ae2:	6013      	str	r3, [r2, #0]
 8000ae4:	e00b      	b.n	8000afe <HAL_TIM_IC_CaptureCallback+0x7e>
					ICSpeedDiff += ((32000000-ICSpeedVal1)+ICSpeedVal2)+1;
 8000ae6:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	1ad2      	subs	r2, r2, r3
 8000af0:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	441a      	add	r2, r3
 8000af6:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000af8:	4413      	add	r3, r2
 8000afa:	4a15      	ldr	r2, [pc, #84]	; (8000b50 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000afc:	6013      	str	r3, [r2, #0]
			ICSpeedVal1 = ICSpeedVal2;
 8000afe:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a10      	ldr	r2, [pc, #64]	; (8000b44 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000b04:	6013      	str	r3, [r2, #0]
			counter++;
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000b08:	881b      	ldrh	r3, [r3, #0]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000b10:	801a      	strh	r2, [r3, #0]
			if (counter>=50)
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000b14:	881b      	ldrh	r3, [r3, #0]
 8000b16:	2b31      	cmp	r3, #49	; 0x31
 8000b18:	d90e      	bls.n	8000b38 <HAL_TIM_IC_CaptureCallback+0xb8>
				ICSpeedDiff /= counter-1;
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000b20:	8812      	ldrh	r2, [r2, #0]
 8000b22:	3a01      	subs	r2, #1
 8000b24:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b28:	4a09      	ldr	r2, [pc, #36]	; (8000b50 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000b2a:	6013      	str	r3, [r2, #0]
				counter = 0;
 8000b2c:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	801a      	strh	r2, [r3, #0]
				ICSpeedDiff = 0;
 8000b32:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
  }
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000038 	.word	0x20000038
 8000b44:	2000002c 	.word	0x2000002c
 8000b48:	20000030 	.word	0x20000030
 8000b4c:	2000003a 	.word	0x2000003a
 8000b50:	20000034 	.word	0x20000034
 8000b54:	01e84801 	.word	0x01e84801

08000b58 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc2)	//Do a lot of things inside the interruption because it's trigged by Timer 4 not so often (few ms)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a43      	ldr	r2, [pc, #268]	; (8000c70 <HAL_ADC_ConvCpltCallback+0x118>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d17e      	bne.n	8000c66 <HAL_ADC_ConvCpltCallback+0x10e>
	{
		uint16_t value = HAL_ADC_GetValue(hadc);
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f001 f99a 	bl	8001ea2 <HAL_ADC_GetValue>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	81fb      	strh	r3, [r7, #14]
		switch(ADC2ChannelConfig.Channel)
 8000b72:	4b40      	ldr	r3, [pc, #256]	; (8000c74 <HAL_ADC_ConvCpltCallback+0x11c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a40      	ldr	r2, [pc, #256]	; (8000c78 <HAL_ADC_ConvCpltCallback+0x120>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d003      	beq.n	8000b84 <HAL_ADC_ConvCpltCallback+0x2c>
 8000b7c:	4a3f      	ldr	r2, [pc, #252]	; (8000c7c <HAL_ADC_ConvCpltCallback+0x124>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d00a      	beq.n	8000b98 <HAL_ADC_ConvCpltCallback+0x40>
 8000b82:	e061      	b.n	8000c48 <HAL_ADC_ConvCpltCallback+0xf0>
		{
		case ADC_CHANNEL_1:	//Channel 1 is mixed temperature/speed reading. Concentrate on the high level and ignore signal when it is low. We can concentrate on
			if (value>=MIN_TEMP_ANALOG_THERSHOLD)
 8000b84:	89fb      	ldrh	r3, [r7, #14]
 8000b86:	2bc7      	cmp	r3, #199	; 0xc7
 8000b88:	d961      	bls.n	8000c4e <HAL_ADC_ConvCpltCallback+0xf6>
			{
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, value);
 8000b8a:	89fb      	ldrh	r3, [r7, #14]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2110      	movs	r1, #16
 8000b90:	483b      	ldr	r0, [pc, #236]	; (8000c80 <HAL_ADC_ConvCpltCallback+0x128>)
 8000b92:	f002 fd0b 	bl	80035ac <HAL_DAC_SetValue>
			}
			break;
 8000b96:	e05a      	b.n	8000c4e <HAL_ADC_ConvCpltCallback+0xf6>

		case ADC_CHANNEL_17:	//Channel 17 is throttle input. Just copy its value after PPM conversion
			if (ThrottleStartup!=0)
 8000b98:	4b3a      	ldr	r3, [pc, #232]	; (8000c84 <HAL_ADC_ConvCpltCallback+0x12c>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d04b      	beq.n	8000c38 <HAL_ADC_ConvCpltCallback+0xe0>
			{
				if (value > 2048 && ThrottleStartup == 1)	//Throttle is maintained high during startup ==> Start calibration sequence
 8000ba0:	89fb      	ldrh	r3, [r7, #14]
 8000ba2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ba6:	d90a      	bls.n	8000bbe <HAL_ADC_ConvCpltCallback+0x66>
 8000ba8:	4b36      	ldr	r3, [pc, #216]	; (8000c84 <HAL_ADC_ConvCpltCallback+0x12c>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d106      	bne.n	8000bbe <HAL_ADC_ConvCpltCallback+0x66>
				{
					ThrottleStartup = 2;
 8000bb0:	4b34      	ldr	r3, [pc, #208]	; (8000c84 <HAL_ADC_ConvCpltCallback+0x12c>)
 8000bb2:	2202      	movs	r2, #2
 8000bb4:	701a      	strb	r2, [r3, #0]
					MaxAnalogThrottleValue = value;
 8000bb6:	4a34      	ldr	r2, [pc, #208]	; (8000c88 <HAL_ADC_ConvCpltCallback+0x130>)
 8000bb8:	89fb      	ldrh	r3, [r7, #14]
 8000bba:	8013      	strh	r3, [r2, #0]
 8000bbc:	e043      	b.n	8000c46 <HAL_ADC_ConvCpltCallback+0xee>
				}
				else if (value > 2048 && ThrottleStartup == 2 && value>MaxAnalogThrottleValue)	//Capture max value while throttle is higher than 2048
 8000bbe:	89fb      	ldrh	r3, [r7, #14]
 8000bc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000bc4:	d90c      	bls.n	8000be0 <HAL_ADC_ConvCpltCallback+0x88>
 8000bc6:	4b2f      	ldr	r3, [pc, #188]	; (8000c84 <HAL_ADC_ConvCpltCallback+0x12c>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d108      	bne.n	8000be0 <HAL_ADC_ConvCpltCallback+0x88>
 8000bce:	4b2e      	ldr	r3, [pc, #184]	; (8000c88 <HAL_ADC_ConvCpltCallback+0x130>)
 8000bd0:	881b      	ldrh	r3, [r3, #0]
 8000bd2:	89fa      	ldrh	r2, [r7, #14]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d903      	bls.n	8000be0 <HAL_ADC_ConvCpltCallback+0x88>
				{
					MaxAnalogThrottleValue = value;
 8000bd8:	4a2b      	ldr	r2, [pc, #172]	; (8000c88 <HAL_ADC_ConvCpltCallback+0x130>)
 8000bda:	89fb      	ldrh	r3, [r7, #14]
 8000bdc:	8013      	strh	r3, [r2, #0]
 8000bde:	e032      	b.n	8000c46 <HAL_ADC_ConvCpltCallback+0xee>
				}
				else if (value <= 2048 && ThrottleStartup == 2)	//When throttle has gone below mid value launch min calibration step
 8000be0:	89fb      	ldrh	r3, [r7, #14]
 8000be2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000be6:	d80a      	bhi.n	8000bfe <HAL_ADC_ConvCpltCallback+0xa6>
 8000be8:	4b26      	ldr	r3, [pc, #152]	; (8000c84 <HAL_ADC_ConvCpltCallback+0x12c>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d106      	bne.n	8000bfe <HAL_ADC_ConvCpltCallback+0xa6>
				{
					ThrottleStartup = 3;
 8000bf0:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <HAL_ADC_ConvCpltCallback+0x12c>)
 8000bf2:	2203      	movs	r2, #3
 8000bf4:	701a      	strb	r2, [r3, #0]
					MinAnalogThrottleValue = value;
 8000bf6:	4a25      	ldr	r2, [pc, #148]	; (8000c8c <HAL_ADC_ConvCpltCallback+0x134>)
 8000bf8:	89fb      	ldrh	r3, [r7, #14]
 8000bfa:	8013      	strh	r3, [r2, #0]
 8000bfc:	e023      	b.n	8000c46 <HAL_ADC_ConvCpltCallback+0xee>
				}
				else if (value <= 2048 && ThrottleStartup == 3 && value<MinAnalogThrottleValue)	//capture min value while throttle is kept below 2048
 8000bfe:	89fb      	ldrh	r3, [r7, #14]
 8000c00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c04:	d80c      	bhi.n	8000c20 <HAL_ADC_ConvCpltCallback+0xc8>
 8000c06:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <HAL_ADC_ConvCpltCallback+0x12c>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b03      	cmp	r3, #3
 8000c0c:	d108      	bne.n	8000c20 <HAL_ADC_ConvCpltCallback+0xc8>
 8000c0e:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <HAL_ADC_ConvCpltCallback+0x134>)
 8000c10:	881b      	ldrh	r3, [r3, #0]
 8000c12:	89fa      	ldrh	r2, [r7, #14]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d203      	bcs.n	8000c20 <HAL_ADC_ConvCpltCallback+0xc8>
				{
					MinAnalogThrottleValue = value;
 8000c18:	4a1c      	ldr	r2, [pc, #112]	; (8000c8c <HAL_ADC_ConvCpltCallback+0x134>)
 8000c1a:	89fb      	ldrh	r3, [r7, #14]
 8000c1c:	8013      	strh	r3, [r2, #0]
 8000c1e:	e012      	b.n	8000c46 <HAL_ADC_ConvCpltCallback+0xee>
				}
				else if (value > 2048 && ThrottleStartup == 3) 	//Exit calibration procedure when throttle is back above mid value
 8000c20:	89fb      	ldrh	r3, [r7, #14]
 8000c22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c26:	d914      	bls.n	8000c52 <HAL_ADC_ConvCpltCallback+0xfa>
 8000c28:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <HAL_ADC_ConvCpltCallback+0x12c>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b03      	cmp	r3, #3
 8000c2e:	d110      	bne.n	8000c52 <HAL_ADC_ConvCpltCallback+0xfa>
				{
					ThrottleStartup = 0;
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <HAL_ADC_ConvCpltCallback+0x12c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	701a      	strb	r2, [r3, #0]
			else
			{
				ThrottleStartup = 0;
				AnalogThrottleValue = value;
			}
			break;
 8000c36:	e00c      	b.n	8000c52 <HAL_ADC_ConvCpltCallback+0xfa>
				ThrottleStartup = 0;
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <HAL_ADC_ConvCpltCallback+0x12c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
				AnalogThrottleValue = value;
 8000c3e:	4a14      	ldr	r2, [pc, #80]	; (8000c90 <HAL_ADC_ConvCpltCallback+0x138>)
 8000c40:	89fb      	ldrh	r3, [r7, #14]
 8000c42:	8013      	strh	r3, [r2, #0]
			break;
 8000c44:	e005      	b.n	8000c52 <HAL_ADC_ConvCpltCallback+0xfa>
 8000c46:	e004      	b.n	8000c52 <HAL_ADC_ConvCpltCallback+0xfa>

		default:
			Error_Handler();
 8000c48:	f000 f8a0 	bl	8000d8c <Error_Handler>
			break;
 8000c4c:	e002      	b.n	8000c54 <HAL_ADC_ConvCpltCallback+0xfc>
			break;
 8000c4e:	bf00      	nop
 8000c50:	e000      	b.n	8000c54 <HAL_ADC_ConvCpltCallback+0xfc>
			break;
 8000c52:	bf00      	nop
		}
		HAL_ADC_Stop_IT(&hadc2);	//Stop ADC Because we are going to change channel
 8000c54:	4806      	ldr	r0, [pc, #24]	; (8000c70 <HAL_ADC_ConvCpltCallback+0x118>)
 8000c56:	f001 f8e9 	bl	8001e2c <HAL_ADC_Stop_IT>
		toogle_ADC_Channel(&ADC2ChannelConfig);	//Switch adc channel for next conversion
 8000c5a:	4806      	ldr	r0, [pc, #24]	; (8000c74 <HAL_ADC_ConvCpltCallback+0x11c>)
 8000c5c:	f000 f842 	bl	8000ce4 <toogle_ADC_Channel>
		HAL_ADC_Start_IT(&hadc2);	//Restart ADC Waiting for next conversion (after Timer 4 Trigger)
 8000c60:	4803      	ldr	r0, [pc, #12]	; (8000c70 <HAL_ADC_ConvCpltCallback+0x118>)
 8000c62:	f000 ffb1 	bl	8001bc8 <HAL_ADC_Start_IT>
	}
}
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200000d8 	.word	0x200000d8
 8000c74:	2000003c 	.word	0x2000003c
 8000c78:	04300002 	.word	0x04300002
 8000c7c:	47520000 	.word	0x47520000
 8000c80:	200000c4 	.word	0x200000c4
 8000c84:	20000002 	.word	0x20000002
 8000c88:	20000000 	.word	0x20000000
 8000c8c:	2000005c 	.word	0x2000005c
 8000c90:	20000060 	.word	0x20000060

08000c94 <init_ADC_Channel>:

void init_ADC_Channel(ADC_ChannelConfTypeDef* ADCChannel)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
	ADCChannel->Channel = ADC_CHANNEL_1;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a0f      	ldr	r2, [pc, #60]	; (8000cdc <init_ADC_Channel+0x48>)
 8000ca0:	601a      	str	r2, [r3, #0]
	ADCChannel->Rank = ADC_REGULAR_RANK_1;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2206      	movs	r2, #6
 8000ca6:	605a      	str	r2, [r3, #4]
	ADCChannel->SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2202      	movs	r2, #2
 8000cac:	609a      	str	r2, [r3, #8]
	ADCChannel->SingleDiff = ADC_SINGLE_ENDED;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	227f      	movs	r2, #127	; 0x7f
 8000cb2:	60da      	str	r2, [r3, #12]
	ADCChannel->OffsetNumber = ADC_OFFSET_NONE;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2204      	movs	r2, #4
 8000cb8:	611a      	str	r2, [r3, #16]
	ADCChannel->Offset = 0;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_ConfigChannel(&hadc2, ADCChannel) != HAL_OK)
 8000cc0:	6879      	ldr	r1, [r7, #4]
 8000cc2:	4807      	ldr	r0, [pc, #28]	; (8000ce0 <init_ADC_Channel+0x4c>)
 8000cc4:	f001 fb28 	bl	8002318 <HAL_ADC_ConfigChannel>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <init_ADC_Channel+0x3e>
		{
			Error_Handler();
 8000cce:	f000 f85d 	bl	8000d8c <Error_Handler>
		}
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	04300002 	.word	0x04300002
 8000ce0:	200000d8 	.word	0x200000d8

08000ce4 <toogle_ADC_Channel>:

void toogle_ADC_Channel(ADC_ChannelConfTypeDef* ADCChannel)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	if ( ADCChannel->Channel == ADC_CHANNEL_1) ADCChannel->Channel = ADC_CHANNEL_17;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <toogle_ADC_Channel+0x3c>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d103      	bne.n	8000cfe <toogle_ADC_Channel+0x1a>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <toogle_ADC_Channel+0x40>)
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	e002      	b.n	8000d04 <toogle_ADC_Channel+0x20>
	else ADCChannel->Channel = ADC_CHANNEL_1;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a07      	ldr	r2, [pc, #28]	; (8000d20 <toogle_ADC_Channel+0x3c>)
 8000d02:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc2, ADCChannel) != HAL_OK)
 8000d04:	6879      	ldr	r1, [r7, #4]
 8000d06:	4808      	ldr	r0, [pc, #32]	; (8000d28 <toogle_ADC_Channel+0x44>)
 8000d08:	f001 fb06 	bl	8002318 <HAL_ADC_ConfigChannel>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <toogle_ADC_Channel+0x32>
	{
		Error_Handler();
 8000d12:	f000 f83b 	bl	8000d8c <Error_Handler>
	}
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	04300002 	.word	0x04300002
 8000d24:	47520000 	.word	0x47520000
 8000d28:	200000d8 	.word	0x200000d8

08000d2c <refreshPPM>:

uint8_t refreshPPM(uint16_t value)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af02      	add	r7, sp, #8
 8000d32:	4603      	mov	r3, r0
 8000d34:	80fb      	strh	r3, [r7, #6]

	if (OutputActive ==1 )
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <refreshPPM+0x50>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d114      	bne.n	8000d68 <refreshPPM+0x3c>
	{
		htim1.Instance->CCR1 = (uint16_t)NormalizeChannel(value, MinAnalogThrottleValue, MaxAnalogThrottleValue, MIN_CHANNEL_VALUE, MAX_CHANNEL_VALUE);
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <refreshPPM+0x54>)
 8000d40:	881b      	ldrh	r3, [r3, #0]
 8000d42:	4619      	mov	r1, r3
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <refreshPPM+0x58>)
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	88f8      	ldrh	r0, [r7, #6]
 8000d4c:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d56:	f7ff fe43 	bl	80009e0 <NormalizeChannel>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <refreshPPM+0x5c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	635a      	str	r2, [r3, #52]	; 0x34
		return 1;
 8000d64:	2301      	movs	r3, #1
 8000d66:	e005      	b.n	8000d74 <refreshPPM+0x48>
	}
	else htim1.Instance->CCR1 = 500;
 8000d68:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <refreshPPM+0x5c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d70:	635a      	str	r2, [r3, #52]	; 0x34
	return 0;
 8000d72:	2300      	movs	r3, #0
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	2000005e 	.word	0x2000005e
 8000d80:	2000005c 	.word	0x2000005c
 8000d84:	20000000 	.word	0x20000000
 8000d88:	20000200 	.word	0x20000200

08000d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d90:	b672      	cpsid	i
}
 8000d92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <Error_Handler+0x8>
	...

08000d98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <HAL_MspInit+0x44>)
 8000da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000da2:	4a0e      	ldr	r2, [pc, #56]	; (8000ddc <HAL_MspInit+0x44>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6613      	str	r3, [r2, #96]	; 0x60
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <HAL_MspInit+0x44>)
 8000dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <HAL_MspInit+0x44>)
 8000db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dba:	4a08      	ldr	r2, [pc, #32]	; (8000ddc <HAL_MspInit+0x44>)
 8000dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc0:	6593      	str	r3, [r2, #88]	; 0x58
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_MspInit+0x44>)
 8000dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000dce:	f003 f80f 	bl	8003df0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40021000 	.word	0x40021000

08000de0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	; 0x28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a19      	ldr	r2, [pc, #100]	; (8000e64 <HAL_ADC_MspInit+0x84>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d12c      	bne.n	8000e5c <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e02:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <HAL_ADC_MspInit+0x88>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	4a18      	ldr	r2, [pc, #96]	; (8000e68 <HAL_ADC_MspInit+0x88>)
 8000e08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0e:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <HAL_ADC_MspInit+0x88>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <HAL_ADC_MspInit+0x88>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <HAL_ADC_MspInit+0x88>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <HAL_ADC_MspInit+0x88>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA0     ------> ADC2_IN1
    PA4     ------> ADC2_IN17
    */
    GPIO_InitStruct.Pin = Temp_in_analog_Pin|Throttle_in_analog_Pin;
 8000e32:	2311      	movs	r3, #17
 8000e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e36:	2303      	movs	r3, #3
 8000e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4619      	mov	r1, r3
 8000e44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e48:	f002 fd94 	bl	8003974 <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2012      	movs	r0, #18
 8000e52:	f002 faa8 	bl	80033a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e56:	2012      	movs	r0, #18
 8000e58:	f002 fabf 	bl	80033da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000e5c:	bf00      	nop
 8000e5e:	3728      	adds	r7, #40	; 0x28
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	50000100 	.word	0x50000100
 8000e68:	40021000 	.word	0x40021000

08000e6c <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 030c 	add.w	r3, r7, #12
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0f      	ldr	r2, [pc, #60]	; (8000ec8 <HAL_COMP_MspInit+0x5c>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d118      	bne.n	8000ec0 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <HAL_COMP_MspInit+0x60>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e92:	4a0e      	ldr	r2, [pc, #56]	; (8000ecc <HAL_COMP_MspInit+0x60>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <HAL_COMP_MspInit+0x60>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PA1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 030c 	add.w	r3, r7, #12
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ebc:	f002 fd5a 	bl	8003974 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8000ec0:	bf00      	nop
 8000ec2:	3720      	adds	r7, #32
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40010200 	.word	0x40010200
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a26      	ldr	r2, [pc, #152]	; (8000f88 <HAL_DAC_MspInit+0xb8>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d12d      	bne.n	8000f4e <HAL_DAC_MspInit+0x7e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000ef2:	4b26      	ldr	r3, [pc, #152]	; (8000f8c <HAL_DAC_MspInit+0xbc>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	4a25      	ldr	r2, [pc, #148]	; (8000f8c <HAL_DAC_MspInit+0xbc>)
 8000ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efe:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <HAL_DAC_MspInit+0xbc>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <HAL_DAC_MspInit+0xbc>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	4a1f      	ldr	r2, [pc, #124]	; (8000f8c <HAL_DAC_MspInit+0xbc>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f16:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <HAL_DAC_MspInit+0xbc>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = Temp_out_Pin;
 8000f22:	2320      	movs	r3, #32
 8000f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f26:	2303      	movs	r3, #3
 8000f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Temp_out_GPIO_Port, &GPIO_InitStruct);
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4619      	mov	r1, r3
 8000f34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f38:	f002 fd1c 	bl	8003974 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2100      	movs	r1, #0
 8000f40:	2036      	movs	r0, #54	; 0x36
 8000f42:	f002 fa30 	bl	80033a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f46:	2036      	movs	r0, #54	; 0x36
 8000f48:	f002 fa47 	bl	80033da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }

}
 8000f4c:	e018      	b.n	8000f80 <HAL_DAC_MspInit+0xb0>
  else if(hdac->Instance==DAC3)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a0f      	ldr	r2, [pc, #60]	; (8000f90 <HAL_DAC_MspInit+0xc0>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d113      	bne.n	8000f80 <HAL_DAC_MspInit+0xb0>
    __HAL_RCC_DAC3_CLK_ENABLE();
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <HAL_DAC_MspInit+0xbc>)
 8000f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5c:	4a0b      	ldr	r2, [pc, #44]	; (8000f8c <HAL_DAC_MspInit+0xbc>)
 8000f5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <HAL_DAC_MspInit+0xbc>)
 8000f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2100      	movs	r1, #0
 8000f74:	2036      	movs	r0, #54	; 0x36
 8000f76:	f002 fa16 	bl	80033a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f7a:	2036      	movs	r0, #54	; 0x36
 8000f7c:	f002 fa2d 	bl	80033da <HAL_NVIC_EnableIRQ>
}
 8000f80:	bf00      	nop
 8000f82:	3728      	adds	r7, #40	; 0x28
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	50000800 	.word	0x50000800
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	50001000 	.word	0x50001000

08000f94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a2c      	ldr	r2, [pc, #176]	; (8001054 <HAL_TIM_Base_MspInit+0xc0>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d10c      	bne.n	8000fc0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fa6:	4b2c      	ldr	r3, [pc, #176]	; (8001058 <HAL_TIM_Base_MspInit+0xc4>)
 8000fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000faa:	4a2b      	ldr	r2, [pc, #172]	; (8001058 <HAL_TIM_Base_MspInit+0xc4>)
 8000fac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fb0:	6613      	str	r3, [r2, #96]	; 0x60
 8000fb2:	4b29      	ldr	r3, [pc, #164]	; (8001058 <HAL_TIM_Base_MspInit+0xc4>)
 8000fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000fbe:	e044      	b.n	800104a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fc8:	d114      	bne.n	8000ff4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fca:	4b23      	ldr	r3, [pc, #140]	; (8001058 <HAL_TIM_Base_MspInit+0xc4>)
 8000fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fce:	4a22      	ldr	r2, [pc, #136]	; (8001058 <HAL_TIM_Base_MspInit+0xc4>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6593      	str	r3, [r2, #88]	; 0x58
 8000fd6:	4b20      	ldr	r3, [pc, #128]	; (8001058 <HAL_TIM_Base_MspInit+0xc4>)
 8000fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	201c      	movs	r0, #28
 8000fe8:	f002 f9dd 	bl	80033a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fec:	201c      	movs	r0, #28
 8000fee:	f002 f9f4 	bl	80033da <HAL_NVIC_EnableIRQ>
}
 8000ff2:	e02a      	b.n	800104a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a18      	ldr	r2, [pc, #96]	; (800105c <HAL_TIM_Base_MspInit+0xc8>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d10c      	bne.n	8001018 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ffe:	4b16      	ldr	r3, [pc, #88]	; (8001058 <HAL_TIM_Base_MspInit+0xc4>)
 8001000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001002:	4a15      	ldr	r2, [pc, #84]	; (8001058 <HAL_TIM_Base_MspInit+0xc4>)
 8001004:	f043 0304 	orr.w	r3, r3, #4
 8001008:	6593      	str	r3, [r2, #88]	; 0x58
 800100a:	4b13      	ldr	r3, [pc, #76]	; (8001058 <HAL_TIM_Base_MspInit+0xc4>)
 800100c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100e:	f003 0304 	and.w	r3, r3, #4
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
}
 8001016:	e018      	b.n	800104a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM6)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a10      	ldr	r2, [pc, #64]	; (8001060 <HAL_TIM_Base_MspInit+0xcc>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d113      	bne.n	800104a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001022:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <HAL_TIM_Base_MspInit+0xc4>)
 8001024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001026:	4a0c      	ldr	r2, [pc, #48]	; (8001058 <HAL_TIM_Base_MspInit+0xc4>)
 8001028:	f043 0310 	orr.w	r3, r3, #16
 800102c:	6593      	str	r3, [r2, #88]	; 0x58
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <HAL_TIM_Base_MspInit+0xc4>)
 8001030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001032:	f003 0310 	and.w	r3, r3, #16
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2100      	movs	r1, #0
 800103e:	2036      	movs	r0, #54	; 0x36
 8001040:	f002 f9b1 	bl	80033a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001044:	2036      	movs	r0, #54	; 0x36
 8001046:	f002 f9c8 	bl	80033da <HAL_NVIC_EnableIRQ>
}
 800104a:	bf00      	nop
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40012c00 	.word	0x40012c00
 8001058:	40021000 	.word	0x40021000
 800105c:	40000800 	.word	0x40000800
 8001060:	40001000 	.word	0x40001000

08001064 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a17      	ldr	r2, [pc, #92]	; (80010e0 <HAL_TIM_IC_MspInit+0x7c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d128      	bne.n	80010d8 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001086:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <HAL_TIM_IC_MspInit+0x80>)
 8001088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108a:	4a16      	ldr	r2, [pc, #88]	; (80010e4 <HAL_TIM_IC_MspInit+0x80>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	6593      	str	r3, [r2, #88]	; 0x58
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <HAL_TIM_IC_MspInit+0x80>)
 8001094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <HAL_TIM_IC_MspInit+0x80>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	4a10      	ldr	r2, [pc, #64]	; (80010e4 <HAL_TIM_IC_MspInit+0x80>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <HAL_TIM_IC_MspInit+0x80>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PAS_in_IC_Pin;
 80010b6:	2340      	movs	r3, #64	; 0x40
 80010b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010c6:	2302      	movs	r3, #2
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PAS_in_IC_GPIO_Port, &GPIO_InitStruct);
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d4:	f002 fc4e 	bl	8003974 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010d8:	bf00      	nop
 80010da:	3728      	adds	r7, #40	; 0x28
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40000400 	.word	0x40000400
 80010e4:	40021000 	.word	0x40021000

080010e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a12      	ldr	r2, [pc, #72]	; (8001150 <HAL_TIM_MspPostInit+0x68>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d11d      	bne.n	8001146 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_TIM_MspPostInit+0x6c>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	4a11      	ldr	r2, [pc, #68]	; (8001154 <HAL_TIM_MspPostInit+0x6c>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <HAL_TIM_MspPostInit+0x6c>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001122:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001126:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001134:	2306      	movs	r3, #6
 8001136:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	4619      	mov	r1, r3
 800113e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001142:	f002 fc17 	bl	8003974 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001146:	bf00      	nop
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40012c00 	.word	0x40012c00
 8001154:	40021000 	.word	0x40021000

08001158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800115c:	e7fe      	b.n	800115c <NMI_Handler+0x4>

0800115e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001162:	e7fe      	b.n	8001162 <HardFault_Handler+0x4>

08001164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <MemManage_Handler+0x4>

0800116a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800116e:	e7fe      	b.n	800116e <BusFault_Handler+0x4>

08001170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <UsageFault_Handler+0x4>

08001176 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a4:	f000 f8b8 	bl	8001318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}

080011ac <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <ADC1_2_IRQHandler+0x10>)
 80011b2:	f000 fe83 	bl	8001ebc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200000d8 	.word	0x200000d8

080011c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011c4:	4802      	ldr	r0, [pc, #8]	; (80011d0 <TIM2_IRQHandler+0x10>)
 80011c6:	f004 f8cb 	bl	8005360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	2000024c 	.word	0x2000024c

080011d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011d8:	4805      	ldr	r0, [pc, #20]	; (80011f0 <TIM6_DAC_IRQHandler+0x1c>)
 80011da:	f004 f8c1 	bl	8005360 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <TIM6_DAC_IRQHandler+0x20>)
 80011e0:	f002 f98a 	bl	80034f8 <HAL_DAC_IRQHandler>
  HAL_DAC_IRQHandler(&hdac3);
 80011e4:	4804      	ldr	r0, [pc, #16]	; (80011f8 <TIM6_DAC_IRQHandler+0x24>)
 80011e6:	f002 f987 	bl	80034f8 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200001b4 	.word	0x200001b4
 80011f4:	200000c4 	.word	0x200000c4
 80011f8:	20000064 	.word	0x20000064

080011fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <SystemInit+0x20>)
 8001202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001206:	4a05      	ldr	r2, [pc, #20]	; (800121c <SystemInit+0x20>)
 8001208:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800120c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8001220:	480d      	ldr	r0, [pc, #52]	; (8001258 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001222:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001224:	480d      	ldr	r0, [pc, #52]	; (800125c <LoopForever+0x6>)
  ldr r1, =_edata
 8001226:	490e      	ldr	r1, [pc, #56]	; (8001260 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001228:	4a0e      	ldr	r2, [pc, #56]	; (8001264 <LoopForever+0xe>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800122c:	e002      	b.n	8001234 <LoopCopyDataInit>

0800122e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800122e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001232:	3304      	adds	r3, #4

08001234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001238:	d3f9      	bcc.n	800122e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800123a:	4a0b      	ldr	r2, [pc, #44]	; (8001268 <LoopForever+0x12>)
  ldr r4, =_ebss
 800123c:	4c0b      	ldr	r4, [pc, #44]	; (800126c <LoopForever+0x16>)
  movs r3, #0
 800123e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001240:	e001      	b.n	8001246 <LoopFillZerobss>

08001242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001244:	3204      	adds	r2, #4

08001246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001248:	d3fb      	bcc.n	8001242 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800124a:	f7ff ffd7 	bl	80011fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800124e:	f005 fc69 	bl	8006b24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001252:	f7fe ffe1 	bl	8000218 <main>

08001256 <LoopForever>:

LoopForever:
    b LoopForever
 8001256:	e7fe      	b.n	8001256 <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8001258:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800125c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001260:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001264:	08006bac 	.word	0x08006bac
  ldr r2, =_sbss
 8001268:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800126c:	2000029c 	.word	0x2000029c

08001270 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001270:	e7fe      	b.n	8001270 <COMP1_2_3_IRQHandler>

08001272 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001278:	2300      	movs	r3, #0
 800127a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800127c:	2003      	movs	r0, #3
 800127e:	f002 f887 	bl	8003390 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001282:	2000      	movs	r0, #0
 8001284:	f000 f80e 	bl	80012a4 <HAL_InitTick>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d002      	beq.n	8001294 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	71fb      	strb	r3, [r7, #7]
 8001292:	e001      	b.n	8001298 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001294:	f7ff fd80 	bl	8000d98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001298:	79fb      	ldrb	r3, [r7, #7]

}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012ac:	2300      	movs	r3, #0
 80012ae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80012b0:	4b16      	ldr	r3, [pc, #88]	; (800130c <HAL_InitTick+0x68>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d022      	beq.n	80012fe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80012b8:	4b15      	ldr	r3, [pc, #84]	; (8001310 <HAL_InitTick+0x6c>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b13      	ldr	r3, [pc, #76]	; (800130c <HAL_InitTick+0x68>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80012c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012cc:	4618      	mov	r0, r3
 80012ce:	f002 f892 	bl	80033f6 <HAL_SYSTICK_Config>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d10f      	bne.n	80012f8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b0f      	cmp	r3, #15
 80012dc:	d809      	bhi.n	80012f2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012de:	2200      	movs	r2, #0
 80012e0:	6879      	ldr	r1, [r7, #4]
 80012e2:	f04f 30ff 	mov.w	r0, #4294967295
 80012e6:	f002 f85e 	bl	80033a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012ea:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <HAL_InitTick+0x70>)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	e007      	b.n	8001302 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	73fb      	strb	r3, [r7, #15]
 80012f6:	e004      	b.n	8001302 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	73fb      	strb	r3, [r7, #15]
 80012fc:	e001      	b.n	8001302 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001302:	7bfb      	ldrb	r3, [r7, #15]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	2000000c 	.word	0x2000000c
 8001310:	20000004 	.word	0x20000004
 8001314:	20000008 	.word	0x20000008

08001318 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <HAL_IncTick+0x1c>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <HAL_IncTick+0x20>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4413      	add	r3, r2
 8001326:	4a03      	ldr	r2, [pc, #12]	; (8001334 <HAL_IncTick+0x1c>)
 8001328:	6013      	str	r3, [r2, #0]
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	20000298 	.word	0x20000298
 8001338:	2000000c 	.word	0x2000000c

0800133c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return uwTick;
 8001340:	4b03      	ldr	r3, [pc, #12]	; (8001350 <HAL_GetTick+0x14>)
 8001342:	681b      	ldr	r3, [r3, #0]
}
 8001344:	4618      	mov	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20000298 	.word	0x20000298

08001354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800135c:	f7ff ffee 	bl	800133c <HAL_GetTick>
 8001360:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800136c:	d004      	beq.n	8001378 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <HAL_Delay+0x40>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	4413      	add	r3, r2
 8001376:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001378:	bf00      	nop
 800137a:	f7ff ffdf 	bl	800133c <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	68fa      	ldr	r2, [r7, #12]
 8001386:	429a      	cmp	r2, r3
 8001388:	d8f7      	bhi.n	800137a <HAL_Delay+0x26>
  {
  }
}
 800138a:	bf00      	nop
 800138c:	bf00      	nop
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	2000000c 	.word	0x2000000c

08001398 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	431a      	orrs	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	609a      	str	r2, [r3, #8]
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	431a      	orrs	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	609a      	str	r2, [r3, #8]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001400:	b480      	push	{r7}
 8001402:	b087      	sub	sp, #28
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
 800140c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	3360      	adds	r3, #96	; 0x60
 8001412:	461a      	mov	r2, r3
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <LL_ADC_SetOffset+0x44>)
 8001422:	4013      	ands	r3, r2
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	430a      	orrs	r2, r1
 800142e:	4313      	orrs	r3, r2
 8001430:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001438:	bf00      	nop
 800143a:	371c      	adds	r7, #28
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	03fff000 	.word	0x03fff000

08001448 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3360      	adds	r3, #96	; 0x60
 8001456:	461a      	mov	r2, r3
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4413      	add	r3, r2
 800145e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001468:	4618      	mov	r0, r3
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001474:	b480      	push	{r7}
 8001476:	b087      	sub	sp, #28
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	3360      	adds	r3, #96	; 0x60
 8001484:	461a      	mov	r2, r3
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	431a      	orrs	r2, r3
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800149e:	bf00      	nop
 80014a0:	371c      	adds	r7, #28
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b087      	sub	sp, #28
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	60f8      	str	r0, [r7, #12]
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	3360      	adds	r3, #96	; 0x60
 80014ba:	461a      	mov	r2, r3
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	431a      	orrs	r2, r3
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80014d4:	bf00      	nop
 80014d6:	371c      	adds	r7, #28
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b087      	sub	sp, #28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	3360      	adds	r3, #96	; 0x60
 80014f0:	461a      	mov	r2, r3
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	431a      	orrs	r2, r3
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800150a:	bf00      	nop
 800150c:	371c      	adds	r7, #28
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
 800151e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	431a      	orrs	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	615a      	str	r2, [r3, #20]
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800154c:	2b00      	cmp	r3, #0
 800154e:	d101      	bne.n	8001554 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001550:	2301      	movs	r3, #1
 8001552:	e000      	b.n	8001556 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001562:	b480      	push	{r7}
 8001564:	b087      	sub	sp, #28
 8001566:	af00      	add	r7, sp, #0
 8001568:	60f8      	str	r0, [r7, #12]
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	3330      	adds	r3, #48	; 0x30
 8001572:	461a      	mov	r2, r3
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	0a1b      	lsrs	r3, r3, #8
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	f003 030c 	and.w	r3, r3, #12
 800157e:	4413      	add	r3, r2
 8001580:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	f003 031f 	and.w	r3, r3, #31
 800158c:	211f      	movs	r1, #31
 800158e:	fa01 f303 	lsl.w	r3, r1, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	401a      	ands	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	0e9b      	lsrs	r3, r3, #26
 800159a:	f003 011f 	and.w	r1, r3, #31
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	f003 031f 	and.w	r3, r3, #31
 80015a4:	fa01 f303 	lsl.w	r3, r1, r3
 80015a8:	431a      	orrs	r2, r3
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80015ae:	bf00      	nop
 80015b0:	371c      	adds	r7, #28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80015ce:	2301      	movs	r3, #1
 80015d0:	e000      	b.n	80015d4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b087      	sub	sp, #28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	3314      	adds	r3, #20
 80015f0:	461a      	mov	r2, r3
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	0e5b      	lsrs	r3, r3, #25
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	4413      	add	r3, r2
 80015fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	0d1b      	lsrs	r3, r3, #20
 8001608:	f003 031f 	and.w	r3, r3, #31
 800160c:	2107      	movs	r1, #7
 800160e:	fa01 f303 	lsl.w	r3, r1, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	401a      	ands	r2, r3
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	0d1b      	lsrs	r3, r3, #20
 800161a:	f003 031f 	and.w	r3, r3, #31
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	fa01 f303 	lsl.w	r3, r1, r3
 8001624:	431a      	orrs	r2, r3
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800162a:	bf00      	nop
 800162c:	371c      	adds	r7, #28
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001650:	43db      	mvns	r3, r3
 8001652:	401a      	ands	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f003 0318 	and.w	r3, r3, #24
 800165a:	4908      	ldr	r1, [pc, #32]	; (800167c <LL_ADC_SetChannelSingleDiff+0x44>)
 800165c:	40d9      	lsrs	r1, r3
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	400b      	ands	r3, r1
 8001662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001666:	431a      	orrs	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	0007ffff 	.word	0x0007ffff

08001680 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f003 031f 	and.w	r3, r3, #31
}
 8001690:	4618      	mov	r0, r3
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80016c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	6093      	str	r3, [r2, #8]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016f0:	d101      	bne.n	80016f6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80016f2:	2301      	movs	r3, #1
 80016f4:	e000      	b.n	80016f8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001714:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001718:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001740:	d101      	bne.n	8001746 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001764:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001768:	f043 0201 	orr.w	r2, r3, #1
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800178c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001790:	f043 0202 	orr.w	r2, r3, #2
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d101      	bne.n	80017bc <LL_ADC_IsEnabled+0x18>
 80017b8:	2301      	movs	r3, #1
 80017ba:	e000      	b.n	80017be <LL_ADC_IsEnabled+0x1a>
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d101      	bne.n	80017e2 <LL_ADC_IsDisableOngoing+0x18>
 80017de:	2301      	movs	r3, #1
 80017e0:	e000      	b.n	80017e4 <LL_ADC_IsDisableOngoing+0x1a>
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001800:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001804:	f043 0204 	orr.w	r2, r3, #4
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001828:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800182c:	f043 0210 	orr.w	r2, r3, #16
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b04      	cmp	r3, #4
 8001852:	d101      	bne.n	8001858 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001854:	2301      	movs	r3, #1
 8001856:	e000      	b.n	800185a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001876:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800187a:	f043 0220 	orr.w	r2, r3, #32
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	2b08      	cmp	r3, #8
 80018a0:	d101      	bne.n	80018a6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80018a2:	2301      	movs	r3, #1
 80018a4:	e000      	b.n	80018a8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018b4:	b590      	push	{r4, r7, lr}
 80018b6:	b089      	sub	sp, #36	; 0x24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018bc:	2300      	movs	r3, #0
 80018be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e16d      	b.n	8001baa <HAL_ADC_Init+0x2f6>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d109      	bne.n	80018f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7ff fa7f 	bl	8000de0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fef1 	bl	80016dc <LL_ADC_IsDeepPowerDownEnabled>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d004      	beq.n	800190a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fed7 	bl	80016b8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff ff0c 	bl	800172c <LL_ADC_IsInternalRegulatorEnabled>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d115      	bne.n	8001946 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff fef0 	bl	8001704 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001924:	4ba3      	ldr	r3, [pc, #652]	; (8001bb4 <HAL_ADC_Init+0x300>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	099b      	lsrs	r3, r3, #6
 800192a:	4aa3      	ldr	r2, [pc, #652]	; (8001bb8 <HAL_ADC_Init+0x304>)
 800192c:	fba2 2303 	umull	r2, r3, r2, r3
 8001930:	099b      	lsrs	r3, r3, #6
 8001932:	3301      	adds	r3, #1
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001938:	e002      	b.n	8001940 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	3b01      	subs	r3, #1
 800193e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f9      	bne.n	800193a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff feee 	bl	800172c <LL_ADC_IsInternalRegulatorEnabled>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10d      	bne.n	8001972 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195a:	f043 0210 	orr.w	r2, r3, #16
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001966:	f043 0201 	orr.w	r2, r3, #1
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff ff62 	bl	8001840 <LL_ADC_REG_IsConversionOngoing>
 800197c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001982:	f003 0310 	and.w	r3, r3, #16
 8001986:	2b00      	cmp	r3, #0
 8001988:	f040 8106 	bne.w	8001b98 <HAL_ADC_Init+0x2e4>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	2b00      	cmp	r3, #0
 8001990:	f040 8102 	bne.w	8001b98 <HAL_ADC_Init+0x2e4>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001998:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800199c:	f043 0202 	orr.w	r2, r3, #2
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fefb 	bl	80017a4 <LL_ADC_IsEnabled>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d111      	bne.n	80019d8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019b4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80019b8:	f7ff fef4 	bl	80017a4 <LL_ADC_IsEnabled>
 80019bc:	4604      	mov	r4, r0
 80019be:	487f      	ldr	r0, [pc, #508]	; (8001bbc <HAL_ADC_Init+0x308>)
 80019c0:	f7ff fef0 	bl	80017a4 <LL_ADC_IsEnabled>
 80019c4:	4603      	mov	r3, r0
 80019c6:	4323      	orrs	r3, r4
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d105      	bne.n	80019d8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	4619      	mov	r1, r3
 80019d2:	487b      	ldr	r0, [pc, #492]	; (8001bc0 <HAL_ADC_Init+0x30c>)
 80019d4:	f7ff fce0 	bl	8001398 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	7f5b      	ldrb	r3, [r3, #29]
 80019dc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019e2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80019e8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80019ee:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019f6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019f8:	4313      	orrs	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d106      	bne.n	8001a14 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	045b      	lsls	r3, r3, #17
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d009      	beq.n	8001a30 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a20:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a28:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	4b63      	ldr	r3, [pc, #396]	; (8001bc4 <HAL_ADC_Init+0x310>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6812      	ldr	r2, [r2, #0]
 8001a3e:	69b9      	ldr	r1, [r7, #24]
 8001a40:	430b      	orrs	r3, r1
 8001a42:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff feee 	bl	8001840 <LL_ADC_REG_IsConversionOngoing>
 8001a64:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff ff0f 	bl	800188e <LL_ADC_INJ_IsConversionOngoing>
 8001a70:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d16d      	bne.n	8001b54 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d16a      	bne.n	8001b54 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a82:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a8a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a9a:	f023 0302 	bic.w	r3, r3, #2
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	6812      	ldr	r2, [r2, #0]
 8001aa2:	69b9      	ldr	r1, [r7, #24]
 8001aa4:	430b      	orrs	r3, r1
 8001aa6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d017      	beq.n	8001ae0 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	691a      	ldr	r2, [r3, #16]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001abe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ac8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001acc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	6911      	ldr	r1, [r2, #16]
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	430b      	orrs	r3, r1
 8001ada:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001ade:	e013      	b.n	8001b08 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	691a      	ldr	r2, [r3, #16]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001aee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	6812      	ldr	r2, [r2, #0]
 8001afc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b04:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d118      	bne.n	8001b44 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001b1c:	f023 0304 	bic.w	r3, r3, #4
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b28:	4311      	orrs	r1, r2
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001b2e:	4311      	orrs	r1, r2
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b34:	430a      	orrs	r2, r1
 8001b36:	431a      	orrs	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f042 0201 	orr.w	r2, r2, #1
 8001b40:	611a      	str	r2, [r3, #16]
 8001b42:	e007      	b.n	8001b54 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	691a      	ldr	r2, [r3, #16]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0201 	bic.w	r2, r2, #1
 8001b52:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d10c      	bne.n	8001b76 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f023 010f 	bic.w	r1, r3, #15
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a1b      	ldr	r3, [r3, #32]
 8001b6a:	1e5a      	subs	r2, r3, #1
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	631a      	str	r2, [r3, #48]	; 0x30
 8001b74:	e007      	b.n	8001b86 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 020f 	bic.w	r2, r2, #15
 8001b84:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8a:	f023 0303 	bic.w	r3, r3, #3
 8001b8e:	f043 0201 	orr.w	r2, r3, #1
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b96:	e007      	b.n	8001ba8 <HAL_ADC_Init+0x2f4>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b9c:	f043 0210 	orr.w	r2, r3, #16
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ba8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3724      	adds	r7, #36	; 0x24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd90      	pop	{r4, r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000004 	.word	0x20000004
 8001bb8:	053e2d63 	.word	0x053e2d63
 8001bbc:	50000100 	.word	0x50000100
 8001bc0:	50000300 	.word	0x50000300
 8001bc4:	fff04007 	.word	0xfff04007

08001bc8 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bd0:	4894      	ldr	r0, [pc, #592]	; (8001e24 <HAL_ADC_Start_IT+0x25c>)
 8001bd2:	f7ff fd55 	bl	8001680 <LL_ADC_GetMultimode>
 8001bd6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff fe2f 	bl	8001840 <LL_ADC_REG_IsConversionOngoing>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f040 8114 	bne.w	8001e12 <HAL_ADC_Start_IT+0x24a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d101      	bne.n	8001bf8 <HAL_ADC_Start_IT+0x30>
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	e111      	b.n	8001e1c <HAL_ADC_Start_IT+0x254>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f001 f835 	bl	8002c70 <ADC_Enable>
 8001c06:	4603      	mov	r3, r0
 8001c08:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001c0a:	7dfb      	ldrb	r3, [r7, #23]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f040 80fb 	bne.w	8001e08 <HAL_ADC_Start_IT+0x240>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c16:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c1a:	f023 0301 	bic.w	r3, r3, #1
 8001c1e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a7f      	ldr	r2, [pc, #508]	; (8001e28 <HAL_ADC_Start_IT+0x260>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d002      	beq.n	8001c36 <HAL_ADC_Start_IT+0x6e>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	e001      	b.n	8001c3a <HAL_ADC_Start_IT+0x72>
 8001c36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	6812      	ldr	r2, [r2, #0]
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d002      	beq.n	8001c48 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d105      	bne.n	8001c54 <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c4c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d006      	beq.n	8001c6e <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c64:	f023 0206 	bic.w	r2, r3, #6
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	661a      	str	r2, [r3, #96]	; 0x60
 8001c6c:	e002      	b.n	8001c74 <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	221c      	movs	r2, #28
 8001c7a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 021c 	bic.w	r2, r2, #28
 8001c92:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	d108      	bne.n	8001cae <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0208 	orr.w	r2, r2, #8
 8001caa:	605a      	str	r2, [r3, #4]
          break;
 8001cac:	e008      	b.n	8001cc0 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f042 0204 	orr.w	r2, r2, #4
 8001cbc:	605a      	str	r2, [r3, #4]
          break;
 8001cbe:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d107      	bne.n	8001cd8 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0210 	orr.w	r2, r2, #16
 8001cd6:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a52      	ldr	r2, [pc, #328]	; (8001e28 <HAL_ADC_Start_IT+0x260>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d002      	beq.n	8001ce8 <HAL_ADC_Start_IT+0x120>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	e001      	b.n	8001cec <HAL_ADC_Start_IT+0x124>
 8001ce8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	6812      	ldr	r2, [r2, #0]
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d008      	beq.n	8001d06 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d005      	beq.n	8001d06 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	2b05      	cmp	r3, #5
 8001cfe:	d002      	beq.n	8001d06 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	2b09      	cmp	r3, #9
 8001d04:	d13b      	bne.n	8001d7e <HAL_ADC_Start_IT+0x1b6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d02d      	beq.n	8001d70 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d18:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d1c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d110      	bne.n	8001d4e <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0220 	bic.w	r2, r2, #32
 8001d3a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d4a:	605a      	str	r2, [r3, #4]
              break;
 8001d4c:	e011      	b.n	8001d72 <HAL_ADC_Start_IT+0x1aa>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d5c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f042 0220 	orr.w	r2, r2, #32
 8001d6c:	605a      	str	r2, [r3, #4]
              break;
 8001d6e:	e000      	b.n	8001d72 <HAL_ADC_Start_IT+0x1aa>
          }
        }
 8001d70:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fd3a 	bl	80017f0 <LL_ADC_REG_StartConversion>
 8001d7c:	e04d      	b.n	8001e1a <HAL_ADC_Start_IT+0x252>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a26      	ldr	r2, [pc, #152]	; (8001e28 <HAL_ADC_Start_IT+0x260>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d002      	beq.n	8001d9a <HAL_ADC_Start_IT+0x1d2>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	e001      	b.n	8001d9e <HAL_ADC_Start_IT+0x1d6>
 8001d9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d9e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d035      	beq.n	8001e18 <HAL_ADC_Start_IT+0x250>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001db4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d110      	bne.n	8001de6 <HAL_ADC_Start_IT+0x21e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	685a      	ldr	r2, [r3, #4]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0220 	bic.w	r2, r2, #32
 8001dd2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001de2:	605a      	str	r2, [r3, #4]
              break;
 8001de4:	e019      	b.n	8001e1a <HAL_ADC_Start_IT+0x252>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001df4:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f042 0220 	orr.w	r2, r2, #32
 8001e04:	605a      	str	r2, [r3, #4]
              break;
 8001e06:	e008      	b.n	8001e1a <HAL_ADC_Start_IT+0x252>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001e10:	e003      	b.n	8001e1a <HAL_ADC_Start_IT+0x252>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e12:	2302      	movs	r3, #2
 8001e14:	75fb      	strb	r3, [r7, #23]
 8001e16:	e000      	b.n	8001e1a <HAL_ADC_Start_IT+0x252>
        }
 8001e18:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8001e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	50000300 	.word	0x50000300
 8001e28:	50000100 	.word	0x50000100

08001e2c <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d101      	bne.n	8001e42 <HAL_ADC_Stop_IT+0x16>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e02b      	b.n	8001e9a <HAL_ADC_Stop_IT+0x6e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001e4a:	2103      	movs	r1, #3
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 fe53 	bl	8002af8 <ADC_ConversionStop>
 8001e52:	4603      	mov	r3, r0
 8001e54:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d119      	bne.n	8001e90 <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 021c 	bic.w	r2, r2, #28
 8001e6a:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 ff61 	bl	8002d34 <ADC_Disable>
 8001e72:	4603      	mov	r3, r0
 8001e74:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d109      	bne.n	8001e90 <HAL_ADC_Stop_IT+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e80:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e84:	f023 0301 	bic.w	r3, r3, #1
 8001e88:	f043 0201 	orr.w	r2, r3, #1
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	; 0x28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ed8:	4883      	ldr	r0, [pc, #524]	; (80020e8 <HAL_ADC_IRQHandler+0x22c>)
 8001eda:	f7ff fbd1 	bl	8001680 <LL_ADC_GetMultimode>
 8001ede:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d017      	beq.n	8001f1a <HAL_ADC_IRQHandler+0x5e>
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d012      	beq.n	8001f1a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef8:	f003 0310 	and.w	r3, r3, #16
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d105      	bne.n	8001f0c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f04:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 ff98 	bl	8002e42 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2202      	movs	r2, #2
 8001f18:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d004      	beq.n	8001f2e <HAL_ADC_IRQHandler+0x72>
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10a      	bne.n	8001f44 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 8085 	beq.w	8002044 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	f003 0308 	and.w	r3, r3, #8
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d07f      	beq.n	8002044 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f48:	f003 0310 	and.w	r3, r3, #16
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d105      	bne.n	8001f5c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f54:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff faeb 	bl	800153c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d064      	beq.n	8002036 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a5e      	ldr	r2, [pc, #376]	; (80020ec <HAL_ADC_IRQHandler+0x230>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d002      	beq.n	8001f7c <HAL_ADC_IRQHandler+0xc0>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	e001      	b.n	8001f80 <HAL_ADC_IRQHandler+0xc4>
 8001f7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d008      	beq.n	8001f9a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d005      	beq.n	8001f9a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	2b05      	cmp	r3, #5
 8001f92:	d002      	beq.n	8001f9a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	2b09      	cmp	r3, #9
 8001f98:	d104      	bne.n	8001fa4 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	623b      	str	r3, [r7, #32]
 8001fa2:	e00d      	b.n	8001fc0 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a50      	ldr	r2, [pc, #320]	; (80020ec <HAL_ADC_IRQHandler+0x230>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d002      	beq.n	8001fb4 <HAL_ADC_IRQHandler+0xf8>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	e001      	b.n	8001fb8 <HAL_ADC_IRQHandler+0xfc>
 8001fb4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001fb8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
 8001fc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d135      	bne.n	8002036 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d12e      	bne.n	8002036 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff fc2f 	bl	8001840 <LL_ADC_REG_IsConversionOngoing>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d11a      	bne.n	800201e <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 020c 	bic.w	r2, r2, #12
 8001ff6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002008:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d112      	bne.n	8002036 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002014:	f043 0201 	orr.w	r2, r3, #1
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	65da      	str	r2, [r3, #92]	; 0x5c
 800201c:	e00b      	b.n	8002036 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002022:	f043 0210 	orr.w	r2, r3, #16
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800202e:	f043 0201 	orr.w	r2, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7fe fd8e 	bl	8000b58 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	220c      	movs	r2, #12
 8002042:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f003 0320 	and.w	r3, r3, #32
 800204a:	2b00      	cmp	r3, #0
 800204c:	d004      	beq.n	8002058 <HAL_ADC_IRQHandler+0x19c>
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	f003 0320 	and.w	r3, r3, #32
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10b      	bne.n	8002070 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 809e 	beq.w	80021a0 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206a:	2b00      	cmp	r3, #0
 800206c:	f000 8098 	beq.w	80021a0 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002074:	f003 0310 	and.w	r3, r3, #16
 8002078:	2b00      	cmp	r3, #0
 800207a:	d105      	bne.n	8002088 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002080:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff fa94 	bl	80015ba <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002092:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff fa4f 	bl	800153c <LL_ADC_REG_IsTriggerSourceSWStart>
 800209e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a11      	ldr	r2, [pc, #68]	; (80020ec <HAL_ADC_IRQHandler+0x230>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d002      	beq.n	80020b0 <HAL_ADC_IRQHandler+0x1f4>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	e001      	b.n	80020b4 <HAL_ADC_IRQHandler+0x1f8>
 80020b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d008      	beq.n	80020ce <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d005      	beq.n	80020ce <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	2b06      	cmp	r3, #6
 80020c6:	d002      	beq.n	80020ce <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	2b07      	cmp	r3, #7
 80020cc:	d104      	bne.n	80020d8 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	623b      	str	r3, [r7, #32]
 80020d6:	e011      	b.n	80020fc <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a03      	ldr	r2, [pc, #12]	; (80020ec <HAL_ADC_IRQHandler+0x230>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d006      	beq.n	80020f0 <HAL_ADC_IRQHandler+0x234>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	e005      	b.n	80020f4 <HAL_ADC_IRQHandler+0x238>
 80020e8:	50000300 	.word	0x50000300
 80020ec:	50000100 	.word	0x50000100
 80020f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020f4:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d047      	beq.n	8002192 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d007      	beq.n	800211c <HAL_ADC_IRQHandler+0x260>
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d03f      	beq.n	8002192 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002112:	6a3b      	ldr	r3, [r7, #32]
 8002114:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002118:	2b00      	cmp	r3, #0
 800211a:	d13a      	bne.n	8002192 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002126:	2b40      	cmp	r3, #64	; 0x40
 8002128:	d133      	bne.n	8002192 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800212a:	6a3b      	ldr	r3, [r7, #32]
 800212c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d12e      	bne.n	8002192 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fba8 	bl	800188e <LL_ADC_INJ_IsConversionOngoing>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d11a      	bne.n	800217a <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002152:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002158:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002168:	2b00      	cmp	r3, #0
 800216a:	d112      	bne.n	8002192 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002170:	f043 0201 	orr.w	r2, r3, #1
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	65da      	str	r2, [r3, #92]	; 0x5c
 8002178:	e00b      	b.n	8002192 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217e:	f043 0210 	orr.w	r2, r3, #16
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800218a:	f043 0201 	orr.w	r2, r3, #1
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 fe2d 	bl	8002df2 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2260      	movs	r2, #96	; 0x60
 800219e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d011      	beq.n	80021ce <HAL_ADC_IRQHandler+0x312>
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00c      	beq.n	80021ce <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 f895 	bl	80022f0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2280      	movs	r2, #128	; 0x80
 80021cc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d012      	beq.n	80021fe <HAL_ADC_IRQHandler+0x342>
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00d      	beq.n	80021fe <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 fe13 	bl	8002e1a <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021fc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002204:	2b00      	cmp	r3, #0
 8002206:	d012      	beq.n	800222e <HAL_ADC_IRQHandler+0x372>
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00d      	beq.n	800222e <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002216:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 fe05 	bl	8002e2e <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f44f 7200 	mov.w	r2, #512	; 0x200
 800222c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	f003 0310 	and.w	r3, r3, #16
 8002234:	2b00      	cmp	r3, #0
 8002236:	d036      	beq.n	80022a6 <HAL_ADC_IRQHandler+0x3ea>
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	2b00      	cmp	r3, #0
 8002240:	d031      	beq.n	80022a6 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002246:	2b00      	cmp	r3, #0
 8002248:	d102      	bne.n	8002250 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 800224a:	2301      	movs	r3, #1
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
 800224e:	e014      	b.n	800227a <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d008      	beq.n	8002268 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002256:	4825      	ldr	r0, [pc, #148]	; (80022ec <HAL_ADC_IRQHandler+0x430>)
 8002258:	f7ff fa20 	bl	800169c <LL_ADC_GetMultiDMATransfer>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00b      	beq.n	800227a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002262:	2301      	movs	r3, #1
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
 8002266:	e008      	b.n	800227a <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002276:	2301      	movs	r3, #1
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	2b01      	cmp	r3, #1
 800227e:	d10e      	bne.n	800229e <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002284:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002290:	f043 0202 	orr.w	r2, r3, #2
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 f833 	bl	8002304 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2210      	movs	r2, #16
 80022a4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d018      	beq.n	80022e2 <HAL_ADC_IRQHandler+0x426>
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d013      	beq.n	80022e2 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022be:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ca:	f043 0208 	orr.w	r2, r3, #8
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022da:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 fd92 	bl	8002e06 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80022e2:	bf00      	nop
 80022e4:	3728      	adds	r7, #40	; 0x28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	50000300 	.word	0x50000300

080022f0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b0b6      	sub	sp, #216	; 0xd8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002322:	2300      	movs	r3, #0
 8002324:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002328:	2300      	movs	r3, #0
 800232a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002332:	2b01      	cmp	r3, #1
 8002334:	d101      	bne.n	800233a <HAL_ADC_ConfigChannel+0x22>
 8002336:	2302      	movs	r3, #2
 8002338:	e3c8      	b.n	8002acc <HAL_ADC_ConfigChannel+0x7b4>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff fa7a 	bl	8001840 <LL_ADC_REG_IsConversionOngoing>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	f040 83ad 	bne.w	8002aae <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6818      	ldr	r0, [r3, #0]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	6859      	ldr	r1, [r3, #4]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	461a      	mov	r2, r3
 8002362:	f7ff f8fe 	bl	8001562 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fa68 	bl	8001840 <LL_ADC_REG_IsConversionOngoing>
 8002370:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff fa88 	bl	800188e <LL_ADC_INJ_IsConversionOngoing>
 800237e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002382:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002386:	2b00      	cmp	r3, #0
 8002388:	f040 81d9 	bne.w	800273e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800238c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002390:	2b00      	cmp	r3, #0
 8002392:	f040 81d4 	bne.w	800273e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800239e:	d10f      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6818      	ldr	r0, [r3, #0]
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2200      	movs	r2, #0
 80023aa:	4619      	mov	r1, r3
 80023ac:	f7ff f918 	bl	80015e0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff f8ac 	bl	8001516 <LL_ADC_SetSamplingTimeCommonConfig>
 80023be:	e00e      	b.n	80023de <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6818      	ldr	r0, [r3, #0]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	6819      	ldr	r1, [r3, #0]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	461a      	mov	r2, r3
 80023ce:	f7ff f907 	bl	80015e0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2100      	movs	r1, #0
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff f89c 	bl	8001516 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	695a      	ldr	r2, [r3, #20]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	08db      	lsrs	r3, r3, #3
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d022      	beq.n	8002446 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6818      	ldr	r0, [r3, #0]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	6919      	ldr	r1, [r3, #16]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002410:	f7fe fff6 	bl	8001400 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6818      	ldr	r0, [r3, #0]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	6919      	ldr	r1, [r3, #16]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	461a      	mov	r2, r3
 8002422:	f7ff f842 	bl	80014aa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6818      	ldr	r0, [r3, #0]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	6919      	ldr	r1, [r3, #16]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	7f1b      	ldrb	r3, [r3, #28]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d102      	bne.n	800243c <HAL_ADC_ConfigChannel+0x124>
 8002436:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800243a:	e000      	b.n	800243e <HAL_ADC_ConfigChannel+0x126>
 800243c:	2300      	movs	r3, #0
 800243e:	461a      	mov	r2, r3
 8002440:	f7ff f84e 	bl	80014e0 <LL_ADC_SetOffsetSaturation>
 8002444:	e17b      	b.n	800273e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2100      	movs	r1, #0
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe fffb 	bl	8001448 <LL_ADC_GetOffsetChannel>
 8002452:	4603      	mov	r3, r0
 8002454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10a      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x15a>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2100      	movs	r1, #0
 8002462:	4618      	mov	r0, r3
 8002464:	f7fe fff0 	bl	8001448 <LL_ADC_GetOffsetChannel>
 8002468:	4603      	mov	r3, r0
 800246a:	0e9b      	lsrs	r3, r3, #26
 800246c:	f003 021f 	and.w	r2, r3, #31
 8002470:	e01e      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x198>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2100      	movs	r1, #0
 8002478:	4618      	mov	r0, r3
 800247a:	f7fe ffe5 	bl	8001448 <LL_ADC_GetOffsetChannel>
 800247e:	4603      	mov	r3, r0
 8002480:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002484:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002488:	fa93 f3a3 	rbit	r3, r3
 800248c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002490:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002494:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002498:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80024a0:	2320      	movs	r3, #32
 80024a2:	e004      	b.n	80024ae <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80024a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024a8:	fab3 f383 	clz	r3, r3
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d105      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x1b0>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	0e9b      	lsrs	r3, r3, #26
 80024c2:	f003 031f 	and.w	r3, r3, #31
 80024c6:	e018      	b.n	80024fa <HAL_ADC_ConfigChannel+0x1e2>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80024d4:	fa93 f3a3 	rbit	r3, r3
 80024d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80024dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80024e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80024ec:	2320      	movs	r3, #32
 80024ee:	e004      	b.n	80024fa <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80024f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80024f4:	fab3 f383 	clz	r3, r3
 80024f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d106      	bne.n	800250c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2200      	movs	r2, #0
 8002504:	2100      	movs	r1, #0
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe ffb4 	bl	8001474 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2101      	movs	r1, #1
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe ff98 	bl	8001448 <LL_ADC_GetOffsetChannel>
 8002518:	4603      	mov	r3, r0
 800251a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10a      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x220>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2101      	movs	r1, #1
 8002528:	4618      	mov	r0, r3
 800252a:	f7fe ff8d 	bl	8001448 <LL_ADC_GetOffsetChannel>
 800252e:	4603      	mov	r3, r0
 8002530:	0e9b      	lsrs	r3, r3, #26
 8002532:	f003 021f 	and.w	r2, r3, #31
 8002536:	e01e      	b.n	8002576 <HAL_ADC_ConfigChannel+0x25e>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2101      	movs	r1, #1
 800253e:	4618      	mov	r0, r3
 8002540:	f7fe ff82 	bl	8001448 <LL_ADC_GetOffsetChannel>
 8002544:	4603      	mov	r3, r0
 8002546:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800254e:	fa93 f3a3 	rbit	r3, r3
 8002552:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002556:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800255a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800255e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002566:	2320      	movs	r3, #32
 8002568:	e004      	b.n	8002574 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800256a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800256e:	fab3 f383 	clz	r3, r3
 8002572:	b2db      	uxtb	r3, r3
 8002574:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800257e:	2b00      	cmp	r3, #0
 8002580:	d105      	bne.n	800258e <HAL_ADC_ConfigChannel+0x276>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	0e9b      	lsrs	r3, r3, #26
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	e018      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x2a8>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002596:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800259a:	fa93 f3a3 	rbit	r3, r3
 800259e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80025a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80025aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80025b2:	2320      	movs	r3, #32
 80025b4:	e004      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80025b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025ba:	fab3 f383 	clz	r3, r3
 80025be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d106      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2200      	movs	r2, #0
 80025ca:	2101      	movs	r1, #1
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fe ff51 	bl	8001474 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2102      	movs	r1, #2
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fe ff35 	bl	8001448 <LL_ADC_GetOffsetChannel>
 80025de:	4603      	mov	r3, r0
 80025e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10a      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x2e6>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2102      	movs	r1, #2
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fe ff2a 	bl	8001448 <LL_ADC_GetOffsetChannel>
 80025f4:	4603      	mov	r3, r0
 80025f6:	0e9b      	lsrs	r3, r3, #26
 80025f8:	f003 021f 	and.w	r2, r3, #31
 80025fc:	e01e      	b.n	800263c <HAL_ADC_ConfigChannel+0x324>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2102      	movs	r1, #2
 8002604:	4618      	mov	r0, r3
 8002606:	f7fe ff1f 	bl	8001448 <LL_ADC_GetOffsetChannel>
 800260a:	4603      	mov	r3, r0
 800260c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002614:	fa93 f3a3 	rbit	r3, r3
 8002618:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800261c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002620:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002624:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800262c:	2320      	movs	r3, #32
 800262e:	e004      	b.n	800263a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002630:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002634:	fab3 f383 	clz	r3, r3
 8002638:	b2db      	uxtb	r3, r3
 800263a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002644:	2b00      	cmp	r3, #0
 8002646:	d105      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x33c>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	0e9b      	lsrs	r3, r3, #26
 800264e:	f003 031f 	and.w	r3, r3, #31
 8002652:	e016      	b.n	8002682 <HAL_ADC_ConfigChannel+0x36a>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002660:	fa93 f3a3 	rbit	r3, r3
 8002664:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002666:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002668:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800266c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002674:	2320      	movs	r3, #32
 8002676:	e004      	b.n	8002682 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002678:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800267c:	fab3 f383 	clz	r3, r3
 8002680:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002682:	429a      	cmp	r2, r3
 8002684:	d106      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2200      	movs	r2, #0
 800268c:	2102      	movs	r1, #2
 800268e:	4618      	mov	r0, r3
 8002690:	f7fe fef0 	bl	8001474 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2103      	movs	r1, #3
 800269a:	4618      	mov	r0, r3
 800269c:	f7fe fed4 	bl	8001448 <LL_ADC_GetOffsetChannel>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10a      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x3a8>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2103      	movs	r1, #3
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7fe fec9 	bl	8001448 <LL_ADC_GetOffsetChannel>
 80026b6:	4603      	mov	r3, r0
 80026b8:	0e9b      	lsrs	r3, r3, #26
 80026ba:	f003 021f 	and.w	r2, r3, #31
 80026be:	e017      	b.n	80026f0 <HAL_ADC_ConfigChannel+0x3d8>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2103      	movs	r1, #3
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fe febe 	bl	8001448 <LL_ADC_GetOffsetChannel>
 80026cc:	4603      	mov	r3, r0
 80026ce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026d2:	fa93 f3a3 	rbit	r3, r3
 80026d6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80026d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026da:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80026dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80026e2:	2320      	movs	r3, #32
 80026e4:	e003      	b.n	80026ee <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80026e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026e8:	fab3 f383 	clz	r3, r3
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d105      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x3f0>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	0e9b      	lsrs	r3, r3, #26
 8002702:	f003 031f 	and.w	r3, r3, #31
 8002706:	e011      	b.n	800272c <HAL_ADC_ConfigChannel+0x414>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002710:	fa93 f3a3 	rbit	r3, r3
 8002714:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002716:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002718:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800271a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002720:	2320      	movs	r3, #32
 8002722:	e003      	b.n	800272c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002726:	fab3 f383 	clz	r3, r3
 800272a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800272c:	429a      	cmp	r2, r3
 800272e:	d106      	bne.n	800273e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2200      	movs	r2, #0
 8002736:	2103      	movs	r1, #3
 8002738:	4618      	mov	r0, r3
 800273a:	f7fe fe9b 	bl	8001474 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff f82e 	bl	80017a4 <LL_ADC_IsEnabled>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	f040 8140 	bne.w	80029d0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6818      	ldr	r0, [r3, #0]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	6819      	ldr	r1, [r3, #0]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	461a      	mov	r2, r3
 800275e:	f7fe ff6b 	bl	8001638 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	4a8f      	ldr	r2, [pc, #572]	; (80029a4 <HAL_ADC_ConfigChannel+0x68c>)
 8002768:	4293      	cmp	r3, r2
 800276a:	f040 8131 	bne.w	80029d0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10b      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x47e>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	0e9b      	lsrs	r3, r3, #26
 8002784:	3301      	adds	r3, #1
 8002786:	f003 031f 	and.w	r3, r3, #31
 800278a:	2b09      	cmp	r3, #9
 800278c:	bf94      	ite	ls
 800278e:	2301      	movls	r3, #1
 8002790:	2300      	movhi	r3, #0
 8002792:	b2db      	uxtb	r3, r3
 8002794:	e019      	b.n	80027ca <HAL_ADC_ConfigChannel+0x4b2>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800279e:	fa93 f3a3 	rbit	r3, r3
 80027a2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80027a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027a6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80027a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80027ae:	2320      	movs	r3, #32
 80027b0:	e003      	b.n	80027ba <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80027b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027b4:	fab3 f383 	clz	r3, r3
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	3301      	adds	r3, #1
 80027bc:	f003 031f 	and.w	r3, r3, #31
 80027c0:	2b09      	cmp	r3, #9
 80027c2:	bf94      	ite	ls
 80027c4:	2301      	movls	r3, #1
 80027c6:	2300      	movhi	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d079      	beq.n	80028c2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d107      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x4d2>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	0e9b      	lsrs	r3, r3, #26
 80027e0:	3301      	adds	r3, #1
 80027e2:	069b      	lsls	r3, r3, #26
 80027e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027e8:	e015      	b.n	8002816 <HAL_ADC_ConfigChannel+0x4fe>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027f2:	fa93 f3a3 	rbit	r3, r3
 80027f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80027f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027fa:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80027fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002802:	2320      	movs	r3, #32
 8002804:	e003      	b.n	800280e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002808:	fab3 f383 	clz	r3, r3
 800280c:	b2db      	uxtb	r3, r3
 800280e:	3301      	adds	r3, #1
 8002810:	069b      	lsls	r3, r3, #26
 8002812:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800281e:	2b00      	cmp	r3, #0
 8002820:	d109      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x51e>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	0e9b      	lsrs	r3, r3, #26
 8002828:	3301      	adds	r3, #1
 800282a:	f003 031f 	and.w	r3, r3, #31
 800282e:	2101      	movs	r1, #1
 8002830:	fa01 f303 	lsl.w	r3, r1, r3
 8002834:	e017      	b.n	8002866 <HAL_ADC_ConfigChannel+0x54e>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800283e:	fa93 f3a3 	rbit	r3, r3
 8002842:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002846:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800284e:	2320      	movs	r3, #32
 8002850:	e003      	b.n	800285a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002854:	fab3 f383 	clz	r3, r3
 8002858:	b2db      	uxtb	r3, r3
 800285a:	3301      	adds	r3, #1
 800285c:	f003 031f 	and.w	r3, r3, #31
 8002860:	2101      	movs	r1, #1
 8002862:	fa01 f303 	lsl.w	r3, r1, r3
 8002866:	ea42 0103 	orr.w	r1, r2, r3
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10a      	bne.n	800288c <HAL_ADC_ConfigChannel+0x574>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	0e9b      	lsrs	r3, r3, #26
 800287c:	3301      	adds	r3, #1
 800287e:	f003 021f 	and.w	r2, r3, #31
 8002882:	4613      	mov	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4413      	add	r3, r2
 8002888:	051b      	lsls	r3, r3, #20
 800288a:	e018      	b.n	80028be <HAL_ADC_ConfigChannel+0x5a6>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002894:	fa93 f3a3 	rbit	r3, r3
 8002898:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800289a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800289c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800289e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80028a4:	2320      	movs	r3, #32
 80028a6:	e003      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80028a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028aa:	fab3 f383 	clz	r3, r3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	3301      	adds	r3, #1
 80028b2:	f003 021f 	and.w	r2, r3, #31
 80028b6:	4613      	mov	r3, r2
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	4413      	add	r3, r2
 80028bc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028be:	430b      	orrs	r3, r1
 80028c0:	e081      	b.n	80029c6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d107      	bne.n	80028de <HAL_ADC_ConfigChannel+0x5c6>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	0e9b      	lsrs	r3, r3, #26
 80028d4:	3301      	adds	r3, #1
 80028d6:	069b      	lsls	r3, r3, #26
 80028d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028dc:	e015      	b.n	800290a <HAL_ADC_ConfigChannel+0x5f2>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80028ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ee:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80028f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80028f6:	2320      	movs	r3, #32
 80028f8:	e003      	b.n	8002902 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80028fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fc:	fab3 f383 	clz	r3, r3
 8002900:	b2db      	uxtb	r3, r3
 8002902:	3301      	adds	r3, #1
 8002904:	069b      	lsls	r3, r3, #26
 8002906:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002912:	2b00      	cmp	r3, #0
 8002914:	d109      	bne.n	800292a <HAL_ADC_ConfigChannel+0x612>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	0e9b      	lsrs	r3, r3, #26
 800291c:	3301      	adds	r3, #1
 800291e:	f003 031f 	and.w	r3, r3, #31
 8002922:	2101      	movs	r1, #1
 8002924:	fa01 f303 	lsl.w	r3, r1, r3
 8002928:	e017      	b.n	800295a <HAL_ADC_ConfigChannel+0x642>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002930:	6a3b      	ldr	r3, [r7, #32]
 8002932:	fa93 f3a3 	rbit	r3, r3
 8002936:	61fb      	str	r3, [r7, #28]
  return result;
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002942:	2320      	movs	r3, #32
 8002944:	e003      	b.n	800294e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	fab3 f383 	clz	r3, r3
 800294c:	b2db      	uxtb	r3, r3
 800294e:	3301      	adds	r3, #1
 8002950:	f003 031f 	and.w	r3, r3, #31
 8002954:	2101      	movs	r1, #1
 8002956:	fa01 f303 	lsl.w	r3, r1, r3
 800295a:	ea42 0103 	orr.w	r1, r2, r3
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10d      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x66e>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	0e9b      	lsrs	r3, r3, #26
 8002970:	3301      	adds	r3, #1
 8002972:	f003 021f 	and.w	r2, r3, #31
 8002976:	4613      	mov	r3, r2
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	4413      	add	r3, r2
 800297c:	3b1e      	subs	r3, #30
 800297e:	051b      	lsls	r3, r3, #20
 8002980:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002984:	e01e      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x6ac>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	fa93 f3a3 	rbit	r3, r3
 8002992:	613b      	str	r3, [r7, #16]
  return result;
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d104      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800299e:	2320      	movs	r3, #32
 80029a0:	e006      	b.n	80029b0 <HAL_ADC_ConfigChannel+0x698>
 80029a2:	bf00      	nop
 80029a4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	fab3 f383 	clz	r3, r3
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	3301      	adds	r3, #1
 80029b2:	f003 021f 	and.w	r2, r3, #31
 80029b6:	4613      	mov	r3, r2
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	4413      	add	r3, r2
 80029bc:	3b1e      	subs	r3, #30
 80029be:	051b      	lsls	r3, r3, #20
 80029c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029c4:	430b      	orrs	r3, r1
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	6892      	ldr	r2, [r2, #8]
 80029ca:	4619      	mov	r1, r3
 80029cc:	f7fe fe08 	bl	80015e0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	4b3f      	ldr	r3, [pc, #252]	; (8002ad4 <HAL_ADC_ConfigChannel+0x7bc>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d071      	beq.n	8002ac0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029dc:	483e      	ldr	r0, [pc, #248]	; (8002ad8 <HAL_ADC_ConfigChannel+0x7c0>)
 80029de:	f7fe fd01 	bl	80013e4 <LL_ADC_GetCommonPathInternalCh>
 80029e2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a3c      	ldr	r2, [pc, #240]	; (8002adc <HAL_ADC_ConfigChannel+0x7c4>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d004      	beq.n	80029fa <HAL_ADC_ConfigChannel+0x6e2>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a3a      	ldr	r2, [pc, #232]	; (8002ae0 <HAL_ADC_ConfigChannel+0x7c8>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d127      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d121      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a0e:	d157      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a18:	4619      	mov	r1, r3
 8002a1a:	482f      	ldr	r0, [pc, #188]	; (8002ad8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a1c:	f7fe fccf 	bl	80013be <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a20:	4b30      	ldr	r3, [pc, #192]	; (8002ae4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	099b      	lsrs	r3, r3, #6
 8002a26:	4a30      	ldr	r2, [pc, #192]	; (8002ae8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002a28:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2c:	099b      	lsrs	r3, r3, #6
 8002a2e:	1c5a      	adds	r2, r3, #1
 8002a30:	4613      	mov	r3, r2
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	4413      	add	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a3a:	e002      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1f9      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a48:	e03a      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a27      	ldr	r2, [pc, #156]	; (8002aec <HAL_ADC_ConfigChannel+0x7d4>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d113      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x764>
 8002a54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10d      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a22      	ldr	r2, [pc, #136]	; (8002af0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d02a      	beq.n	8002ac0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a72:	4619      	mov	r1, r3
 8002a74:	4818      	ldr	r0, [pc, #96]	; (8002ad8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a76:	f7fe fca2 	bl	80013be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a7a:	e021      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a1c      	ldr	r2, [pc, #112]	; (8002af4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d11c      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d116      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a16      	ldr	r2, [pc, #88]	; (8002af0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d011      	beq.n	8002ac0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002aa0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	480c      	ldr	r0, [pc, #48]	; (8002ad8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002aa8:	f7fe fc89 	bl	80013be <LL_ADC_SetCommonPathInternalCh>
 8002aac:	e008      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab2:	f043 0220 	orr.w	r2, r3, #32
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ac8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	37d8      	adds	r7, #216	; 0xd8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	80080000 	.word	0x80080000
 8002ad8:	50000300 	.word	0x50000300
 8002adc:	c3210000 	.word	0xc3210000
 8002ae0:	90c00010 	.word	0x90c00010
 8002ae4:	20000004 	.word	0x20000004
 8002ae8:	053e2d63 	.word	0x053e2d63
 8002aec:	c7520000 	.word	0xc7520000
 8002af0:	50000100 	.word	0x50000100
 8002af4:	cb840000 	.word	0xcb840000

08002af8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fe fe96 	bl	8001840 <LL_ADC_REG_IsConversionOngoing>
 8002b14:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7fe feb7 	bl	800188e <LL_ADC_INJ_IsConversionOngoing>
 8002b20:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d103      	bne.n	8002b30 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 8098 	beq.w	8002c60 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d02a      	beq.n	8002b94 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	7f5b      	ldrb	r3, [r3, #29]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d126      	bne.n	8002b94 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	7f1b      	ldrb	r3, [r3, #28]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d122      	bne.n	8002b94 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002b52:	e014      	b.n	8002b7e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	4a45      	ldr	r2, [pc, #276]	; (8002c6c <ADC_ConversionStop+0x174>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d90d      	bls.n	8002b78 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b60:	f043 0210 	orr.w	r2, r3, #16
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b6c:	f043 0201 	orr.w	r2, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e074      	b.n	8002c62 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b88:	2b40      	cmp	r3, #64	; 0x40
 8002b8a:	d1e3      	bne.n	8002b54 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2240      	movs	r2, #64	; 0x40
 8002b92:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d014      	beq.n	8002bc4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fe fe4e 	bl	8001840 <LL_ADC_REG_IsConversionOngoing>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00c      	beq.n	8002bc4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fe fe0b 	bl	80017ca <LL_ADC_IsDisableOngoing>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d104      	bne.n	8002bc4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe fe2a 	bl	8001818 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d014      	beq.n	8002bf4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fe fe5d 	bl	800188e <LL_ADC_INJ_IsConversionOngoing>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00c      	beq.n	8002bf4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fe fdf3 	bl	80017ca <LL_ADC_IsDisableOngoing>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d104      	bne.n	8002bf4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fe fe39 	bl	8001866 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d005      	beq.n	8002c06 <ADC_ConversionStop+0x10e>
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d105      	bne.n	8002c0c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002c00:	230c      	movs	r3, #12
 8002c02:	617b      	str	r3, [r7, #20]
        break;
 8002c04:	e005      	b.n	8002c12 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002c06:	2308      	movs	r3, #8
 8002c08:	617b      	str	r3, [r7, #20]
        break;
 8002c0a:	e002      	b.n	8002c12 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002c0c:	2304      	movs	r3, #4
 8002c0e:	617b      	str	r3, [r7, #20]
        break;
 8002c10:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002c12:	f7fe fb93 	bl	800133c <HAL_GetTick>
 8002c16:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002c18:	e01b      	b.n	8002c52 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002c1a:	f7fe fb8f 	bl	800133c <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b05      	cmp	r3, #5
 8002c26:	d914      	bls.n	8002c52 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	4013      	ands	r3, r2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00d      	beq.n	8002c52 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3a:	f043 0210 	orr.w	r2, r3, #16
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c46:	f043 0201 	orr.w	r2, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e007      	b.n	8002c62 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1dc      	bne.n	8002c1a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3720      	adds	r7, #32
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	a33fffff 	.word	0xa33fffff

08002c70 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fe fd91 	bl	80017a4 <LL_ADC_IsEnabled>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d14d      	bne.n	8002d24 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	4b28      	ldr	r3, [pc, #160]	; (8002d30 <ADC_Enable+0xc0>)
 8002c90:	4013      	ands	r3, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00d      	beq.n	8002cb2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9a:	f043 0210 	orr.w	r2, r3, #16
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca6:	f043 0201 	orr.w	r2, r3, #1
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e039      	b.n	8002d26 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fe fd4c 	bl	8001754 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002cbc:	f7fe fb3e 	bl	800133c <HAL_GetTick>
 8002cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cc2:	e028      	b.n	8002d16 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fe fd6b 	bl	80017a4 <LL_ADC_IsEnabled>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d104      	bne.n	8002cde <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fe fd3b 	bl	8001754 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cde:	f7fe fb2d 	bl	800133c <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d914      	bls.n	8002d16 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d00d      	beq.n	8002d16 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfe:	f043 0210 	orr.w	r2, r3, #16
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d0a:	f043 0201 	orr.w	r2, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e007      	b.n	8002d26 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d1cf      	bne.n	8002cc4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	8000003f 	.word	0x8000003f

08002d34 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fe fd42 	bl	80017ca <LL_ADC_IsDisableOngoing>
 8002d46:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7fe fd29 	bl	80017a4 <LL_ADC_IsEnabled>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d047      	beq.n	8002de8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d144      	bne.n	8002de8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 030d 	and.w	r3, r3, #13
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d10c      	bne.n	8002d86 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fe fd03 	bl	800177c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d7e:	f7fe fadd 	bl	800133c <HAL_GetTick>
 8002d82:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d84:	e029      	b.n	8002dda <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8a:	f043 0210 	orr.w	r2, r3, #16
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d96:	f043 0201 	orr.w	r2, r3, #1
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e023      	b.n	8002dea <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002da2:	f7fe facb 	bl	800133c <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d914      	bls.n	8002dda <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00d      	beq.n	8002dda <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc2:	f043 0210 	orr.w	r2, r3, #16
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dce:	f043 0201 	orr.w	r2, r3, #1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e007      	b.n	8002dea <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1dc      	bne.n	8002da2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
	...

08002e58 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002e60:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <LL_EXTI_EnableIT_0_31+0x20>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	4904      	ldr	r1, [pc, #16]	; (8002e78 <LL_EXTI_EnableIT_0_31+0x20>)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	600b      	str	r3, [r1, #0]
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	40010400 	.word	0x40010400

08002e7c <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002e84:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <LL_EXTI_DisableIT_0_31+0x24>)
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	4904      	ldr	r1, [pc, #16]	; (8002ea0 <LL_EXTI_DisableIT_0_31+0x24>)
 8002e8e:	4013      	ands	r3, r2
 8002e90:	600b      	str	r3, [r1, #0]
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40010400 	.word	0x40010400

08002ea4 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002eac:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	4904      	ldr	r1, [pc, #16]	; (8002ec4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	604b      	str	r3, [r1, #4]

}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	40010400 	.word	0x40010400

08002ec8 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002ed0:	4b06      	ldr	r3, [pc, #24]	; (8002eec <LL_EXTI_DisableEvent_0_31+0x24>)
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	4904      	ldr	r1, [pc, #16]	; (8002eec <LL_EXTI_DisableEvent_0_31+0x24>)
 8002eda:	4013      	ands	r3, r2
 8002edc:	604b      	str	r3, [r1, #4]
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40010400 	.word	0x40010400

08002ef0 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002ef8:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	4904      	ldr	r1, [pc, #16]	; (8002f10 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	608b      	str	r3, [r1, #8]

}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	40010400 	.word	0x40010400

08002f14 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002f1c:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	43db      	mvns	r3, r3
 8002f24:	4904      	ldr	r1, [pc, #16]	; (8002f38 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	608b      	str	r3, [r1, #8]

}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	40010400 	.word	0x40010400

08002f3c <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002f44:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	4904      	ldr	r1, [pc, #16]	; (8002f5c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	60cb      	str	r3, [r1, #12]
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	40010400 	.word	0x40010400

08002f60 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002f68:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002f6a:	68da      	ldr	r2, [r3, #12]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	4904      	ldr	r1, [pc, #16]	; (8002f84 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002f72:	4013      	ands	r3, r2
 8002f74:	60cb      	str	r3, [r1, #12]
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40010400 	.word	0x40010400

08002f88 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002f90:	4a04      	ldr	r2, [pc, #16]	; (8002fa4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6153      	str	r3, [r2, #20]
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	40010400 	.word	0x40010400

08002fa8 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b088      	sub	sp, #32
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d102      	bne.n	8002fc4 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	77fb      	strb	r3, [r7, #31]
 8002fc2:	e0bb      	b.n	800313c <HAL_COMP_Init+0x194>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fd2:	d102      	bne.n	8002fda <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	77fb      	strb	r3, [r7, #31]
 8002fd8:	e0b0      	b.n	800313c <HAL_COMP_Init+0x194>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	7f5b      	ldrb	r3, [r3, #29]
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d108      	bne.n	8002ff6 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7fd ff3b 	bl	8000e6c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003000:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 800301c:	4313      	orrs	r3, r2
 800301e:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	4b48      	ldr	r3, [pc, #288]	; (8003148 <HAL_COMP_Init+0x1a0>)
 8003028:	4013      	ands	r3, r2
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	6979      	ldr	r1, [r7, #20]
 8003030:	430b      	orrs	r3, r1
 8003032:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d015      	beq.n	800306e <HAL_COMP_Init+0xc6>
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d112      	bne.n	800306e <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003048:	4b40      	ldr	r3, [pc, #256]	; (800314c <HAL_COMP_Init+0x1a4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	099b      	lsrs	r3, r3, #6
 800304e:	4a40      	ldr	r2, [pc, #256]	; (8003150 <HAL_COMP_Init+0x1a8>)
 8003050:	fba2 2303 	umull	r2, r3, r2, r3
 8003054:	099a      	lsrs	r2, r3, #6
 8003056:	4613      	mov	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003060:	e002      	b.n	8003068 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	3b01      	subs	r3, #1
 8003066:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1f9      	bne.n	8003062 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a38      	ldr	r2, [pc, #224]	; (8003154 <HAL_COMP_Init+0x1ac>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d012      	beq.n	800309e <HAL_COMP_Init+0xf6>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a36      	ldr	r2, [pc, #216]	; (8003158 <HAL_COMP_Init+0x1b0>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d00a      	beq.n	8003098 <HAL_COMP_Init+0xf0>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a35      	ldr	r2, [pc, #212]	; (800315c <HAL_COMP_Init+0x1b4>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d102      	bne.n	8003092 <HAL_COMP_Init+0xea>
 800308c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003090:	e007      	b.n	80030a2 <HAL_COMP_Init+0xfa>
 8003092:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003096:	e004      	b.n	80030a2 <HAL_COMP_Init+0xfa>
 8003098:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800309c:	e001      	b.n	80030a2 <HAL_COMP_Init+0xfa>
 800309e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030a2:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	f003 0303 	and.w	r3, r3, #3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d037      	beq.n	8003120 <HAL_COMP_Init+0x178>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	f003 0310 	and.w	r3, r3, #16
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <HAL_COMP_Init+0x11c>
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80030bc:	6938      	ldr	r0, [r7, #16]
 80030be:	f7ff ff17 	bl	8002ef0 <LL_EXTI_EnableRisingTrig_0_31>
 80030c2:	e002      	b.n	80030ca <HAL_COMP_Init+0x122>
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80030c4:	6938      	ldr	r0, [r7, #16]
 80030c6:	f7ff ff25 	bl	8002f14 <LL_EXTI_DisableRisingTrig_0_31>
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_COMP_Init+0x136>
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80030d6:	6938      	ldr	r0, [r7, #16]
 80030d8:	f7ff ff30 	bl	8002f3c <LL_EXTI_EnableFallingTrig_0_31>
 80030dc:	e002      	b.n	80030e4 <HAL_COMP_Init+0x13c>
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80030de:	6938      	ldr	r0, [r7, #16]
 80030e0:	f7ff ff3e 	bl	8002f60 <LL_EXTI_DisableFallingTrig_0_31>
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
      }
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
 80030e4:	6938      	ldr	r0, [r7, #16]
 80030e6:	f7ff ff4f 	bl	8002f88 <LL_EXTI_ClearFlag_0_31>
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_COMP_Init+0x156>
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_EnableEvent_0_31(exti_line);
 80030f6:	6938      	ldr	r0, [r7, #16]
 80030f8:	f7ff fed4 	bl	8002ea4 <LL_EXTI_EnableEvent_0_31>
 80030fc:	e002      	b.n	8003104 <HAL_COMP_Init+0x15c>
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_DisableEvent_0_31(exti_line);
 80030fe:	6938      	ldr	r0, [r7, #16]
 8003100:	f7ff fee2 	bl	8002ec8 <LL_EXTI_DisableEvent_0_31>
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_COMP_Init+0x170>
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
        }
#else
        LL_EXTI_EnableIT_0_31(exti_line);
 8003110:	6938      	ldr	r0, [r7, #16]
 8003112:	f7ff fea1 	bl	8002e58 <LL_EXTI_EnableIT_0_31>
 8003116:	e009      	b.n	800312c <HAL_COMP_Init+0x184>
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
        }
#else
        LL_EXTI_DisableIT_0_31(exti_line);
 8003118:	6938      	ldr	r0, [r7, #16]
 800311a:	f7ff feaf 	bl	8002e7c <LL_EXTI_DisableIT_0_31>
 800311e:	e005      	b.n	800312c <HAL_COMP_Init+0x184>
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
      }
#else
      LL_EXTI_DisableEvent_0_31(exti_line);
 8003120:	6938      	ldr	r0, [r7, #16]
 8003122:	f7ff fed1 	bl	8002ec8 <LL_EXTI_DisableEvent_0_31>
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
      }
#else
      LL_EXTI_DisableIT_0_31(exti_line);
 8003126:	6938      	ldr	r0, [r7, #16]
 8003128:	f7ff fea8 	bl	8002e7c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	7f5b      	ldrb	r3, [r3, #29]
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d102      	bne.n	800313c <HAL_COMP_Init+0x194>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800313c:	7ffb      	ldrb	r3, [r7, #31]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3720      	adds	r7, #32
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	ff007e0f 	.word	0xff007e0f
 800314c:	20000004 	.word	0x20000004
 8003150:	053e2d63 	.word	0x053e2d63
 8003154:	40010200 	.word	0x40010200
 8003158:	40010204 	.word	0x40010204
 800315c:	40010208 	.word	0x40010208

08003160 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8003168:	2300      	movs	r3, #0
 800316a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800316c:	2300      	movs	r3, #0
 800316e:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d102      	bne.n	800317c <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	73fb      	strb	r3, [r7, #15]
 800317a:	e02e      	b.n	80031da <HAL_COMP_Start+0x7a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003186:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800318a:	d102      	bne.n	8003192 <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	73fb      	strb	r3, [r7, #15]
 8003190:	e023      	b.n	80031da <HAL_COMP_Start+0x7a>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	7f5b      	ldrb	r3, [r3, #29]
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b01      	cmp	r3, #1
 800319a:	d11c      	bne.n	80031d6 <HAL_COMP_Start+0x76>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	775a      	strb	r2, [r3, #29]
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */
      /* Note: In case of system low frequency (below 1Mhz), short delay      */
      /*       of startup time (few us) is within CPU processing cycles       */
      /*       of following instructions.                                     */
      wait_loop_index = (COMP_DELAY_STARTUP_US * (SystemCoreClock / (1000000UL * 2UL)));
 80031b2:	4b0d      	ldr	r3, [pc, #52]	; (80031e8 <HAL_COMP_Start+0x88>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a0d      	ldr	r2, [pc, #52]	; (80031ec <HAL_COMP_Start+0x8c>)
 80031b8:	fba2 2303 	umull	r2, r3, r2, r3
 80031bc:	0cda      	lsrs	r2, r3, #19
 80031be:	4613      	mov	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4413      	add	r3, r2
 80031c4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80031c6:	e002      	b.n	80031ce <HAL_COMP_Start+0x6e>
      {
        wait_loop_index--;
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	3b01      	subs	r3, #1
 80031cc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1f9      	bne.n	80031c8 <HAL_COMP_Start+0x68>
 80031d4:	e001      	b.n	80031da <HAL_COMP_Start+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80031da:	7bfb      	ldrb	r3, [r7, #15]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	20000004 	.word	0x20000004
 80031ec:	431bde83 	.word	0x431bde83

080031f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003200:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <__NVIC_SetPriorityGrouping+0x44>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800320c:	4013      	ands	r3, r2
 800320e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003218:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800321c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003222:	4a04      	ldr	r2, [pc, #16]	; (8003234 <__NVIC_SetPriorityGrouping+0x44>)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	60d3      	str	r3, [r2, #12]
}
 8003228:	bf00      	nop
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	e000ed00 	.word	0xe000ed00

08003238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800323c:	4b04      	ldr	r3, [pc, #16]	; (8003250 <__NVIC_GetPriorityGrouping+0x18>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	0a1b      	lsrs	r3, r3, #8
 8003242:	f003 0307 	and.w	r3, r3, #7
}
 8003246:	4618      	mov	r0, r3
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	e000ed00 	.word	0xe000ed00

08003254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	4603      	mov	r3, r0
 800325c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800325e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003262:	2b00      	cmp	r3, #0
 8003264:	db0b      	blt.n	800327e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003266:	79fb      	ldrb	r3, [r7, #7]
 8003268:	f003 021f 	and.w	r2, r3, #31
 800326c:	4907      	ldr	r1, [pc, #28]	; (800328c <__NVIC_EnableIRQ+0x38>)
 800326e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	2001      	movs	r0, #1
 8003276:	fa00 f202 	lsl.w	r2, r0, r2
 800327a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	e000e100 	.word	0xe000e100

08003290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	6039      	str	r1, [r7, #0]
 800329a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800329c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	db0a      	blt.n	80032ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	490c      	ldr	r1, [pc, #48]	; (80032dc <__NVIC_SetPriority+0x4c>)
 80032aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ae:	0112      	lsls	r2, r2, #4
 80032b0:	b2d2      	uxtb	r2, r2
 80032b2:	440b      	add	r3, r1
 80032b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032b8:	e00a      	b.n	80032d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	4908      	ldr	r1, [pc, #32]	; (80032e0 <__NVIC_SetPriority+0x50>)
 80032c0:	79fb      	ldrb	r3, [r7, #7]
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	3b04      	subs	r3, #4
 80032c8:	0112      	lsls	r2, r2, #4
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	440b      	add	r3, r1
 80032ce:	761a      	strb	r2, [r3, #24]
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	e000e100 	.word	0xe000e100
 80032e0:	e000ed00 	.word	0xe000ed00

080032e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b089      	sub	sp, #36	; 0x24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f1c3 0307 	rsb	r3, r3, #7
 80032fe:	2b04      	cmp	r3, #4
 8003300:	bf28      	it	cs
 8003302:	2304      	movcs	r3, #4
 8003304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	3304      	adds	r3, #4
 800330a:	2b06      	cmp	r3, #6
 800330c:	d902      	bls.n	8003314 <NVIC_EncodePriority+0x30>
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	3b03      	subs	r3, #3
 8003312:	e000      	b.n	8003316 <NVIC_EncodePriority+0x32>
 8003314:	2300      	movs	r3, #0
 8003316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003318:	f04f 32ff 	mov.w	r2, #4294967295
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	43da      	mvns	r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	401a      	ands	r2, r3
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800332c:	f04f 31ff 	mov.w	r1, #4294967295
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	fa01 f303 	lsl.w	r3, r1, r3
 8003336:	43d9      	mvns	r1, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800333c:	4313      	orrs	r3, r2
         );
}
 800333e:	4618      	mov	r0, r3
 8003340:	3724      	adds	r7, #36	; 0x24
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
	...

0800334c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3b01      	subs	r3, #1
 8003358:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800335c:	d301      	bcc.n	8003362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800335e:	2301      	movs	r3, #1
 8003360:	e00f      	b.n	8003382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003362:	4a0a      	ldr	r2, [pc, #40]	; (800338c <SysTick_Config+0x40>)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3b01      	subs	r3, #1
 8003368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800336a:	210f      	movs	r1, #15
 800336c:	f04f 30ff 	mov.w	r0, #4294967295
 8003370:	f7ff ff8e 	bl	8003290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003374:	4b05      	ldr	r3, [pc, #20]	; (800338c <SysTick_Config+0x40>)
 8003376:	2200      	movs	r2, #0
 8003378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800337a:	4b04      	ldr	r3, [pc, #16]	; (800338c <SysTick_Config+0x40>)
 800337c:	2207      	movs	r2, #7
 800337e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	e000e010 	.word	0xe000e010

08003390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7ff ff29 	bl	80031f0 <__NVIC_SetPriorityGrouping>
}
 800339e:	bf00      	nop
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b086      	sub	sp, #24
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	4603      	mov	r3, r0
 80033ae:	60b9      	str	r1, [r7, #8]
 80033b0:	607a      	str	r2, [r7, #4]
 80033b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033b4:	f7ff ff40 	bl	8003238 <__NVIC_GetPriorityGrouping>
 80033b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	68b9      	ldr	r1, [r7, #8]
 80033be:	6978      	ldr	r0, [r7, #20]
 80033c0:	f7ff ff90 	bl	80032e4 <NVIC_EncodePriority>
 80033c4:	4602      	mov	r2, r0
 80033c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ca:	4611      	mov	r1, r2
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff ff5f 	bl	8003290 <__NVIC_SetPriority>
}
 80033d2:	bf00      	nop
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b082      	sub	sp, #8
 80033de:	af00      	add	r7, sp, #0
 80033e0:	4603      	mov	r3, r0
 80033e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff ff33 	bl	8003254 <__NVIC_EnableIRQ>
}
 80033ee:	bf00      	nop
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b082      	sub	sp, #8
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7ff ffa4 	bl	800334c <SysTick_Config>
 8003404:	4603      	mov	r3, r0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e014      	b.n	800344a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	791b      	ldrb	r3, [r3, #4]
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d105      	bne.n	8003436 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7fd fd4d 	bl	8000ed0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2202      	movs	r2, #2
 800343a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b082      	sub	sp, #8
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	795b      	ldrb	r3, [r3, #5]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d101      	bne.n	8003468 <HAL_DAC_Start+0x16>
 8003464:	2302      	movs	r3, #2
 8003466:	e043      	b.n	80034f0 <HAL_DAC_Start+0x9e>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2202      	movs	r2, #2
 8003472:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6819      	ldr	r1, [r3, #0]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	f003 0310 	and.w	r3, r3, #16
 8003480:	2201      	movs	r2, #1
 8003482:	409a      	lsls	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 800348c:	2001      	movs	r0, #1
 800348e:	f7fd ff61 	bl	8001354 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10f      	bne.n	80034b8 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d11d      	bne.n	80034e2 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f042 0201 	orr.w	r2, r2, #1
 80034b4:	605a      	str	r2, [r3, #4]
 80034b6:	e014      	b.n	80034e2 <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	f003 0310 	and.w	r3, r3, #16
 80034c8:	2102      	movs	r1, #2
 80034ca:	fa01 f303 	lsl.w	r3, r1, r3
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d107      	bne.n	80034e2 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f042 0202 	orr.w	r2, r2, #2
 80034e0:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800350a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800350e:	d120      	bne.n	8003552 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003516:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800351a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800351e:	d118      	bne.n	8003552 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2204      	movs	r2, #4
 8003524:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	f043 0201 	orr.w	r2, r3, #1
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800353a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800354a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f855 	bl	80035fc <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800355c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003560:	d120      	bne.n	80035a4 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003568:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800356c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003570:	d118      	bne.n	80035a4 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2204      	movs	r2, #4
 8003576:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	f043 0202 	orr.w	r2, r3, #2
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800358c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800359c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f9de 	bl	8003960 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80035a4:	bf00      	nop
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
 80035b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d105      	bne.n	80035dc <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4413      	add	r3, r2
 80035d6:	3308      	adds	r3, #8
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	e004      	b.n	80035e6 <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4413      	add	r3, r2
 80035e2:	3314      	adds	r3, #20
 80035e4:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	461a      	mov	r2, r3
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	371c      	adds	r7, #28
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08a      	sub	sp, #40	; 0x28
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	795b      	ldrb	r3, [r3, #5]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_DAC_ConfigChannel+0x18>
 8003624:	2302      	movs	r3, #2
 8003626:	e192      	b.n	800394e <HAL_DAC_ConfigChannel+0x33e>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2201      	movs	r2, #1
 800362c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2202      	movs	r2, #2
 8003632:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	2b04      	cmp	r3, #4
 800363a:	d174      	bne.n	8003726 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800363c:	f7fd fe7e 	bl	800133c <HAL_GetTick>
 8003640:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d134      	bne.n	80036b2 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003648:	e011      	b.n	800366e <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800364a:	f7fd fe77 	bl	800133c <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b01      	cmp	r3, #1
 8003656:	d90a      	bls.n	800366e <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	f043 0208 	orr.w	r2, r3, #8
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2203      	movs	r2, #3
 8003668:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e16f      	b.n	800394e <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003674:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1e6      	bne.n	800364a <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 800367c:	2001      	movs	r0, #1
 800367e:	f7fd fe69 	bl	8001354 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800368a:	641a      	str	r2, [r3, #64]	; 0x40
 800368c:	e01e      	b.n	80036cc <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800368e:	f7fd fe55 	bl	800133c <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b01      	cmp	r3, #1
 800369a:	d90a      	bls.n	80036b2 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	f043 0208 	orr.w	r2, r3, #8
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2203      	movs	r2, #3
 80036ac:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e14d      	b.n	800394e <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	dbe8      	blt.n	800368e <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80036bc:	2001      	movs	r0, #1
 80036be:	f7fd fe49 	bl	8001354 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036ca:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f003 0310 	and.w	r3, r3, #16
 80036d8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80036dc:	fa01 f303 	lsl.w	r3, r1, r3
 80036e0:	43db      	mvns	r3, r3
 80036e2:	ea02 0103 	and.w	r1, r2, r3
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f003 0310 	and.w	r3, r3, #16
 80036f0:	409a      	lsls	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f003 0310 	and.w	r3, r3, #16
 8003706:	21ff      	movs	r1, #255	; 0xff
 8003708:	fa01 f303 	lsl.w	r3, r1, r3
 800370c:	43db      	mvns	r3, r3
 800370e:	ea02 0103 	and.w	r1, r2, r3
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f003 0310 	and.w	r3, r3, #16
 800371c:	409a      	lsls	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d11d      	bne.n	800376a <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003734:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f003 0310 	and.w	r3, r3, #16
 800373c:	221f      	movs	r2, #31
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	43db      	mvns	r3, r3
 8003744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003746:	4013      	ands	r3, r2
 8003748:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f003 0310 	and.w	r3, r3, #16
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800375e:	4313      	orrs	r3, r2
 8003760:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003768:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f003 0310 	and.w	r3, r3, #16
 8003778:	2207      	movs	r2, #7
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	43db      	mvns	r3, r3
 8003780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003782:	4013      	ands	r3, r2
 8003784:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d102      	bne.n	8003794 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800378e:	2300      	movs	r3, #0
 8003790:	623b      	str	r3, [r7, #32]
 8003792:	e00f      	b.n	80037b4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	2b02      	cmp	r3, #2
 800379a:	d102      	bne.n	80037a2 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800379c:	2301      	movs	r3, #1
 800379e:	623b      	str	r3, [r7, #32]
 80037a0:	e008      	b.n	80037b4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d102      	bne.n	80037b0 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80037aa:	2301      	movs	r3, #1
 80037ac:	623b      	str	r3, [r7, #32]
 80037ae:	e001      	b.n	80037b4 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80037b0:	2300      	movs	r3, #0
 80037b2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	4313      	orrs	r3, r2
 80037be:	6a3a      	ldr	r2, [r7, #32]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f003 0310 	and.w	r3, r3, #16
 80037ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	43db      	mvns	r3, r3
 80037d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d6:	4013      	ands	r3, r2
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	791b      	ldrb	r3, [r3, #4]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d102      	bne.n	80037e8 <HAL_DAC_ConfigChannel+0x1d8>
 80037e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037e6:	e000      	b.n	80037ea <HAL_DAC_ConfigChannel+0x1da>
 80037e8:	2300      	movs	r3, #0
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f003 0310 	and.w	r3, r3, #16
 80037f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	43db      	mvns	r3, r3
 8003800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003802:	4013      	ands	r3, r2
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	795b      	ldrb	r3, [r3, #5]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d102      	bne.n	8003814 <HAL_DAC_ConfigChannel+0x204>
 800380e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003812:	e000      	b.n	8003816 <HAL_DAC_ConfigChannel+0x206>
 8003814:	2300      	movs	r3, #0
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	4313      	orrs	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003822:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b02      	cmp	r3, #2
 800382a:	d114      	bne.n	8003856 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800382c:	f000 ffa6 	bl	800477c <HAL_RCC_GetHCLKFreq>
 8003830:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	4a48      	ldr	r2, [pc, #288]	; (8003958 <HAL_DAC_ConfigChannel+0x348>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d904      	bls.n	8003844 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
 8003842:	e00f      	b.n	8003864 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	4a45      	ldr	r2, [pc, #276]	; (800395c <HAL_DAC_ConfigChannel+0x34c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d90a      	bls.n	8003862 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003852:	627b      	str	r3, [r7, #36]	; 0x24
 8003854:	e006      	b.n	8003864 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800385c:	4313      	orrs	r3, r2
 800385e:	627b      	str	r3, [r7, #36]	; 0x24
 8003860:	e000      	b.n	8003864 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003862:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f003 0310 	and.w	r3, r3, #16
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003872:	4313      	orrs	r3, r2
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800387c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6819      	ldr	r1, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f003 0310 	and.w	r3, r3, #16
 800388a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	43da      	mvns	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	400a      	ands	r2, r1
 800389a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f003 0310 	and.w	r3, r3, #16
 80038aa:	f640 72fe 	movw	r2, #4094	; 0xffe
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	43db      	mvns	r3, r3
 80038b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b6:	4013      	ands	r3, r2
 80038b8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f003 0310 	and.w	r3, r3, #16
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ce:	4313      	orrs	r3, r2
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6819      	ldr	r1, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f003 0310 	and.w	r3, r3, #16
 80038e6:	22c0      	movs	r2, #192	; 0xc0
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	43da      	mvns	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	400a      	ands	r2, r1
 80038f4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	089b      	lsrs	r3, r3, #2
 80038fc:	f003 030f 	and.w	r3, r3, #15
 8003900:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	089b      	lsrs	r3, r3, #2
 8003908:	021b      	lsls	r3, r3, #8
 800390a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4313      	orrs	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f003 0310 	and.w	r3, r3, #16
 8003920:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003924:	fa01 f303 	lsl.w	r3, r1, r3
 8003928:	43db      	mvns	r3, r3
 800392a:	ea02 0103 	and.w	r1, r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f003 0310 	and.w	r3, r3, #16
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	409a      	lsls	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2201      	movs	r2, #1
 8003944:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3728      	adds	r7, #40	; 0x28
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	09896800 	.word	0x09896800
 800395c:	04c4b400 	.word	0x04c4b400

08003960 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003974:	b480      	push	{r7}
 8003976:	b087      	sub	sp, #28
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800397e:	2300      	movs	r3, #0
 8003980:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003982:	e15a      	b.n	8003c3a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	2101      	movs	r1, #1
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	fa01 f303 	lsl.w	r3, r1, r3
 8003990:	4013      	ands	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 814c 	beq.w	8003c34 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d00b      	beq.n	80039bc <HAL_GPIO_Init+0x48>
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d007      	beq.n	80039bc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039b0:	2b11      	cmp	r3, #17
 80039b2:	d003      	beq.n	80039bc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	2b12      	cmp	r3, #18
 80039ba:	d130      	bne.n	8003a1e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	2203      	movs	r2, #3
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	43db      	mvns	r3, r3
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4013      	ands	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	68da      	ldr	r2, [r3, #12]
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039f2:	2201      	movs	r2, #1
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	43db      	mvns	r3, r3
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4013      	ands	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	091b      	lsrs	r3, r3, #4
 8003a08:	f003 0201 	and.w	r2, r3, #1
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	2203      	movs	r2, #3
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	4013      	ands	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	689a      	ldr	r2, [r3, #8]
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d003      	beq.n	8003a5e <HAL_GPIO_Init+0xea>
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b12      	cmp	r3, #18
 8003a5c:	d123      	bne.n	8003aa6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	08da      	lsrs	r2, r3, #3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	3208      	adds	r2, #8
 8003a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	220f      	movs	r2, #15
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	43db      	mvns	r3, r3
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	691a      	ldr	r2, [r3, #16]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	08da      	lsrs	r2, r3, #3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3208      	adds	r2, #8
 8003aa0:	6939      	ldr	r1, [r7, #16]
 8003aa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	2203      	movs	r2, #3
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	4013      	ands	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f003 0203 	and.w	r2, r3, #3
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f000 80a6 	beq.w	8003c34 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ae8:	4b5b      	ldr	r3, [pc, #364]	; (8003c58 <HAL_GPIO_Init+0x2e4>)
 8003aea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aec:	4a5a      	ldr	r2, [pc, #360]	; (8003c58 <HAL_GPIO_Init+0x2e4>)
 8003aee:	f043 0301 	orr.w	r3, r3, #1
 8003af2:	6613      	str	r3, [r2, #96]	; 0x60
 8003af4:	4b58      	ldr	r3, [pc, #352]	; (8003c58 <HAL_GPIO_Init+0x2e4>)
 8003af6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	60bb      	str	r3, [r7, #8]
 8003afe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b00:	4a56      	ldr	r2, [pc, #344]	; (8003c5c <HAL_GPIO_Init+0x2e8>)
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	089b      	lsrs	r3, r3, #2
 8003b06:	3302      	adds	r3, #2
 8003b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f003 0303 	and.w	r3, r3, #3
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	220f      	movs	r2, #15
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	4013      	ands	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b2a:	d01f      	beq.n	8003b6c <HAL_GPIO_Init+0x1f8>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a4c      	ldr	r2, [pc, #304]	; (8003c60 <HAL_GPIO_Init+0x2ec>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d019      	beq.n	8003b68 <HAL_GPIO_Init+0x1f4>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a4b      	ldr	r2, [pc, #300]	; (8003c64 <HAL_GPIO_Init+0x2f0>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d013      	beq.n	8003b64 <HAL_GPIO_Init+0x1f0>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a4a      	ldr	r2, [pc, #296]	; (8003c68 <HAL_GPIO_Init+0x2f4>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d00d      	beq.n	8003b60 <HAL_GPIO_Init+0x1ec>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a49      	ldr	r2, [pc, #292]	; (8003c6c <HAL_GPIO_Init+0x2f8>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d007      	beq.n	8003b5c <HAL_GPIO_Init+0x1e8>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a48      	ldr	r2, [pc, #288]	; (8003c70 <HAL_GPIO_Init+0x2fc>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d101      	bne.n	8003b58 <HAL_GPIO_Init+0x1e4>
 8003b54:	2305      	movs	r3, #5
 8003b56:	e00a      	b.n	8003b6e <HAL_GPIO_Init+0x1fa>
 8003b58:	2306      	movs	r3, #6
 8003b5a:	e008      	b.n	8003b6e <HAL_GPIO_Init+0x1fa>
 8003b5c:	2304      	movs	r3, #4
 8003b5e:	e006      	b.n	8003b6e <HAL_GPIO_Init+0x1fa>
 8003b60:	2303      	movs	r3, #3
 8003b62:	e004      	b.n	8003b6e <HAL_GPIO_Init+0x1fa>
 8003b64:	2302      	movs	r3, #2
 8003b66:	e002      	b.n	8003b6e <HAL_GPIO_Init+0x1fa>
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e000      	b.n	8003b6e <HAL_GPIO_Init+0x1fa>
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	f002 0203 	and.w	r2, r2, #3
 8003b74:	0092      	lsls	r2, r2, #2
 8003b76:	4093      	lsls	r3, r2
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b7e:	4937      	ldr	r1, [pc, #220]	; (8003c5c <HAL_GPIO_Init+0x2e8>)
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	089b      	lsrs	r3, r3, #2
 8003b84:	3302      	adds	r3, #2
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003b8c:	4b39      	ldr	r3, [pc, #228]	; (8003c74 <HAL_GPIO_Init+0x300>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	43db      	mvns	r3, r3
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003bb0:	4a30      	ldr	r2, [pc, #192]	; (8003c74 <HAL_GPIO_Init+0x300>)
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003bb6:	4b2f      	ldr	r3, [pc, #188]	; (8003c74 <HAL_GPIO_Init+0x300>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003bda:	4a26      	ldr	r2, [pc, #152]	; (8003c74 <HAL_GPIO_Init+0x300>)
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003be0:	4b24      	ldr	r3, [pc, #144]	; (8003c74 <HAL_GPIO_Init+0x300>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	43db      	mvns	r3, r3
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	4013      	ands	r3, r2
 8003bee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c04:	4a1b      	ldr	r2, [pc, #108]	; (8003c74 <HAL_GPIO_Init+0x300>)
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c0a:	4b1a      	ldr	r3, [pc, #104]	; (8003c74 <HAL_GPIO_Init+0x300>)
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	43db      	mvns	r3, r3
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4013      	ands	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c2e:	4a11      	ldr	r2, [pc, #68]	; (8003c74 <HAL_GPIO_Init+0x300>)
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	3301      	adds	r3, #1
 8003c38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	fa22 f303 	lsr.w	r3, r2, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f47f ae9d 	bne.w	8003984 <HAL_GPIO_Init+0x10>
  }
}
 8003c4a:	bf00      	nop
 8003c4c:	bf00      	nop
 8003c4e:	371c      	adds	r7, #28
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	40010000 	.word	0x40010000
 8003c60:	48000400 	.word	0x48000400
 8003c64:	48000800 	.word	0x48000800
 8003c68:	48000c00 	.word	0x48000c00
 8003c6c:	48001000 	.word	0x48001000
 8003c70:	48001400 	.word	0x48001400
 8003c74:	40010400 	.word	0x40010400

08003c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	460b      	mov	r3, r1
 8003c82:	807b      	strh	r3, [r7, #2]
 8003c84:	4613      	mov	r3, r2
 8003c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c88:	787b      	ldrb	r3, [r7, #1]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c8e:	887a      	ldrh	r2, [r7, #2]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c94:	e002      	b.n	8003c9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c96:	887a      	ldrh	r2, [r7, #2]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d141      	bne.n	8003d3a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cb6:	4b4b      	ldr	r3, [pc, #300]	; (8003de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cc2:	d131      	bne.n	8003d28 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cc4:	4b47      	ldr	r3, [pc, #284]	; (8003de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cca:	4a46      	ldr	r2, [pc, #280]	; (8003de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ccc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cd4:	4b43      	ldr	r3, [pc, #268]	; (8003de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cdc:	4a41      	ldr	r2, [pc, #260]	; (8003de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ce2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ce4:	4b40      	ldr	r3, [pc, #256]	; (8003de8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2232      	movs	r2, #50	; 0x32
 8003cea:	fb02 f303 	mul.w	r3, r2, r3
 8003cee:	4a3f      	ldr	r2, [pc, #252]	; (8003dec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf4:	0c9b      	lsrs	r3, r3, #18
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cfa:	e002      	b.n	8003d02 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d02:	4b38      	ldr	r3, [pc, #224]	; (8003de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d0e:	d102      	bne.n	8003d16 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f2      	bne.n	8003cfc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d16:	4b33      	ldr	r3, [pc, #204]	; (8003de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d22:	d158      	bne.n	8003dd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e057      	b.n	8003dd8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d28:	4b2e      	ldr	r3, [pc, #184]	; (8003de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d2e:	4a2d      	ldr	r2, [pc, #180]	; (8003de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003d38:	e04d      	b.n	8003dd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d40:	d141      	bne.n	8003dc6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d42:	4b28      	ldr	r3, [pc, #160]	; (8003de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d4e:	d131      	bne.n	8003db4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d50:	4b24      	ldr	r3, [pc, #144]	; (8003de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d56:	4a23      	ldr	r2, [pc, #140]	; (8003de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d60:	4b20      	ldr	r3, [pc, #128]	; (8003de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d68:	4a1e      	ldr	r2, [pc, #120]	; (8003de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d70:	4b1d      	ldr	r3, [pc, #116]	; (8003de8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2232      	movs	r2, #50	; 0x32
 8003d76:	fb02 f303 	mul.w	r3, r2, r3
 8003d7a:	4a1c      	ldr	r2, [pc, #112]	; (8003dec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d80:	0c9b      	lsrs	r3, r3, #18
 8003d82:	3301      	adds	r3, #1
 8003d84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d86:	e002      	b.n	8003d8e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d8e:	4b15      	ldr	r3, [pc, #84]	; (8003de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9a:	d102      	bne.n	8003da2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1f2      	bne.n	8003d88 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003da2:	4b10      	ldr	r3, [pc, #64]	; (8003de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dae:	d112      	bne.n	8003dd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e011      	b.n	8003dd8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003db4:	4b0b      	ldr	r3, [pc, #44]	; (8003de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dba:	4a0a      	ldr	r2, [pc, #40]	; (8003de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003dc4:	e007      	b.n	8003dd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003dc6:	4b07      	ldr	r3, [pc, #28]	; (8003de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dce:	4a05      	ldr	r2, [pc, #20]	; (8003de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dd4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	40007000 	.word	0x40007000
 8003de8:	20000004 	.word	0x20000004
 8003dec:	431bde83 	.word	0x431bde83

08003df0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003df4:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	4a04      	ldr	r2, [pc, #16]	; (8003e0c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003dfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dfe:	6093      	str	r3, [r2, #8]
}
 8003e00:	bf00      	nop
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	40007000 	.word	0x40007000

08003e10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b088      	sub	sp, #32
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e308      	b.n	8004434 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d075      	beq.n	8003f1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e2e:	4ba3      	ldr	r3, [pc, #652]	; (80040bc <HAL_RCC_OscConfig+0x2ac>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 030c 	and.w	r3, r3, #12
 8003e36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e38:	4ba0      	ldr	r3, [pc, #640]	; (80040bc <HAL_RCC_OscConfig+0x2ac>)
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	f003 0303 	and.w	r3, r3, #3
 8003e40:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	2b0c      	cmp	r3, #12
 8003e46:	d102      	bne.n	8003e4e <HAL_RCC_OscConfig+0x3e>
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	2b03      	cmp	r3, #3
 8003e4c:	d002      	beq.n	8003e54 <HAL_RCC_OscConfig+0x44>
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d10b      	bne.n	8003e6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e54:	4b99      	ldr	r3, [pc, #612]	; (80040bc <HAL_RCC_OscConfig+0x2ac>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d05b      	beq.n	8003f18 <HAL_RCC_OscConfig+0x108>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d157      	bne.n	8003f18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e2e3      	b.n	8004434 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e74:	d106      	bne.n	8003e84 <HAL_RCC_OscConfig+0x74>
 8003e76:	4b91      	ldr	r3, [pc, #580]	; (80040bc <HAL_RCC_OscConfig+0x2ac>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a90      	ldr	r2, [pc, #576]	; (80040bc <HAL_RCC_OscConfig+0x2ac>)
 8003e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e80:	6013      	str	r3, [r2, #0]
 8003e82:	e01d      	b.n	8003ec0 <HAL_RCC_OscConfig+0xb0>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e8c:	d10c      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x98>
 8003e8e:	4b8b      	ldr	r3, [pc, #556]	; (80040bc <HAL_RCC_OscConfig+0x2ac>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a8a      	ldr	r2, [pc, #552]	; (80040bc <HAL_RCC_OscConfig+0x2ac>)
 8003e94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e98:	6013      	str	r3, [r2, #0]
 8003e9a:	4b88      	ldr	r3, [pc, #544]	; (80040bc <HAL_RCC_OscConfig+0x2ac>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a87      	ldr	r2, [pc, #540]	; (80040bc <HAL_RCC_OscConfig+0x2ac>)
 8003ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	e00b      	b.n	8003ec0 <HAL_RCC_OscConfig+0xb0>
 8003ea8:	4b84      	ldr	r3, [pc, #528]	; (80040bc <HAL_RCC_OscConfig+0x2ac>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a83      	ldr	r2, [pc, #524]	; (80040bc <HAL_RCC_OscConfig+0x2ac>)
 8003eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eb2:	6013      	str	r3, [r2, #0]
 8003eb4:	4b81      	ldr	r3, [pc, #516]	; (80040bc <HAL_RCC_OscConfig+0x2ac>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a80      	ldr	r2, [pc, #512]	; (80040bc <HAL_RCC_OscConfig+0x2ac>)
 8003eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d013      	beq.n	8003ef0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec8:	f7fd fa38 	bl	800133c <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ed0:	f7fd fa34 	bl	800133c <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b64      	cmp	r3, #100	; 0x64
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e2a8      	b.n	8004434 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ee2:	4b76      	ldr	r3, [pc, #472]	; (80040bc <HAL_RCC_OscConfig+0x2ac>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0f0      	beq.n	8003ed0 <HAL_RCC_OscConfig+0xc0>
 8003eee:	e014      	b.n	8003f1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef0:	f7fd fa24 	bl	800133c <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ef8:	f7fd fa20 	bl	800133c <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b64      	cmp	r3, #100	; 0x64
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e294      	b.n	8004434 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f0a:	4b6c      	ldr	r3, [pc, #432]	; (80040bc <HAL_RCC_OscConfig+0x2ac>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f0      	bne.n	8003ef8 <HAL_RCC_OscConfig+0xe8>
 8003f16:	e000      	b.n	8003f1a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d075      	beq.n	8004012 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f26:	4b65      	ldr	r3, [pc, #404]	; (80040bc <HAL_RCC_OscConfig+0x2ac>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 030c 	and.w	r3, r3, #12
 8003f2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f30:	4b62      	ldr	r3, [pc, #392]	; (80040bc <HAL_RCC_OscConfig+0x2ac>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f003 0303 	and.w	r3, r3, #3
 8003f38:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	2b0c      	cmp	r3, #12
 8003f3e:	d102      	bne.n	8003f46 <HAL_RCC_OscConfig+0x136>
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d002      	beq.n	8003f4c <HAL_RCC_OscConfig+0x13c>
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	d11f      	bne.n	8003f8c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f4c:	4b5b      	ldr	r3, [pc, #364]	; (80040bc <HAL_RCC_OscConfig+0x2ac>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d005      	beq.n	8003f64 <HAL_RCC_OscConfig+0x154>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e267      	b.n	8004434 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f64:	4b55      	ldr	r3, [pc, #340]	; (80040bc <HAL_RCC_OscConfig+0x2ac>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	061b      	lsls	r3, r3, #24
 8003f72:	4952      	ldr	r1, [pc, #328]	; (80040bc <HAL_RCC_OscConfig+0x2ac>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003f78:	4b51      	ldr	r3, [pc, #324]	; (80040c0 <HAL_RCC_OscConfig+0x2b0>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fd f991 	bl	80012a4 <HAL_InitTick>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d043      	beq.n	8004010 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e253      	b.n	8004434 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d023      	beq.n	8003fdc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f94:	4b49      	ldr	r3, [pc, #292]	; (80040bc <HAL_RCC_OscConfig+0x2ac>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a48      	ldr	r2, [pc, #288]	; (80040bc <HAL_RCC_OscConfig+0x2ac>)
 8003f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa0:	f7fd f9cc 	bl	800133c <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fa8:	f7fd f9c8 	bl	800133c <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e23c      	b.n	8004434 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fba:	4b40      	ldr	r3, [pc, #256]	; (80040bc <HAL_RCC_OscConfig+0x2ac>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0f0      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc6:	4b3d      	ldr	r3, [pc, #244]	; (80040bc <HAL_RCC_OscConfig+0x2ac>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	061b      	lsls	r3, r3, #24
 8003fd4:	4939      	ldr	r1, [pc, #228]	; (80040bc <HAL_RCC_OscConfig+0x2ac>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	604b      	str	r3, [r1, #4]
 8003fda:	e01a      	b.n	8004012 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fdc:	4b37      	ldr	r3, [pc, #220]	; (80040bc <HAL_RCC_OscConfig+0x2ac>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a36      	ldr	r2, [pc, #216]	; (80040bc <HAL_RCC_OscConfig+0x2ac>)
 8003fe2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe8:	f7fd f9a8 	bl	800133c <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ff0:	f7fd f9a4 	bl	800133c <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e218      	b.n	8004434 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004002:	4b2e      	ldr	r3, [pc, #184]	; (80040bc <HAL_RCC_OscConfig+0x2ac>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f0      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x1e0>
 800400e:	e000      	b.n	8004012 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004010:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0308 	and.w	r3, r3, #8
 800401a:	2b00      	cmp	r3, #0
 800401c:	d03c      	beq.n	8004098 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d01c      	beq.n	8004060 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004026:	4b25      	ldr	r3, [pc, #148]	; (80040bc <HAL_RCC_OscConfig+0x2ac>)
 8004028:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800402c:	4a23      	ldr	r2, [pc, #140]	; (80040bc <HAL_RCC_OscConfig+0x2ac>)
 800402e:	f043 0301 	orr.w	r3, r3, #1
 8004032:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004036:	f7fd f981 	bl	800133c <HAL_GetTick>
 800403a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800403c:	e008      	b.n	8004050 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800403e:	f7fd f97d 	bl	800133c <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e1f1      	b.n	8004434 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004050:	4b1a      	ldr	r3, [pc, #104]	; (80040bc <HAL_RCC_OscConfig+0x2ac>)
 8004052:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0ef      	beq.n	800403e <HAL_RCC_OscConfig+0x22e>
 800405e:	e01b      	b.n	8004098 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004060:	4b16      	ldr	r3, [pc, #88]	; (80040bc <HAL_RCC_OscConfig+0x2ac>)
 8004062:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004066:	4a15      	ldr	r2, [pc, #84]	; (80040bc <HAL_RCC_OscConfig+0x2ac>)
 8004068:	f023 0301 	bic.w	r3, r3, #1
 800406c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004070:	f7fd f964 	bl	800133c <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004078:	f7fd f960 	bl	800133c <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e1d4      	b.n	8004434 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800408a:	4b0c      	ldr	r3, [pc, #48]	; (80040bc <HAL_RCC_OscConfig+0x2ac>)
 800408c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1ef      	bne.n	8004078 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 80ab 	beq.w	80041fc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040a6:	2300      	movs	r3, #0
 80040a8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040aa:	4b04      	ldr	r3, [pc, #16]	; (80040bc <HAL_RCC_OscConfig+0x2ac>)
 80040ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d106      	bne.n	80040c4 <HAL_RCC_OscConfig+0x2b4>
 80040b6:	2301      	movs	r3, #1
 80040b8:	e005      	b.n	80040c6 <HAL_RCC_OscConfig+0x2b6>
 80040ba:	bf00      	nop
 80040bc:	40021000 	.word	0x40021000
 80040c0:	20000008 	.word	0x20000008
 80040c4:	2300      	movs	r3, #0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00d      	beq.n	80040e6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ca:	4baf      	ldr	r3, [pc, #700]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 80040cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ce:	4aae      	ldr	r2, [pc, #696]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 80040d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d4:	6593      	str	r3, [r2, #88]	; 0x58
 80040d6:	4bac      	ldr	r3, [pc, #688]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 80040d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80040e2:	2301      	movs	r3, #1
 80040e4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040e6:	4ba9      	ldr	r3, [pc, #676]	; (800438c <HAL_RCC_OscConfig+0x57c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d118      	bne.n	8004124 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040f2:	4ba6      	ldr	r3, [pc, #664]	; (800438c <HAL_RCC_OscConfig+0x57c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4aa5      	ldr	r2, [pc, #660]	; (800438c <HAL_RCC_OscConfig+0x57c>)
 80040f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040fe:	f7fd f91d 	bl	800133c <HAL_GetTick>
 8004102:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004104:	e008      	b.n	8004118 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004106:	f7fd f919 	bl	800133c <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e18d      	b.n	8004434 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004118:	4b9c      	ldr	r3, [pc, #624]	; (800438c <HAL_RCC_OscConfig+0x57c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0f0      	beq.n	8004106 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d108      	bne.n	800413e <HAL_RCC_OscConfig+0x32e>
 800412c:	4b96      	ldr	r3, [pc, #600]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 800412e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004132:	4a95      	ldr	r2, [pc, #596]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 8004134:	f043 0301 	orr.w	r3, r3, #1
 8004138:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800413c:	e024      	b.n	8004188 <HAL_RCC_OscConfig+0x378>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	2b05      	cmp	r3, #5
 8004144:	d110      	bne.n	8004168 <HAL_RCC_OscConfig+0x358>
 8004146:	4b90      	ldr	r3, [pc, #576]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 8004148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414c:	4a8e      	ldr	r2, [pc, #568]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 800414e:	f043 0304 	orr.w	r3, r3, #4
 8004152:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004156:	4b8c      	ldr	r3, [pc, #560]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 8004158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415c:	4a8a      	ldr	r2, [pc, #552]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 800415e:	f043 0301 	orr.w	r3, r3, #1
 8004162:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004166:	e00f      	b.n	8004188 <HAL_RCC_OscConfig+0x378>
 8004168:	4b87      	ldr	r3, [pc, #540]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 800416a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416e:	4a86      	ldr	r2, [pc, #536]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 8004170:	f023 0301 	bic.w	r3, r3, #1
 8004174:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004178:	4b83      	ldr	r3, [pc, #524]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417e:	4a82      	ldr	r2, [pc, #520]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 8004180:	f023 0304 	bic.w	r3, r3, #4
 8004184:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d016      	beq.n	80041be <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004190:	f7fd f8d4 	bl	800133c <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004196:	e00a      	b.n	80041ae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004198:	f7fd f8d0 	bl	800133c <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e142      	b.n	8004434 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041ae:	4b76      	ldr	r3, [pc, #472]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 80041b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d0ed      	beq.n	8004198 <HAL_RCC_OscConfig+0x388>
 80041bc:	e015      	b.n	80041ea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041be:	f7fd f8bd 	bl	800133c <HAL_GetTick>
 80041c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041c4:	e00a      	b.n	80041dc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041c6:	f7fd f8b9 	bl	800133c <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d901      	bls.n	80041dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e12b      	b.n	8004434 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041dc:	4b6a      	ldr	r3, [pc, #424]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 80041de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1ed      	bne.n	80041c6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041ea:	7ffb      	ldrb	r3, [r7, #31]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d105      	bne.n	80041fc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041f0:	4b65      	ldr	r3, [pc, #404]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 80041f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f4:	4a64      	ldr	r2, [pc, #400]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 80041f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041fa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0320 	and.w	r3, r3, #32
 8004204:	2b00      	cmp	r3, #0
 8004206:	d03c      	beq.n	8004282 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d01c      	beq.n	800424a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004210:	4b5d      	ldr	r3, [pc, #372]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 8004212:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004216:	4a5c      	ldr	r2, [pc, #368]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 8004218:	f043 0301 	orr.w	r3, r3, #1
 800421c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004220:	f7fd f88c 	bl	800133c <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004228:	f7fd f888 	bl	800133c <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e0fc      	b.n	8004434 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800423a:	4b53      	ldr	r3, [pc, #332]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 800423c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0ef      	beq.n	8004228 <HAL_RCC_OscConfig+0x418>
 8004248:	e01b      	b.n	8004282 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800424a:	4b4f      	ldr	r3, [pc, #316]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 800424c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004250:	4a4d      	ldr	r2, [pc, #308]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 8004252:	f023 0301 	bic.w	r3, r3, #1
 8004256:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800425a:	f7fd f86f 	bl	800133c <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004260:	e008      	b.n	8004274 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004262:	f7fd f86b 	bl	800133c <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d901      	bls.n	8004274 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e0df      	b.n	8004434 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004274:	4b44      	ldr	r3, [pc, #272]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 8004276:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1ef      	bne.n	8004262 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 80d3 	beq.w	8004432 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800428c:	4b3e      	ldr	r3, [pc, #248]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f003 030c 	and.w	r3, r3, #12
 8004294:	2b0c      	cmp	r3, #12
 8004296:	f000 808d 	beq.w	80043b4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d15a      	bne.n	8004358 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a2:	4b39      	ldr	r3, [pc, #228]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a38      	ldr	r2, [pc, #224]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 80042a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ae:	f7fd f845 	bl	800133c <HAL_GetTick>
 80042b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042b4:	e008      	b.n	80042c8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b6:	f7fd f841 	bl	800133c <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e0b5      	b.n	8004434 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042c8:	4b2f      	ldr	r3, [pc, #188]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1f0      	bne.n	80042b6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042d4:	4b2c      	ldr	r3, [pc, #176]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 80042d6:	68da      	ldr	r2, [r3, #12]
 80042d8:	4b2d      	ldr	r3, [pc, #180]	; (8004390 <HAL_RCC_OscConfig+0x580>)
 80042da:	4013      	ands	r3, r2
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6a11      	ldr	r1, [r2, #32]
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042e4:	3a01      	subs	r2, #1
 80042e6:	0112      	lsls	r2, r2, #4
 80042e8:	4311      	orrs	r1, r2
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80042ee:	0212      	lsls	r2, r2, #8
 80042f0:	4311      	orrs	r1, r2
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80042f6:	0852      	lsrs	r2, r2, #1
 80042f8:	3a01      	subs	r2, #1
 80042fa:	0552      	lsls	r2, r2, #21
 80042fc:	4311      	orrs	r1, r2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004302:	0852      	lsrs	r2, r2, #1
 8004304:	3a01      	subs	r2, #1
 8004306:	0652      	lsls	r2, r2, #25
 8004308:	4311      	orrs	r1, r2
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800430e:	06d2      	lsls	r2, r2, #27
 8004310:	430a      	orrs	r2, r1
 8004312:	491d      	ldr	r1, [pc, #116]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 8004314:	4313      	orrs	r3, r2
 8004316:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004318:	4b1b      	ldr	r3, [pc, #108]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a1a      	ldr	r2, [pc, #104]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 800431e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004322:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004324:	4b18      	ldr	r3, [pc, #96]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	4a17      	ldr	r2, [pc, #92]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 800432a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800432e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004330:	f7fd f804 	bl	800133c <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004338:	f7fd f800 	bl	800133c <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e074      	b.n	8004434 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800434a:	4b0f      	ldr	r3, [pc, #60]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0f0      	beq.n	8004338 <HAL_RCC_OscConfig+0x528>
 8004356:	e06c      	b.n	8004432 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004358:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a0a      	ldr	r2, [pc, #40]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 800435e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004362:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004364:	4b08      	ldr	r3, [pc, #32]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	4a07      	ldr	r2, [pc, #28]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 800436a:	f023 0303 	bic.w	r3, r3, #3
 800436e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004370:	4b05      	ldr	r3, [pc, #20]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	4a04      	ldr	r2, [pc, #16]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 8004376:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800437a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800437e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004380:	f7fc ffdc 	bl	800133c <HAL_GetTick>
 8004384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004386:	e00e      	b.n	80043a6 <HAL_RCC_OscConfig+0x596>
 8004388:	40021000 	.word	0x40021000
 800438c:	40007000 	.word	0x40007000
 8004390:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004394:	f7fc ffd2 	bl	800133c <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e046      	b.n	8004434 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043a6:	4b25      	ldr	r3, [pc, #148]	; (800443c <HAL_RCC_OscConfig+0x62c>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1f0      	bne.n	8004394 <HAL_RCC_OscConfig+0x584>
 80043b2:	e03e      	b.n	8004432 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d101      	bne.n	80043c0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e039      	b.n	8004434 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80043c0:	4b1e      	ldr	r3, [pc, #120]	; (800443c <HAL_RCC_OscConfig+0x62c>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f003 0203 	and.w	r2, r3, #3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d12c      	bne.n	800442e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	3b01      	subs	r3, #1
 80043e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d123      	bne.n	800442e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d11b      	bne.n	800442e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004400:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004402:	429a      	cmp	r2, r3
 8004404:	d113      	bne.n	800442e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004410:	085b      	lsrs	r3, r3, #1
 8004412:	3b01      	subs	r3, #1
 8004414:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004416:	429a      	cmp	r2, r3
 8004418:	d109      	bne.n	800442e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004424:	085b      	lsrs	r3, r3, #1
 8004426:	3b01      	subs	r3, #1
 8004428:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800442a:	429a      	cmp	r2, r3
 800442c:	d001      	beq.n	8004432 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e000      	b.n	8004434 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3720      	adds	r7, #32
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40021000 	.word	0x40021000

08004440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800444a:	2300      	movs	r3, #0
 800444c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e11e      	b.n	8004696 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004458:	4b91      	ldr	r3, [pc, #580]	; (80046a0 <HAL_RCC_ClockConfig+0x260>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 030f 	and.w	r3, r3, #15
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d910      	bls.n	8004488 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004466:	4b8e      	ldr	r3, [pc, #568]	; (80046a0 <HAL_RCC_ClockConfig+0x260>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f023 020f 	bic.w	r2, r3, #15
 800446e:	498c      	ldr	r1, [pc, #560]	; (80046a0 <HAL_RCC_ClockConfig+0x260>)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	4313      	orrs	r3, r2
 8004474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004476:	4b8a      	ldr	r3, [pc, #552]	; (80046a0 <HAL_RCC_ClockConfig+0x260>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	429a      	cmp	r2, r3
 8004482:	d001      	beq.n	8004488 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e106      	b.n	8004696 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b00      	cmp	r3, #0
 8004492:	d073      	beq.n	800457c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2b03      	cmp	r3, #3
 800449a:	d129      	bne.n	80044f0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800449c:	4b81      	ldr	r3, [pc, #516]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e0f4      	b.n	8004696 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80044ac:	f000 f972 	bl	8004794 <RCC_GetSysClockFreqFromPLLSource>
 80044b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	4a7c      	ldr	r2, [pc, #496]	; (80046a8 <HAL_RCC_ClockConfig+0x268>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d93f      	bls.n	800453a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80044ba:	4b7a      	ldr	r3, [pc, #488]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d009      	beq.n	80044da <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d033      	beq.n	800453a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d12f      	bne.n	800453a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044da:	4b72      	ldr	r3, [pc, #456]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044e2:	4a70      	ldr	r2, [pc, #448]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 80044e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80044ea:	2380      	movs	r3, #128	; 0x80
 80044ec:	617b      	str	r3, [r7, #20]
 80044ee:	e024      	b.n	800453a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d107      	bne.n	8004508 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044f8:	4b6a      	ldr	r3, [pc, #424]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d109      	bne.n	8004518 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e0c6      	b.n	8004696 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004508:	4b66      	ldr	r3, [pc, #408]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e0be      	b.n	8004696 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004518:	f000 f8ce 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 800451c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	4a61      	ldr	r2, [pc, #388]	; (80046a8 <HAL_RCC_ClockConfig+0x268>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d909      	bls.n	800453a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004526:	4b5f      	ldr	r3, [pc, #380]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800452e:	4a5d      	ldr	r2, [pc, #372]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 8004530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004534:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004536:	2380      	movs	r3, #128	; 0x80
 8004538:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800453a:	4b5a      	ldr	r3, [pc, #360]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f023 0203 	bic.w	r2, r3, #3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	4957      	ldr	r1, [pc, #348]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 8004548:	4313      	orrs	r3, r2
 800454a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800454c:	f7fc fef6 	bl	800133c <HAL_GetTick>
 8004550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004552:	e00a      	b.n	800456a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004554:	f7fc fef2 	bl	800133c <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004562:	4293      	cmp	r3, r2
 8004564:	d901      	bls.n	800456a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e095      	b.n	8004696 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800456a:	4b4e      	ldr	r3, [pc, #312]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f003 020c 	and.w	r2, r3, #12
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	429a      	cmp	r2, r3
 800457a:	d1eb      	bne.n	8004554 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d023      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0304 	and.w	r3, r3, #4
 8004590:	2b00      	cmp	r3, #0
 8004592:	d005      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004594:	4b43      	ldr	r3, [pc, #268]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	4a42      	ldr	r2, [pc, #264]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 800459a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800459e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0308 	and.w	r3, r3, #8
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d007      	beq.n	80045bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80045ac:	4b3d      	ldr	r3, [pc, #244]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80045b4:	4a3b      	ldr	r2, [pc, #236]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 80045b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045bc:	4b39      	ldr	r3, [pc, #228]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	4936      	ldr	r1, [pc, #216]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	608b      	str	r3, [r1, #8]
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	2b80      	cmp	r3, #128	; 0x80
 80045d4:	d105      	bne.n	80045e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80045d6:	4b33      	ldr	r3, [pc, #204]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	4a32      	ldr	r2, [pc, #200]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 80045dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045e2:	4b2f      	ldr	r3, [pc, #188]	; (80046a0 <HAL_RCC_ClockConfig+0x260>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d21d      	bcs.n	800462c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f0:	4b2b      	ldr	r3, [pc, #172]	; (80046a0 <HAL_RCC_ClockConfig+0x260>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f023 020f 	bic.w	r2, r3, #15
 80045f8:	4929      	ldr	r1, [pc, #164]	; (80046a0 <HAL_RCC_ClockConfig+0x260>)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004600:	f7fc fe9c 	bl	800133c <HAL_GetTick>
 8004604:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004606:	e00a      	b.n	800461e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004608:	f7fc fe98 	bl	800133c <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	f241 3288 	movw	r2, #5000	; 0x1388
 8004616:	4293      	cmp	r3, r2
 8004618:	d901      	bls.n	800461e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e03b      	b.n	8004696 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800461e:	4b20      	ldr	r3, [pc, #128]	; (80046a0 <HAL_RCC_ClockConfig+0x260>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 030f 	and.w	r3, r3, #15
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	429a      	cmp	r2, r3
 800462a:	d1ed      	bne.n	8004608 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b00      	cmp	r3, #0
 8004636:	d008      	beq.n	800464a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004638:	4b1a      	ldr	r3, [pc, #104]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	4917      	ldr	r1, [pc, #92]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 8004646:	4313      	orrs	r3, r2
 8004648:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0308 	and.w	r3, r3, #8
 8004652:	2b00      	cmp	r3, #0
 8004654:	d009      	beq.n	800466a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004656:	4b13      	ldr	r3, [pc, #76]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	490f      	ldr	r1, [pc, #60]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 8004666:	4313      	orrs	r3, r2
 8004668:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800466a:	f000 f825 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 800466e:	4602      	mov	r2, r0
 8004670:	4b0c      	ldr	r3, [pc, #48]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	091b      	lsrs	r3, r3, #4
 8004676:	f003 030f 	and.w	r3, r3, #15
 800467a:	490c      	ldr	r1, [pc, #48]	; (80046ac <HAL_RCC_ClockConfig+0x26c>)
 800467c:	5ccb      	ldrb	r3, [r1, r3]
 800467e:	f003 031f 	and.w	r3, r3, #31
 8004682:	fa22 f303 	lsr.w	r3, r2, r3
 8004686:	4a0a      	ldr	r2, [pc, #40]	; (80046b0 <HAL_RCC_ClockConfig+0x270>)
 8004688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800468a:	4b0a      	ldr	r3, [pc, #40]	; (80046b4 <HAL_RCC_ClockConfig+0x274>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f7fc fe08 	bl	80012a4 <HAL_InitTick>
 8004694:	4603      	mov	r3, r0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3718      	adds	r7, #24
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	40022000 	.word	0x40022000
 80046a4:	40021000 	.word	0x40021000
 80046a8:	04c4b400 	.word	0x04c4b400
 80046ac:	08006b94 	.word	0x08006b94
 80046b0:	20000004 	.word	0x20000004
 80046b4:	20000008 	.word	0x20000008

080046b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80046be:	4b2c      	ldr	r3, [pc, #176]	; (8004770 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 030c 	and.w	r3, r3, #12
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d102      	bne.n	80046d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046ca:	4b2a      	ldr	r3, [pc, #168]	; (8004774 <HAL_RCC_GetSysClockFreq+0xbc>)
 80046cc:	613b      	str	r3, [r7, #16]
 80046ce:	e047      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80046d0:	4b27      	ldr	r3, [pc, #156]	; (8004770 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f003 030c 	and.w	r3, r3, #12
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d102      	bne.n	80046e2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046dc:	4b26      	ldr	r3, [pc, #152]	; (8004778 <HAL_RCC_GetSysClockFreq+0xc0>)
 80046de:	613b      	str	r3, [r7, #16]
 80046e0:	e03e      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80046e2:	4b23      	ldr	r3, [pc, #140]	; (8004770 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 030c 	and.w	r3, r3, #12
 80046ea:	2b0c      	cmp	r3, #12
 80046ec:	d136      	bne.n	800475c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046ee:	4b20      	ldr	r3, [pc, #128]	; (8004770 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f003 0303 	and.w	r3, r3, #3
 80046f6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046f8:	4b1d      	ldr	r3, [pc, #116]	; (8004770 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	091b      	lsrs	r3, r3, #4
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	3301      	adds	r3, #1
 8004704:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2b03      	cmp	r3, #3
 800470a:	d10c      	bne.n	8004726 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800470c:	4a1a      	ldr	r2, [pc, #104]	; (8004778 <HAL_RCC_GetSysClockFreq+0xc0>)
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	fbb2 f3f3 	udiv	r3, r2, r3
 8004714:	4a16      	ldr	r2, [pc, #88]	; (8004770 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004716:	68d2      	ldr	r2, [r2, #12]
 8004718:	0a12      	lsrs	r2, r2, #8
 800471a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800471e:	fb02 f303 	mul.w	r3, r2, r3
 8004722:	617b      	str	r3, [r7, #20]
      break;
 8004724:	e00c      	b.n	8004740 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004726:	4a13      	ldr	r2, [pc, #76]	; (8004774 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	fbb2 f3f3 	udiv	r3, r2, r3
 800472e:	4a10      	ldr	r2, [pc, #64]	; (8004770 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004730:	68d2      	ldr	r2, [r2, #12]
 8004732:	0a12      	lsrs	r2, r2, #8
 8004734:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004738:	fb02 f303 	mul.w	r3, r2, r3
 800473c:	617b      	str	r3, [r7, #20]
      break;
 800473e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004740:	4b0b      	ldr	r3, [pc, #44]	; (8004770 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	0e5b      	lsrs	r3, r3, #25
 8004746:	f003 0303 	and.w	r3, r3, #3
 800474a:	3301      	adds	r3, #1
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	fbb2 f3f3 	udiv	r3, r2, r3
 8004758:	613b      	str	r3, [r7, #16]
 800475a:	e001      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004760:	693b      	ldr	r3, [r7, #16]
}
 8004762:	4618      	mov	r0, r3
 8004764:	371c      	adds	r7, #28
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	40021000 	.word	0x40021000
 8004774:	00f42400 	.word	0x00f42400
 8004778:	007a1200 	.word	0x007a1200

0800477c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004780:	4b03      	ldr	r3, [pc, #12]	; (8004790 <HAL_RCC_GetHCLKFreq+0x14>)
 8004782:	681b      	ldr	r3, [r3, #0]
}
 8004784:	4618      	mov	r0, r3
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	20000004 	.word	0x20000004

08004794 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004794:	b480      	push	{r7}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800479a:	4b1e      	ldr	r3, [pc, #120]	; (8004814 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047a4:	4b1b      	ldr	r3, [pc, #108]	; (8004814 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	091b      	lsrs	r3, r3, #4
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	3301      	adds	r3, #1
 80047b0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	2b03      	cmp	r3, #3
 80047b6:	d10c      	bne.n	80047d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047b8:	4a17      	ldr	r2, [pc, #92]	; (8004818 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c0:	4a14      	ldr	r2, [pc, #80]	; (8004814 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047c2:	68d2      	ldr	r2, [r2, #12]
 80047c4:	0a12      	lsrs	r2, r2, #8
 80047c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80047ca:	fb02 f303 	mul.w	r3, r2, r3
 80047ce:	617b      	str	r3, [r7, #20]
    break;
 80047d0:	e00c      	b.n	80047ec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047d2:	4a12      	ldr	r2, [pc, #72]	; (800481c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047da:	4a0e      	ldr	r2, [pc, #56]	; (8004814 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047dc:	68d2      	ldr	r2, [r2, #12]
 80047de:	0a12      	lsrs	r2, r2, #8
 80047e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80047e4:	fb02 f303 	mul.w	r3, r2, r3
 80047e8:	617b      	str	r3, [r7, #20]
    break;
 80047ea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047ec:	4b09      	ldr	r3, [pc, #36]	; (8004814 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	0e5b      	lsrs	r3, r3, #25
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	3301      	adds	r3, #1
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	fbb2 f3f3 	udiv	r3, r2, r3
 8004804:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004806:	687b      	ldr	r3, [r7, #4]
}
 8004808:	4618      	mov	r0, r3
 800480a:	371c      	adds	r7, #28
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr
 8004814:	40021000 	.word	0x40021000
 8004818:	007a1200 	.word	0x007a1200
 800481c:	00f42400 	.word	0x00f42400

08004820 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004828:	2300      	movs	r3, #0
 800482a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800482c:	2300      	movs	r3, #0
 800482e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 8098 	beq.w	800496e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800483e:	2300      	movs	r3, #0
 8004840:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004842:	4b43      	ldr	r3, [pc, #268]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10d      	bne.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800484e:	4b40      	ldr	r3, [pc, #256]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004852:	4a3f      	ldr	r2, [pc, #252]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004858:	6593      	str	r3, [r2, #88]	; 0x58
 800485a:	4b3d      	ldr	r3, [pc, #244]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800485c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800485e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004862:	60bb      	str	r3, [r7, #8]
 8004864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004866:	2301      	movs	r3, #1
 8004868:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800486a:	4b3a      	ldr	r3, [pc, #232]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a39      	ldr	r2, [pc, #228]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004874:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004876:	f7fc fd61 	bl	800133c <HAL_GetTick>
 800487a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800487c:	e009      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800487e:	f7fc fd5d 	bl	800133c <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d902      	bls.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	74fb      	strb	r3, [r7, #19]
        break;
 8004890:	e005      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004892:	4b30      	ldr	r3, [pc, #192]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0ef      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800489e:	7cfb      	ldrb	r3, [r7, #19]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d159      	bne.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048a4:	4b2a      	ldr	r3, [pc, #168]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d01e      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d019      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048c0:	4b23      	ldr	r3, [pc, #140]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048cc:	4b20      	ldr	r3, [pc, #128]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d2:	4a1f      	ldr	r2, [pc, #124]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048dc:	4b1c      	ldr	r3, [pc, #112]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e2:	4a1b      	ldr	r2, [pc, #108]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048ec:	4a18      	ldr	r2, [pc, #96]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d016      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048fe:	f7fc fd1d 	bl	800133c <HAL_GetTick>
 8004902:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004904:	e00b      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004906:	f7fc fd19 	bl	800133c <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	f241 3288 	movw	r2, #5000	; 0x1388
 8004914:	4293      	cmp	r3, r2
 8004916:	d902      	bls.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	74fb      	strb	r3, [r7, #19]
            break;
 800491c:	e006      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800491e:	4b0c      	ldr	r3, [pc, #48]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0ec      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800492c:	7cfb      	ldrb	r3, [r7, #19]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10b      	bne.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004932:	4b07      	ldr	r3, [pc, #28]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004938:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004940:	4903      	ldr	r1, [pc, #12]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004942:	4313      	orrs	r3, r2
 8004944:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004948:	e008      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800494a:	7cfb      	ldrb	r3, [r7, #19]
 800494c:	74bb      	strb	r3, [r7, #18]
 800494e:	e005      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004950:	40021000 	.word	0x40021000
 8004954:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004958:	7cfb      	ldrb	r3, [r7, #19]
 800495a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800495c:	7c7b      	ldrb	r3, [r7, #17]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d105      	bne.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004962:	4ba6      	ldr	r3, [pc, #664]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004966:	4aa5      	ldr	r2, [pc, #660]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800496c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00a      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800497a:	4ba0      	ldr	r3, [pc, #640]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800497c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004980:	f023 0203 	bic.w	r2, r3, #3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	499c      	ldr	r1, [pc, #624]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800498a:	4313      	orrs	r3, r2
 800498c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00a      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800499c:	4b97      	ldr	r3, [pc, #604]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800499e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a2:	f023 020c 	bic.w	r2, r3, #12
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	4994      	ldr	r1, [pc, #592]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0304 	and.w	r3, r3, #4
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049be:	4b8f      	ldr	r3, [pc, #572]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	498b      	ldr	r1, [pc, #556]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0308 	and.w	r3, r3, #8
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00a      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049e0:	4b86      	ldr	r3, [pc, #536]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	4983      	ldr	r1, [pc, #524]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0320 	and.w	r3, r3, #32
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00a      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a02:	4b7e      	ldr	r3, [pc, #504]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a08:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	497a      	ldr	r1, [pc, #488]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00a      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a24:	4b75      	ldr	r3, [pc, #468]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	4972      	ldr	r1, [pc, #456]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00a      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a46:	4b6d      	ldr	r3, [pc, #436]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	69db      	ldr	r3, [r3, #28]
 8004a54:	4969      	ldr	r1, [pc, #420]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00a      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a68:	4b64      	ldr	r3, [pc, #400]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	4961      	ldr	r1, [pc, #388]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00a      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a8a:	4b5c      	ldr	r3, [pc, #368]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a98:	4958      	ldr	r1, [pc, #352]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d015      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004aac:	4b53      	ldr	r3, [pc, #332]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aba:	4950      	ldr	r1, [pc, #320]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aca:	d105      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004acc:	4b4b      	ldr	r3, [pc, #300]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	4a4a      	ldr	r2, [pc, #296]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ad2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ad6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d015      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ae4:	4b45      	ldr	r3, [pc, #276]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af2:	4942      	ldr	r1, [pc, #264]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b02:	d105      	bne.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b04:	4b3d      	ldr	r3, [pc, #244]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	4a3c      	ldr	r2, [pc, #240]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b0e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d015      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b1c:	4b37      	ldr	r3, [pc, #220]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b22:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2a:	4934      	ldr	r1, [pc, #208]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b3a:	d105      	bne.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b3c:	4b2f      	ldr	r3, [pc, #188]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	4a2e      	ldr	r2, [pc, #184]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b46:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d015      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b54:	4b29      	ldr	r3, [pc, #164]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b62:	4926      	ldr	r1, [pc, #152]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b72:	d105      	bne.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b74:	4b21      	ldr	r3, [pc, #132]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	4a20      	ldr	r2, [pc, #128]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b7e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d015      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b8c:	4b1b      	ldr	r3, [pc, #108]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9a:	4918      	ldr	r1, [pc, #96]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004baa:	d105      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bac:	4b13      	ldr	r3, [pc, #76]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	4a12      	ldr	r2, [pc, #72]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bb6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d015      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004bc4:	4b0d      	ldr	r3, [pc, #52]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd2:	490a      	ldr	r1, [pc, #40]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004be2:	d105      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004be4:	4b05      	ldr	r3, [pc, #20]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	4a04      	ldr	r2, [pc, #16]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004bf0:	7cbb      	ldrb	r3, [r7, #18]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	40021000 	.word	0x40021000

08004c00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e049      	b.n	8004ca6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d106      	bne.n	8004c2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7fc f9b4 	bl	8000f94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	3304      	adds	r3, #4
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4610      	mov	r0, r2
 8004c40:	f001 f814 	bl	8005c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3708      	adds	r7, #8
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
	...

08004cb0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d001      	beq.n	8004cc8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e042      	b.n	8004d4e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a21      	ldr	r2, [pc, #132]	; (8004d5c <HAL_TIM_Base_Start+0xac>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d018      	beq.n	8004d0c <HAL_TIM_Base_Start+0x5c>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce2:	d013      	beq.n	8004d0c <HAL_TIM_Base_Start+0x5c>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a1d      	ldr	r2, [pc, #116]	; (8004d60 <HAL_TIM_Base_Start+0xb0>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d00e      	beq.n	8004d0c <HAL_TIM_Base_Start+0x5c>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a1c      	ldr	r2, [pc, #112]	; (8004d64 <HAL_TIM_Base_Start+0xb4>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d009      	beq.n	8004d0c <HAL_TIM_Base_Start+0x5c>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a1a      	ldr	r2, [pc, #104]	; (8004d68 <HAL_TIM_Base_Start+0xb8>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d004      	beq.n	8004d0c <HAL_TIM_Base_Start+0x5c>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a19      	ldr	r2, [pc, #100]	; (8004d6c <HAL_TIM_Base_Start+0xbc>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d115      	bne.n	8004d38 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689a      	ldr	r2, [r3, #8]
 8004d12:	4b17      	ldr	r3, [pc, #92]	; (8004d70 <HAL_TIM_Base_Start+0xc0>)
 8004d14:	4013      	ands	r3, r2
 8004d16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2b06      	cmp	r3, #6
 8004d1c:	d015      	beq.n	8004d4a <HAL_TIM_Base_Start+0x9a>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d24:	d011      	beq.n	8004d4a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f042 0201 	orr.w	r2, r2, #1
 8004d34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d36:	e008      	b.n	8004d4a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0201 	orr.w	r2, r2, #1
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	e000      	b.n	8004d4c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	40012c00 	.word	0x40012c00
 8004d60:	40000400 	.word	0x40000400
 8004d64:	40000800 	.word	0x40000800
 8004d68:	40013400 	.word	0x40013400
 8004d6c:	40014000 	.word	0x40014000
 8004d70:	00010007 	.word	0x00010007

08004d74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e049      	b.n	8004e1a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d106      	bne.n	8004da0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f841 	bl	8004e22 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2202      	movs	r2, #2
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	3304      	adds	r3, #4
 8004db0:	4619      	mov	r1, r3
 8004db2:	4610      	mov	r0, r2
 8004db4:	f000 ff5a 	bl	8005c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e2a:	bf00      	nop
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
	...

08004e38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d109      	bne.n	8004e5c <HAL_TIM_PWM_Start+0x24>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	bf14      	ite	ne
 8004e54:	2301      	movne	r3, #1
 8004e56:	2300      	moveq	r3, #0
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	e03c      	b.n	8004ed6 <HAL_TIM_PWM_Start+0x9e>
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d109      	bne.n	8004e76 <HAL_TIM_PWM_Start+0x3e>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	bf14      	ite	ne
 8004e6e:	2301      	movne	r3, #1
 8004e70:	2300      	moveq	r3, #0
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	e02f      	b.n	8004ed6 <HAL_TIM_PWM_Start+0x9e>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d109      	bne.n	8004e90 <HAL_TIM_PWM_Start+0x58>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	bf14      	ite	ne
 8004e88:	2301      	movne	r3, #1
 8004e8a:	2300      	moveq	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	e022      	b.n	8004ed6 <HAL_TIM_PWM_Start+0x9e>
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	2b0c      	cmp	r3, #12
 8004e94:	d109      	bne.n	8004eaa <HAL_TIM_PWM_Start+0x72>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	bf14      	ite	ne
 8004ea2:	2301      	movne	r3, #1
 8004ea4:	2300      	moveq	r3, #0
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	e015      	b.n	8004ed6 <HAL_TIM_PWM_Start+0x9e>
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b10      	cmp	r3, #16
 8004eae:	d109      	bne.n	8004ec4 <HAL_TIM_PWM_Start+0x8c>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	bf14      	ite	ne
 8004ebc:	2301      	movne	r3, #1
 8004ebe:	2300      	moveq	r3, #0
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	e008      	b.n	8004ed6 <HAL_TIM_PWM_Start+0x9e>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	bf14      	ite	ne
 8004ed0:	2301      	movne	r3, #1
 8004ed2:	2300      	moveq	r3, #0
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e097      	b.n	800500e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d104      	bne.n	8004eee <HAL_TIM_PWM_Start+0xb6>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eec:	e023      	b.n	8004f36 <HAL_TIM_PWM_Start+0xfe>
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	2b04      	cmp	r3, #4
 8004ef2:	d104      	bne.n	8004efe <HAL_TIM_PWM_Start+0xc6>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004efc:	e01b      	b.n	8004f36 <HAL_TIM_PWM_Start+0xfe>
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d104      	bne.n	8004f0e <HAL_TIM_PWM_Start+0xd6>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2202      	movs	r2, #2
 8004f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f0c:	e013      	b.n	8004f36 <HAL_TIM_PWM_Start+0xfe>
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b0c      	cmp	r3, #12
 8004f12:	d104      	bne.n	8004f1e <HAL_TIM_PWM_Start+0xe6>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f1c:	e00b      	b.n	8004f36 <HAL_TIM_PWM_Start+0xfe>
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b10      	cmp	r3, #16
 8004f22:	d104      	bne.n	8004f2e <HAL_TIM_PWM_Start+0xf6>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f2c:	e003      	b.n	8004f36 <HAL_TIM_PWM_Start+0xfe>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2202      	movs	r2, #2
 8004f32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	6839      	ldr	r1, [r7, #0]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f001 fbd4 	bl	80066ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a33      	ldr	r2, [pc, #204]	; (8005018 <HAL_TIM_PWM_Start+0x1e0>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d013      	beq.n	8004f76 <HAL_TIM_PWM_Start+0x13e>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a32      	ldr	r2, [pc, #200]	; (800501c <HAL_TIM_PWM_Start+0x1e4>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d00e      	beq.n	8004f76 <HAL_TIM_PWM_Start+0x13e>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a30      	ldr	r2, [pc, #192]	; (8005020 <HAL_TIM_PWM_Start+0x1e8>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d009      	beq.n	8004f76 <HAL_TIM_PWM_Start+0x13e>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a2f      	ldr	r2, [pc, #188]	; (8005024 <HAL_TIM_PWM_Start+0x1ec>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d004      	beq.n	8004f76 <HAL_TIM_PWM_Start+0x13e>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a2d      	ldr	r2, [pc, #180]	; (8005028 <HAL_TIM_PWM_Start+0x1f0>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d101      	bne.n	8004f7a <HAL_TIM_PWM_Start+0x142>
 8004f76:	2301      	movs	r3, #1
 8004f78:	e000      	b.n	8004f7c <HAL_TIM_PWM_Start+0x144>
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d007      	beq.n	8004f90 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f8e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a20      	ldr	r2, [pc, #128]	; (8005018 <HAL_TIM_PWM_Start+0x1e0>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d018      	beq.n	8004fcc <HAL_TIM_PWM_Start+0x194>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa2:	d013      	beq.n	8004fcc <HAL_TIM_PWM_Start+0x194>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a20      	ldr	r2, [pc, #128]	; (800502c <HAL_TIM_PWM_Start+0x1f4>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d00e      	beq.n	8004fcc <HAL_TIM_PWM_Start+0x194>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a1f      	ldr	r2, [pc, #124]	; (8005030 <HAL_TIM_PWM_Start+0x1f8>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d009      	beq.n	8004fcc <HAL_TIM_PWM_Start+0x194>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a17      	ldr	r2, [pc, #92]	; (800501c <HAL_TIM_PWM_Start+0x1e4>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d004      	beq.n	8004fcc <HAL_TIM_PWM_Start+0x194>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a16      	ldr	r2, [pc, #88]	; (8005020 <HAL_TIM_PWM_Start+0x1e8>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d115      	bne.n	8004ff8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689a      	ldr	r2, [r3, #8]
 8004fd2:	4b18      	ldr	r3, [pc, #96]	; (8005034 <HAL_TIM_PWM_Start+0x1fc>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2b06      	cmp	r3, #6
 8004fdc:	d015      	beq.n	800500a <HAL_TIM_PWM_Start+0x1d2>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fe4:	d011      	beq.n	800500a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f042 0201 	orr.w	r2, r2, #1
 8004ff4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ff6:	e008      	b.n	800500a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f042 0201 	orr.w	r2, r2, #1
 8005006:	601a      	str	r2, [r3, #0]
 8005008:	e000      	b.n	800500c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800500a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	40012c00 	.word	0x40012c00
 800501c:	40013400 	.word	0x40013400
 8005020:	40014000 	.word	0x40014000
 8005024:	40014400 	.word	0x40014400
 8005028:	40014800 	.word	0x40014800
 800502c:	40000400 	.word	0x40000400
 8005030:	40000800 	.word	0x40000800
 8005034:	00010007 	.word	0x00010007

08005038 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e049      	b.n	80050de <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d106      	bne.n	8005064 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f7fc f800 	bl	8001064 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2202      	movs	r2, #2
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	3304      	adds	r3, #4
 8005074:	4619      	mov	r1, r3
 8005076:	4610      	mov	r0, r2
 8005078:	f000 fdf8 	bl	8005c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
	...

080050e8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d104      	bne.n	8005102 <HAL_TIM_IC_Start_IT+0x1a>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	e023      	b.n	800514a <HAL_TIM_IC_Start_IT+0x62>
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2b04      	cmp	r3, #4
 8005106:	d104      	bne.n	8005112 <HAL_TIM_IC_Start_IT+0x2a>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800510e:	b2db      	uxtb	r3, r3
 8005110:	e01b      	b.n	800514a <HAL_TIM_IC_Start_IT+0x62>
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2b08      	cmp	r3, #8
 8005116:	d104      	bne.n	8005122 <HAL_TIM_IC_Start_IT+0x3a>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800511e:	b2db      	uxtb	r3, r3
 8005120:	e013      	b.n	800514a <HAL_TIM_IC_Start_IT+0x62>
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2b0c      	cmp	r3, #12
 8005126:	d104      	bne.n	8005132 <HAL_TIM_IC_Start_IT+0x4a>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800512e:	b2db      	uxtb	r3, r3
 8005130:	e00b      	b.n	800514a <HAL_TIM_IC_Start_IT+0x62>
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b10      	cmp	r3, #16
 8005136:	d104      	bne.n	8005142 <HAL_TIM_IC_Start_IT+0x5a>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800513e:	b2db      	uxtb	r3, r3
 8005140:	e003      	b.n	800514a <HAL_TIM_IC_Start_IT+0x62>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005148:	b2db      	uxtb	r3, r3
 800514a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d104      	bne.n	800515c <HAL_TIM_IC_Start_IT+0x74>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005158:	b2db      	uxtb	r3, r3
 800515a:	e013      	b.n	8005184 <HAL_TIM_IC_Start_IT+0x9c>
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	2b04      	cmp	r3, #4
 8005160:	d104      	bne.n	800516c <HAL_TIM_IC_Start_IT+0x84>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005168:	b2db      	uxtb	r3, r3
 800516a:	e00b      	b.n	8005184 <HAL_TIM_IC_Start_IT+0x9c>
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	2b08      	cmp	r3, #8
 8005170:	d104      	bne.n	800517c <HAL_TIM_IC_Start_IT+0x94>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005178:	b2db      	uxtb	r3, r3
 800517a:	e003      	b.n	8005184 <HAL_TIM_IC_Start_IT+0x9c>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005182:	b2db      	uxtb	r3, r3
 8005184:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005186:	7bfb      	ldrb	r3, [r7, #15]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d102      	bne.n	8005192 <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800518c:	7bbb      	ldrb	r3, [r7, #14]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d001      	beq.n	8005196 <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e0d3      	b.n	800533e <HAL_TIM_IC_Start_IT+0x256>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d104      	bne.n	80051a6 <HAL_TIM_IC_Start_IT+0xbe>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2202      	movs	r2, #2
 80051a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051a4:	e023      	b.n	80051ee <HAL_TIM_IC_Start_IT+0x106>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b04      	cmp	r3, #4
 80051aa:	d104      	bne.n	80051b6 <HAL_TIM_IC_Start_IT+0xce>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051b4:	e01b      	b.n	80051ee <HAL_TIM_IC_Start_IT+0x106>
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b08      	cmp	r3, #8
 80051ba:	d104      	bne.n	80051c6 <HAL_TIM_IC_Start_IT+0xde>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051c4:	e013      	b.n	80051ee <HAL_TIM_IC_Start_IT+0x106>
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	2b0c      	cmp	r3, #12
 80051ca:	d104      	bne.n	80051d6 <HAL_TIM_IC_Start_IT+0xee>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2202      	movs	r2, #2
 80051d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051d4:	e00b      	b.n	80051ee <HAL_TIM_IC_Start_IT+0x106>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2b10      	cmp	r3, #16
 80051da:	d104      	bne.n	80051e6 <HAL_TIM_IC_Start_IT+0xfe>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051e4:	e003      	b.n	80051ee <HAL_TIM_IC_Start_IT+0x106>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2202      	movs	r2, #2
 80051ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d104      	bne.n	80051fe <HAL_TIM_IC_Start_IT+0x116>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2202      	movs	r2, #2
 80051f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051fc:	e013      	b.n	8005226 <HAL_TIM_IC_Start_IT+0x13e>
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b04      	cmp	r3, #4
 8005202:	d104      	bne.n	800520e <HAL_TIM_IC_Start_IT+0x126>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800520c:	e00b      	b.n	8005226 <HAL_TIM_IC_Start_IT+0x13e>
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2b08      	cmp	r3, #8
 8005212:	d104      	bne.n	800521e <HAL_TIM_IC_Start_IT+0x136>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2202      	movs	r2, #2
 8005218:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800521c:	e003      	b.n	8005226 <HAL_TIM_IC_Start_IT+0x13e>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2202      	movs	r2, #2
 8005222:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b0c      	cmp	r3, #12
 800522a:	d841      	bhi.n	80052b0 <HAL_TIM_IC_Start_IT+0x1c8>
 800522c:	a201      	add	r2, pc, #4	; (adr r2, 8005234 <HAL_TIM_IC_Start_IT+0x14c>)
 800522e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005232:	bf00      	nop
 8005234:	08005269 	.word	0x08005269
 8005238:	080052b1 	.word	0x080052b1
 800523c:	080052b1 	.word	0x080052b1
 8005240:	080052b1 	.word	0x080052b1
 8005244:	0800527b 	.word	0x0800527b
 8005248:	080052b1 	.word	0x080052b1
 800524c:	080052b1 	.word	0x080052b1
 8005250:	080052b1 	.word	0x080052b1
 8005254:	0800528d 	.word	0x0800528d
 8005258:	080052b1 	.word	0x080052b1
 800525c:	080052b1 	.word	0x080052b1
 8005260:	080052b1 	.word	0x080052b1
 8005264:	0800529f 	.word	0x0800529f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f042 0202 	orr.w	r2, r2, #2
 8005276:	60da      	str	r2, [r3, #12]
      break;
 8005278:	e01b      	b.n	80052b2 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68da      	ldr	r2, [r3, #12]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f042 0204 	orr.w	r2, r2, #4
 8005288:	60da      	str	r2, [r3, #12]
      break;
 800528a:	e012      	b.n	80052b2 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68da      	ldr	r2, [r3, #12]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f042 0208 	orr.w	r2, r2, #8
 800529a:	60da      	str	r2, [r3, #12]
      break;
 800529c:	e009      	b.n	80052b2 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68da      	ldr	r2, [r3, #12]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f042 0210 	orr.w	r2, r2, #16
 80052ac:	60da      	str	r2, [r3, #12]
      break;
 80052ae:	e000      	b.n	80052b2 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 80052b0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2201      	movs	r2, #1
 80052b8:	6839      	ldr	r1, [r7, #0]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f001 fa16 	bl	80066ec <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a20      	ldr	r2, [pc, #128]	; (8005348 <HAL_TIM_IC_Start_IT+0x260>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d018      	beq.n	80052fc <HAL_TIM_IC_Start_IT+0x214>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d2:	d013      	beq.n	80052fc <HAL_TIM_IC_Start_IT+0x214>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a1c      	ldr	r2, [pc, #112]	; (800534c <HAL_TIM_IC_Start_IT+0x264>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00e      	beq.n	80052fc <HAL_TIM_IC_Start_IT+0x214>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a1b      	ldr	r2, [pc, #108]	; (8005350 <HAL_TIM_IC_Start_IT+0x268>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d009      	beq.n	80052fc <HAL_TIM_IC_Start_IT+0x214>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a19      	ldr	r2, [pc, #100]	; (8005354 <HAL_TIM_IC_Start_IT+0x26c>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d004      	beq.n	80052fc <HAL_TIM_IC_Start_IT+0x214>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a18      	ldr	r2, [pc, #96]	; (8005358 <HAL_TIM_IC_Start_IT+0x270>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d115      	bne.n	8005328 <HAL_TIM_IC_Start_IT+0x240>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689a      	ldr	r2, [r3, #8]
 8005302:	4b16      	ldr	r3, [pc, #88]	; (800535c <HAL_TIM_IC_Start_IT+0x274>)
 8005304:	4013      	ands	r3, r2
 8005306:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	2b06      	cmp	r3, #6
 800530c:	d015      	beq.n	800533a <HAL_TIM_IC_Start_IT+0x252>
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005314:	d011      	beq.n	800533a <HAL_TIM_IC_Start_IT+0x252>
    {
      __HAL_TIM_ENABLE(htim);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f042 0201 	orr.w	r2, r2, #1
 8005324:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005326:	e008      	b.n	800533a <HAL_TIM_IC_Start_IT+0x252>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 0201 	orr.w	r2, r2, #1
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	e000      	b.n	800533c <HAL_TIM_IC_Start_IT+0x254>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800533a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	40012c00 	.word	0x40012c00
 800534c:	40000400 	.word	0x40000400
 8005350:	40000800 	.word	0x40000800
 8005354:	40013400 	.word	0x40013400
 8005358:	40014000 	.word	0x40014000
 800535c:	00010007 	.word	0x00010007

08005360 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b02      	cmp	r3, #2
 8005374:	d122      	bne.n	80053bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b02      	cmp	r3, #2
 8005382:	d11b      	bne.n	80053bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f06f 0202 	mvn.w	r2, #2
 800538c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	f003 0303 	and.w	r3, r3, #3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f7fb fb6c 	bl	8000a80 <HAL_TIM_IC_CaptureCallback>
 80053a8:	e005      	b.n	80053b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fc40 	bl	8005c30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 fc47 	bl	8005c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	f003 0304 	and.w	r3, r3, #4
 80053c6:	2b04      	cmp	r3, #4
 80053c8:	d122      	bne.n	8005410 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f003 0304 	and.w	r3, r3, #4
 80053d4:	2b04      	cmp	r3, #4
 80053d6:	d11b      	bne.n	8005410 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f06f 0204 	mvn.w	r2, #4
 80053e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2202      	movs	r2, #2
 80053e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7fb fb42 	bl	8000a80 <HAL_TIM_IC_CaptureCallback>
 80053fc:	e005      	b.n	800540a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 fc16 	bl	8005c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 fc1d 	bl	8005c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	f003 0308 	and.w	r3, r3, #8
 800541a:	2b08      	cmp	r3, #8
 800541c:	d122      	bne.n	8005464 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	f003 0308 	and.w	r3, r3, #8
 8005428:	2b08      	cmp	r3, #8
 800542a:	d11b      	bne.n	8005464 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f06f 0208 	mvn.w	r2, #8
 8005434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2204      	movs	r2, #4
 800543a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	f003 0303 	and.w	r3, r3, #3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7fb fb18 	bl	8000a80 <HAL_TIM_IC_CaptureCallback>
 8005450:	e005      	b.n	800545e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 fbec 	bl	8005c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 fbf3 	bl	8005c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	f003 0310 	and.w	r3, r3, #16
 800546e:	2b10      	cmp	r3, #16
 8005470:	d122      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f003 0310 	and.w	r3, r3, #16
 800547c:	2b10      	cmp	r3, #16
 800547e:	d11b      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f06f 0210 	mvn.w	r2, #16
 8005488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2208      	movs	r2, #8
 800548e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	69db      	ldr	r3, [r3, #28]
 8005496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7fb faee 	bl	8000a80 <HAL_TIM_IC_CaptureCallback>
 80054a4:	e005      	b.n	80054b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fbc2 	bl	8005c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 fbc9 	bl	8005c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d10e      	bne.n	80054e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d107      	bne.n	80054e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f06f 0201 	mvn.w	r2, #1
 80054dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 fb9c 	bl	8005c1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ee:	2b80      	cmp	r3, #128	; 0x80
 80054f0:	d10e      	bne.n	8005510 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054fc:	2b80      	cmp	r3, #128	; 0x80
 80054fe:	d107      	bne.n	8005510 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f001 face 	bl	8006aac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800551a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800551e:	d10e      	bne.n	800553e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800552a:	2b80      	cmp	r3, #128	; 0x80
 800552c:	d107      	bne.n	800553e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f001 fac1 	bl	8006ac0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005548:	2b40      	cmp	r3, #64	; 0x40
 800554a:	d10e      	bne.n	800556a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005556:	2b40      	cmp	r3, #64	; 0x40
 8005558:	d107      	bne.n	800556a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 fb77 	bl	8005c58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	f003 0320 	and.w	r3, r3, #32
 8005574:	2b20      	cmp	r3, #32
 8005576:	d10e      	bne.n	8005596 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	f003 0320 	and.w	r3, r3, #32
 8005582:	2b20      	cmp	r3, #32
 8005584:	d107      	bne.n	8005596 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f06f 0220 	mvn.w	r2, #32
 800558e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f001 fa81 	bl	8006a98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055a4:	d10f      	bne.n	80055c6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055b4:	d107      	bne.n	80055c6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80055be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f001 fa87 	bl	8006ad4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055d4:	d10f      	bne.n	80055f6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055e4:	d107      	bne.n	80055f6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80055ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f001 fa79 	bl	8006ae8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005600:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005604:	d10f      	bne.n	8005626 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005610:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005614:	d107      	bne.n	8005626 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800561e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f001 fa6b 	bl	8006afc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005630:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005634:	d10f      	bne.n	8005656 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005640:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005644:	d107      	bne.n	8005656 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800564e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f001 fa5d 	bl	8006b10 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005656:	bf00      	nop
 8005658:	3708      	adds	r7, #8
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b084      	sub	sp, #16
 8005662:	af00      	add	r7, sp, #0
 8005664:	60f8      	str	r0, [r7, #12]
 8005666:	60b9      	str	r1, [r7, #8]
 8005668:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005670:	2b01      	cmp	r3, #1
 8005672:	d101      	bne.n	8005678 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005674:	2302      	movs	r3, #2
 8005676:	e082      	b.n	800577e <HAL_TIM_IC_ConfigChannel+0x120>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d11b      	bne.n	80056be <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6818      	ldr	r0, [r3, #0]
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	6819      	ldr	r1, [r3, #0]
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	f000 fe6f 	bl	8006378 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	699a      	ldr	r2, [r3, #24]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 020c 	bic.w	r2, r2, #12
 80056a8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6999      	ldr	r1, [r3, #24]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	430a      	orrs	r2, r1
 80056ba:	619a      	str	r2, [r3, #24]
 80056bc:	e05a      	b.n	8005774 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b04      	cmp	r3, #4
 80056c2:	d11c      	bne.n	80056fe <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6818      	ldr	r0, [r3, #0]
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	6819      	ldr	r1, [r3, #0]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	f000 fee7 	bl	80064a6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	699a      	ldr	r2, [r3, #24]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80056e6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6999      	ldr	r1, [r3, #24]
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	021a      	lsls	r2, r3, #8
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	430a      	orrs	r2, r1
 80056fa:	619a      	str	r2, [r3, #24]
 80056fc:	e03a      	b.n	8005774 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b08      	cmp	r3, #8
 8005702:	d11b      	bne.n	800573c <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6818      	ldr	r0, [r3, #0]
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	6819      	ldr	r1, [r3, #0]
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f000 ff34 	bl	8006580 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	69da      	ldr	r2, [r3, #28]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 020c 	bic.w	r2, r2, #12
 8005726:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	69d9      	ldr	r1, [r3, #28]
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	689a      	ldr	r2, [r3, #8]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	430a      	orrs	r2, r1
 8005738:	61da      	str	r2, [r3, #28]
 800573a:	e01b      	b.n	8005774 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6818      	ldr	r0, [r3, #0]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	6819      	ldr	r1, [r3, #0]
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f000 ff54 	bl	80065f8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	69da      	ldr	r2, [r3, #28]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800575e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	69d9      	ldr	r1, [r3, #28]
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	021a      	lsls	r2, r3, #8
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
	...

08005788 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800579a:	2b01      	cmp	r3, #1
 800579c:	d101      	bne.n	80057a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800579e:	2302      	movs	r3, #2
 80057a0:	e0fd      	b.n	800599e <HAL_TIM_PWM_ConfigChannel+0x216>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b14      	cmp	r3, #20
 80057ae:	f200 80f0 	bhi.w	8005992 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80057b2:	a201      	add	r2, pc, #4	; (adr r2, 80057b8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80057b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b8:	0800580d 	.word	0x0800580d
 80057bc:	08005993 	.word	0x08005993
 80057c0:	08005993 	.word	0x08005993
 80057c4:	08005993 	.word	0x08005993
 80057c8:	0800584d 	.word	0x0800584d
 80057cc:	08005993 	.word	0x08005993
 80057d0:	08005993 	.word	0x08005993
 80057d4:	08005993 	.word	0x08005993
 80057d8:	0800588f 	.word	0x0800588f
 80057dc:	08005993 	.word	0x08005993
 80057e0:	08005993 	.word	0x08005993
 80057e4:	08005993 	.word	0x08005993
 80057e8:	080058cf 	.word	0x080058cf
 80057ec:	08005993 	.word	0x08005993
 80057f0:	08005993 	.word	0x08005993
 80057f4:	08005993 	.word	0x08005993
 80057f8:	08005911 	.word	0x08005911
 80057fc:	08005993 	.word	0x08005993
 8005800:	08005993 	.word	0x08005993
 8005804:	08005993 	.word	0x08005993
 8005808:	08005951 	.word	0x08005951
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68b9      	ldr	r1, [r7, #8]
 8005812:	4618      	mov	r0, r3
 8005814:	f000 faba 	bl	8005d8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699a      	ldr	r2, [r3, #24]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f042 0208 	orr.w	r2, r2, #8
 8005826:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	699a      	ldr	r2, [r3, #24]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f022 0204 	bic.w	r2, r2, #4
 8005836:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6999      	ldr	r1, [r3, #24]
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	691a      	ldr	r2, [r3, #16]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	619a      	str	r2, [r3, #24]
      break;
 800584a:	e0a3      	b.n	8005994 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68b9      	ldr	r1, [r7, #8]
 8005852:	4618      	mov	r0, r3
 8005854:	f000 fb2a 	bl	8005eac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699a      	ldr	r2, [r3, #24]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005866:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699a      	ldr	r2, [r3, #24]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005876:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6999      	ldr	r1, [r3, #24]
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	021a      	lsls	r2, r3, #8
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	430a      	orrs	r2, r1
 800588a:	619a      	str	r2, [r3, #24]
      break;
 800588c:	e082      	b.n	8005994 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68b9      	ldr	r1, [r7, #8]
 8005894:	4618      	mov	r0, r3
 8005896:	f000 fb93 	bl	8005fc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	69da      	ldr	r2, [r3, #28]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f042 0208 	orr.w	r2, r2, #8
 80058a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	69da      	ldr	r2, [r3, #28]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 0204 	bic.w	r2, r2, #4
 80058b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	69d9      	ldr	r1, [r3, #28]
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	691a      	ldr	r2, [r3, #16]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	430a      	orrs	r2, r1
 80058ca:	61da      	str	r2, [r3, #28]
      break;
 80058cc:	e062      	b.n	8005994 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68b9      	ldr	r1, [r7, #8]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f000 fbfb 	bl	80060d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69da      	ldr	r2, [r3, #28]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69da      	ldr	r2, [r3, #28]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69d9      	ldr	r1, [r3, #28]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	021a      	lsls	r2, r3, #8
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	430a      	orrs	r2, r1
 800590c:	61da      	str	r2, [r3, #28]
      break;
 800590e:	e041      	b.n	8005994 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68b9      	ldr	r1, [r7, #8]
 8005916:	4618      	mov	r0, r3
 8005918:	f000 fc64 	bl	80061e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f042 0208 	orr.w	r2, r2, #8
 800592a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f022 0204 	bic.w	r2, r2, #4
 800593a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	691a      	ldr	r2, [r3, #16]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800594e:	e021      	b.n	8005994 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68b9      	ldr	r1, [r7, #8]
 8005956:	4618      	mov	r0, r3
 8005958:	f000 fca8 	bl	80062ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800596a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800597a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	021a      	lsls	r2, r3, #8
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005990:	e000      	b.n	8005994 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005992:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop

080059a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d101      	bne.n	80059c0 <HAL_TIM_ConfigClockSource+0x18>
 80059bc:	2302      	movs	r3, #2
 80059be:	e0dd      	b.n	8005b7c <HAL_TIM_ConfigClockSource+0x1d4>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2202      	movs	r2, #2
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80059de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a62      	ldr	r2, [pc, #392]	; (8005b84 <HAL_TIM_ConfigClockSource+0x1dc>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	f000 80a9 	beq.w	8005b52 <HAL_TIM_ConfigClockSource+0x1aa>
 8005a00:	4a60      	ldr	r2, [pc, #384]	; (8005b84 <HAL_TIM_ConfigClockSource+0x1dc>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	f200 80ae 	bhi.w	8005b64 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a08:	4a5f      	ldr	r2, [pc, #380]	; (8005b88 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	f000 80a1 	beq.w	8005b52 <HAL_TIM_ConfigClockSource+0x1aa>
 8005a10:	4a5d      	ldr	r2, [pc, #372]	; (8005b88 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	f200 80a6 	bhi.w	8005b64 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a18:	4a5c      	ldr	r2, [pc, #368]	; (8005b8c <HAL_TIM_ConfigClockSource+0x1e4>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	f000 8099 	beq.w	8005b52 <HAL_TIM_ConfigClockSource+0x1aa>
 8005a20:	4a5a      	ldr	r2, [pc, #360]	; (8005b8c <HAL_TIM_ConfigClockSource+0x1e4>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	f200 809e 	bhi.w	8005b64 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a28:	4a59      	ldr	r2, [pc, #356]	; (8005b90 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	f000 8091 	beq.w	8005b52 <HAL_TIM_ConfigClockSource+0x1aa>
 8005a30:	4a57      	ldr	r2, [pc, #348]	; (8005b90 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	f200 8096 	bhi.w	8005b64 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a38:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005a3c:	f000 8089 	beq.w	8005b52 <HAL_TIM_ConfigClockSource+0x1aa>
 8005a40:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005a44:	f200 808e 	bhi.w	8005b64 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a4c:	d03e      	beq.n	8005acc <HAL_TIM_ConfigClockSource+0x124>
 8005a4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a52:	f200 8087 	bhi.w	8005b64 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a5a:	f000 8085 	beq.w	8005b68 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a62:	d87f      	bhi.n	8005b64 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a64:	2b70      	cmp	r3, #112	; 0x70
 8005a66:	d01a      	beq.n	8005a9e <HAL_TIM_ConfigClockSource+0xf6>
 8005a68:	2b70      	cmp	r3, #112	; 0x70
 8005a6a:	d87b      	bhi.n	8005b64 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a6c:	2b60      	cmp	r3, #96	; 0x60
 8005a6e:	d050      	beq.n	8005b12 <HAL_TIM_ConfigClockSource+0x16a>
 8005a70:	2b60      	cmp	r3, #96	; 0x60
 8005a72:	d877      	bhi.n	8005b64 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a74:	2b50      	cmp	r3, #80	; 0x50
 8005a76:	d03c      	beq.n	8005af2 <HAL_TIM_ConfigClockSource+0x14a>
 8005a78:	2b50      	cmp	r3, #80	; 0x50
 8005a7a:	d873      	bhi.n	8005b64 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a7c:	2b40      	cmp	r3, #64	; 0x40
 8005a7e:	d058      	beq.n	8005b32 <HAL_TIM_ConfigClockSource+0x18a>
 8005a80:	2b40      	cmp	r3, #64	; 0x40
 8005a82:	d86f      	bhi.n	8005b64 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a84:	2b30      	cmp	r3, #48	; 0x30
 8005a86:	d064      	beq.n	8005b52 <HAL_TIM_ConfigClockSource+0x1aa>
 8005a88:	2b30      	cmp	r3, #48	; 0x30
 8005a8a:	d86b      	bhi.n	8005b64 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a8c:	2b20      	cmp	r3, #32
 8005a8e:	d060      	beq.n	8005b52 <HAL_TIM_ConfigClockSource+0x1aa>
 8005a90:	2b20      	cmp	r3, #32
 8005a92:	d867      	bhi.n	8005b64 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d05c      	beq.n	8005b52 <HAL_TIM_ConfigClockSource+0x1aa>
 8005a98:	2b10      	cmp	r3, #16
 8005a9a:	d05a      	beq.n	8005b52 <HAL_TIM_ConfigClockSource+0x1aa>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005a9c:	e062      	b.n	8005b64 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6818      	ldr	r0, [r3, #0]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	6899      	ldr	r1, [r3, #8]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	f000 fdfd 	bl	80066ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ac0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	609a      	str	r2, [r3, #8]
      break;
 8005aca:	e04e      	b.n	8005b6a <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_ETR_SetConfig(htim->Instance,
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6818      	ldr	r0, [r3, #0]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	6899      	ldr	r1, [r3, #8]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	f000 fde6 	bl	80066ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689a      	ldr	r2, [r3, #8]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005aee:	609a      	str	r2, [r3, #8]
      break;
 8005af0:	e03b      	b.n	8005b6a <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6818      	ldr	r0, [r3, #0]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	6859      	ldr	r1, [r3, #4]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	461a      	mov	r2, r3
 8005b00:	f000 fca2 	bl	8006448 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2150      	movs	r1, #80	; 0x50
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 fdb1 	bl	8006672 <TIM_ITRx_SetConfig>
      break;
 8005b10:	e02b      	b.n	8005b6a <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6818      	ldr	r0, [r3, #0]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	6859      	ldr	r1, [r3, #4]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	f000 fcfe 	bl	8006520 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2160      	movs	r1, #96	; 0x60
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 fda1 	bl	8006672 <TIM_ITRx_SetConfig>
      break;
 8005b30:	e01b      	b.n	8005b6a <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6818      	ldr	r0, [r3, #0]
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	6859      	ldr	r1, [r3, #4]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	461a      	mov	r2, r3
 8005b40:	f000 fc82 	bl	8006448 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2140      	movs	r1, #64	; 0x40
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 fd91 	bl	8006672 <TIM_ITRx_SetConfig>
      break;
 8005b50:	e00b      	b.n	8005b6a <HAL_TIM_ConfigClockSource+0x1c2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	4610      	mov	r0, r2
 8005b5e:	f000 fd88 	bl	8006672 <TIM_ITRx_SetConfig>
        break;
 8005b62:	e002      	b.n	8005b6a <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 8005b64:	bf00      	nop
 8005b66:	e000      	b.n	8005b6a <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 8005b68:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	00100070 	.word	0x00100070
 8005b88:	00100040 	.word	0x00100040
 8005b8c:	00100030 	.word	0x00100030
 8005b90:	00100020 	.word	0x00100020

08005b94 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	60fb      	str	r3, [r7, #12]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2b0c      	cmp	r3, #12
 8005ba6:	d831      	bhi.n	8005c0c <HAL_TIM_ReadCapturedValue+0x78>
 8005ba8:	a201      	add	r2, pc, #4	; (adr r2, 8005bb0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bae:	bf00      	nop
 8005bb0:	08005be5 	.word	0x08005be5
 8005bb4:	08005c0d 	.word	0x08005c0d
 8005bb8:	08005c0d 	.word	0x08005c0d
 8005bbc:	08005c0d 	.word	0x08005c0d
 8005bc0:	08005bef 	.word	0x08005bef
 8005bc4:	08005c0d 	.word	0x08005c0d
 8005bc8:	08005c0d 	.word	0x08005c0d
 8005bcc:	08005c0d 	.word	0x08005c0d
 8005bd0:	08005bf9 	.word	0x08005bf9
 8005bd4:	08005c0d 	.word	0x08005c0d
 8005bd8:	08005c0d 	.word	0x08005c0d
 8005bdc:	08005c0d 	.word	0x08005c0d
 8005be0:	08005c03 	.word	0x08005c03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bea:	60fb      	str	r3, [r7, #12]

      break;
 8005bec:	e00f      	b.n	8005c0e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf4:	60fb      	str	r3, [r7, #12]

      break;
 8005bf6:	e00a      	b.n	8005c0e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bfe:	60fb      	str	r3, [r7, #12]

      break;
 8005c00:	e005      	b.n	8005c0e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c08:	60fb      	str	r3, [r7, #12]

      break;
 8005c0a:	e000      	b.n	8005c0e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005c0c:	bf00      	nop
  }

  return tmpreg;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3714      	adds	r7, #20
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005c24:	bf00      	nop
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a3c      	ldr	r2, [pc, #240]	; (8005d70 <TIM_Base_SetConfig+0x104>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d00f      	beq.n	8005ca4 <TIM_Base_SetConfig+0x38>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c8a:	d00b      	beq.n	8005ca4 <TIM_Base_SetConfig+0x38>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a39      	ldr	r2, [pc, #228]	; (8005d74 <TIM_Base_SetConfig+0x108>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d007      	beq.n	8005ca4 <TIM_Base_SetConfig+0x38>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a38      	ldr	r2, [pc, #224]	; (8005d78 <TIM_Base_SetConfig+0x10c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d003      	beq.n	8005ca4 <TIM_Base_SetConfig+0x38>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a37      	ldr	r2, [pc, #220]	; (8005d7c <TIM_Base_SetConfig+0x110>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d108      	bne.n	8005cb6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a2d      	ldr	r2, [pc, #180]	; (8005d70 <TIM_Base_SetConfig+0x104>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d01b      	beq.n	8005cf6 <TIM_Base_SetConfig+0x8a>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc4:	d017      	beq.n	8005cf6 <TIM_Base_SetConfig+0x8a>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a2a      	ldr	r2, [pc, #168]	; (8005d74 <TIM_Base_SetConfig+0x108>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d013      	beq.n	8005cf6 <TIM_Base_SetConfig+0x8a>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a29      	ldr	r2, [pc, #164]	; (8005d78 <TIM_Base_SetConfig+0x10c>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d00f      	beq.n	8005cf6 <TIM_Base_SetConfig+0x8a>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a28      	ldr	r2, [pc, #160]	; (8005d7c <TIM_Base_SetConfig+0x110>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d00b      	beq.n	8005cf6 <TIM_Base_SetConfig+0x8a>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a27      	ldr	r2, [pc, #156]	; (8005d80 <TIM_Base_SetConfig+0x114>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d007      	beq.n	8005cf6 <TIM_Base_SetConfig+0x8a>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a26      	ldr	r2, [pc, #152]	; (8005d84 <TIM_Base_SetConfig+0x118>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d003      	beq.n	8005cf6 <TIM_Base_SetConfig+0x8a>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a25      	ldr	r2, [pc, #148]	; (8005d88 <TIM_Base_SetConfig+0x11c>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d108      	bne.n	8005d08 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	689a      	ldr	r2, [r3, #8]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a10      	ldr	r2, [pc, #64]	; (8005d70 <TIM_Base_SetConfig+0x104>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d00f      	beq.n	8005d54 <TIM_Base_SetConfig+0xe8>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a11      	ldr	r2, [pc, #68]	; (8005d7c <TIM_Base_SetConfig+0x110>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d00b      	beq.n	8005d54 <TIM_Base_SetConfig+0xe8>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a10      	ldr	r2, [pc, #64]	; (8005d80 <TIM_Base_SetConfig+0x114>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d007      	beq.n	8005d54 <TIM_Base_SetConfig+0xe8>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a0f      	ldr	r2, [pc, #60]	; (8005d84 <TIM_Base_SetConfig+0x118>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d003      	beq.n	8005d54 <TIM_Base_SetConfig+0xe8>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a0e      	ldr	r2, [pc, #56]	; (8005d88 <TIM_Base_SetConfig+0x11c>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d103      	bne.n	8005d5c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	691a      	ldr	r2, [r3, #16]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	615a      	str	r2, [r3, #20]
}
 8005d62:	bf00      	nop
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	40012c00 	.word	0x40012c00
 8005d74:	40000400 	.word	0x40000400
 8005d78:	40000800 	.word	0x40000800
 8005d7c:	40013400 	.word	0x40013400
 8005d80:	40014000 	.word	0x40014000
 8005d84:	40014400 	.word	0x40014400
 8005d88:	40014800 	.word	0x40014800

08005d8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	f023 0201 	bic.w	r2, r3, #1
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f023 0303 	bic.w	r3, r3, #3
 8005dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	f023 0302 	bic.w	r3, r3, #2
 8005dd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a2c      	ldr	r2, [pc, #176]	; (8005e98 <TIM_OC1_SetConfig+0x10c>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d00f      	beq.n	8005e0c <TIM_OC1_SetConfig+0x80>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a2b      	ldr	r2, [pc, #172]	; (8005e9c <TIM_OC1_SetConfig+0x110>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d00b      	beq.n	8005e0c <TIM_OC1_SetConfig+0x80>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a2a      	ldr	r2, [pc, #168]	; (8005ea0 <TIM_OC1_SetConfig+0x114>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d007      	beq.n	8005e0c <TIM_OC1_SetConfig+0x80>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a29      	ldr	r2, [pc, #164]	; (8005ea4 <TIM_OC1_SetConfig+0x118>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d003      	beq.n	8005e0c <TIM_OC1_SetConfig+0x80>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a28      	ldr	r2, [pc, #160]	; (8005ea8 <TIM_OC1_SetConfig+0x11c>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d10c      	bne.n	8005e26 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f023 0308 	bic.w	r3, r3, #8
 8005e12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f023 0304 	bic.w	r3, r3, #4
 8005e24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a1b      	ldr	r2, [pc, #108]	; (8005e98 <TIM_OC1_SetConfig+0x10c>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d00f      	beq.n	8005e4e <TIM_OC1_SetConfig+0xc2>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a1a      	ldr	r2, [pc, #104]	; (8005e9c <TIM_OC1_SetConfig+0x110>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d00b      	beq.n	8005e4e <TIM_OC1_SetConfig+0xc2>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a19      	ldr	r2, [pc, #100]	; (8005ea0 <TIM_OC1_SetConfig+0x114>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d007      	beq.n	8005e4e <TIM_OC1_SetConfig+0xc2>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a18      	ldr	r2, [pc, #96]	; (8005ea4 <TIM_OC1_SetConfig+0x118>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d003      	beq.n	8005e4e <TIM_OC1_SetConfig+0xc2>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a17      	ldr	r2, [pc, #92]	; (8005ea8 <TIM_OC1_SetConfig+0x11c>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d111      	bne.n	8005e72 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	685a      	ldr	r2, [r3, #4]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	621a      	str	r2, [r3, #32]
}
 8005e8c:	bf00      	nop
 8005e8e:	371c      	adds	r7, #28
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr
 8005e98:	40012c00 	.word	0x40012c00
 8005e9c:	40013400 	.word	0x40013400
 8005ea0:	40014000 	.word	0x40014000
 8005ea4:	40014400 	.word	0x40014400
 8005ea8:	40014800 	.word	0x40014800

08005eac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b087      	sub	sp, #28
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	f023 0210 	bic.w	r2, r3, #16
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005eda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ee6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	021b      	lsls	r3, r3, #8
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f023 0320 	bic.w	r3, r3, #32
 8005efa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	011b      	lsls	r3, r3, #4
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a28      	ldr	r2, [pc, #160]	; (8005fac <TIM_OC2_SetConfig+0x100>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d003      	beq.n	8005f18 <TIM_OC2_SetConfig+0x6c>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a27      	ldr	r2, [pc, #156]	; (8005fb0 <TIM_OC2_SetConfig+0x104>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d10d      	bne.n	8005f34 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	011b      	lsls	r3, r3, #4
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a1d      	ldr	r2, [pc, #116]	; (8005fac <TIM_OC2_SetConfig+0x100>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d00f      	beq.n	8005f5c <TIM_OC2_SetConfig+0xb0>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a1c      	ldr	r2, [pc, #112]	; (8005fb0 <TIM_OC2_SetConfig+0x104>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d00b      	beq.n	8005f5c <TIM_OC2_SetConfig+0xb0>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a1b      	ldr	r2, [pc, #108]	; (8005fb4 <TIM_OC2_SetConfig+0x108>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d007      	beq.n	8005f5c <TIM_OC2_SetConfig+0xb0>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a1a      	ldr	r2, [pc, #104]	; (8005fb8 <TIM_OC2_SetConfig+0x10c>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d003      	beq.n	8005f5c <TIM_OC2_SetConfig+0xb0>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a19      	ldr	r2, [pc, #100]	; (8005fbc <TIM_OC2_SetConfig+0x110>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d113      	bne.n	8005f84 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	695b      	ldr	r3, [r3, #20]
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	685a      	ldr	r2, [r3, #4]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	621a      	str	r2, [r3, #32]
}
 8005f9e:	bf00      	nop
 8005fa0:	371c      	adds	r7, #28
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	40012c00 	.word	0x40012c00
 8005fb0:	40013400 	.word	0x40013400
 8005fb4:	40014000 	.word	0x40014000
 8005fb8:	40014400 	.word	0x40014400
 8005fbc:	40014800 	.word	0x40014800

08005fc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f023 0303 	bic.w	r3, r3, #3
 8005ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	4313      	orrs	r3, r2
 8006004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800600c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	021b      	lsls	r3, r3, #8
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	4313      	orrs	r3, r2
 8006018:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a27      	ldr	r2, [pc, #156]	; (80060bc <TIM_OC3_SetConfig+0xfc>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d003      	beq.n	800602a <TIM_OC3_SetConfig+0x6a>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a26      	ldr	r2, [pc, #152]	; (80060c0 <TIM_OC3_SetConfig+0x100>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d10d      	bne.n	8006046 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006030:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	021b      	lsls	r3, r3, #8
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	4313      	orrs	r3, r2
 800603c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006044:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a1c      	ldr	r2, [pc, #112]	; (80060bc <TIM_OC3_SetConfig+0xfc>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d00f      	beq.n	800606e <TIM_OC3_SetConfig+0xae>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a1b      	ldr	r2, [pc, #108]	; (80060c0 <TIM_OC3_SetConfig+0x100>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d00b      	beq.n	800606e <TIM_OC3_SetConfig+0xae>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a1a      	ldr	r2, [pc, #104]	; (80060c4 <TIM_OC3_SetConfig+0x104>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d007      	beq.n	800606e <TIM_OC3_SetConfig+0xae>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a19      	ldr	r2, [pc, #100]	; (80060c8 <TIM_OC3_SetConfig+0x108>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d003      	beq.n	800606e <TIM_OC3_SetConfig+0xae>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a18      	ldr	r2, [pc, #96]	; (80060cc <TIM_OC3_SetConfig+0x10c>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d113      	bne.n	8006096 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006074:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800607c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	011b      	lsls	r3, r3, #4
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	4313      	orrs	r3, r2
 8006088:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	011b      	lsls	r3, r3, #4
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	4313      	orrs	r3, r2
 8006094:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	621a      	str	r2, [r3, #32]
}
 80060b0:	bf00      	nop
 80060b2:	371c      	adds	r7, #28
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr
 80060bc:	40012c00 	.word	0x40012c00
 80060c0:	40013400 	.word	0x40013400
 80060c4:	40014000 	.word	0x40014000
 80060c8:	40014400 	.word	0x40014400
 80060cc:	40014800 	.word	0x40014800

080060d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b087      	sub	sp, #28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800610a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	021b      	lsls	r3, r3, #8
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	4313      	orrs	r3, r2
 8006116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800611e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	031b      	lsls	r3, r3, #12
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	4313      	orrs	r3, r2
 800612a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a28      	ldr	r2, [pc, #160]	; (80061d0 <TIM_OC4_SetConfig+0x100>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d003      	beq.n	800613c <TIM_OC4_SetConfig+0x6c>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a27      	ldr	r2, [pc, #156]	; (80061d4 <TIM_OC4_SetConfig+0x104>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d10d      	bne.n	8006158 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006142:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	031b      	lsls	r3, r3, #12
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	4313      	orrs	r3, r2
 800614e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006156:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a1d      	ldr	r2, [pc, #116]	; (80061d0 <TIM_OC4_SetConfig+0x100>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d00f      	beq.n	8006180 <TIM_OC4_SetConfig+0xb0>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a1c      	ldr	r2, [pc, #112]	; (80061d4 <TIM_OC4_SetConfig+0x104>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d00b      	beq.n	8006180 <TIM_OC4_SetConfig+0xb0>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a1b      	ldr	r2, [pc, #108]	; (80061d8 <TIM_OC4_SetConfig+0x108>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d007      	beq.n	8006180 <TIM_OC4_SetConfig+0xb0>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a1a      	ldr	r2, [pc, #104]	; (80061dc <TIM_OC4_SetConfig+0x10c>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d003      	beq.n	8006180 <TIM_OC4_SetConfig+0xb0>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a19      	ldr	r2, [pc, #100]	; (80061e0 <TIM_OC4_SetConfig+0x110>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d113      	bne.n	80061a8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006186:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800618e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	019b      	lsls	r3, r3, #6
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	4313      	orrs	r3, r2
 800619a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	019b      	lsls	r3, r3, #6
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	621a      	str	r2, [r3, #32]
}
 80061c2:	bf00      	nop
 80061c4:	371c      	adds	r7, #28
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	40012c00 	.word	0x40012c00
 80061d4:	40013400 	.word	0x40013400
 80061d8:	40014000 	.word	0x40014000
 80061dc:	40014400 	.word	0x40014400
 80061e0:	40014800 	.word	0x40014800

080061e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b087      	sub	sp, #28
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a1b      	ldr	r3, [r3, #32]
 80061fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800620a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	4313      	orrs	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006228:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	041b      	lsls	r3, r3, #16
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	4313      	orrs	r3, r2
 8006234:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a17      	ldr	r2, [pc, #92]	; (8006298 <TIM_OC5_SetConfig+0xb4>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d00f      	beq.n	800625e <TIM_OC5_SetConfig+0x7a>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a16      	ldr	r2, [pc, #88]	; (800629c <TIM_OC5_SetConfig+0xb8>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d00b      	beq.n	800625e <TIM_OC5_SetConfig+0x7a>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a15      	ldr	r2, [pc, #84]	; (80062a0 <TIM_OC5_SetConfig+0xbc>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d007      	beq.n	800625e <TIM_OC5_SetConfig+0x7a>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a14      	ldr	r2, [pc, #80]	; (80062a4 <TIM_OC5_SetConfig+0xc0>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d003      	beq.n	800625e <TIM_OC5_SetConfig+0x7a>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a13      	ldr	r2, [pc, #76]	; (80062a8 <TIM_OC5_SetConfig+0xc4>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d109      	bne.n	8006272 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006264:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	021b      	lsls	r3, r3, #8
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	4313      	orrs	r3, r2
 8006270:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	685a      	ldr	r2, [r3, #4]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	621a      	str	r2, [r3, #32]
}
 800628c:	bf00      	nop
 800628e:	371c      	adds	r7, #28
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr
 8006298:	40012c00 	.word	0x40012c00
 800629c:	40013400 	.word	0x40013400
 80062a0:	40014000 	.word	0x40014000
 80062a4:	40014400 	.word	0x40014400
 80062a8:	40014800 	.word	0x40014800

080062ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	021b      	lsls	r3, r3, #8
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	051b      	lsls	r3, r3, #20
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a18      	ldr	r2, [pc, #96]	; (8006364 <TIM_OC6_SetConfig+0xb8>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d00f      	beq.n	8006328 <TIM_OC6_SetConfig+0x7c>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a17      	ldr	r2, [pc, #92]	; (8006368 <TIM_OC6_SetConfig+0xbc>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d00b      	beq.n	8006328 <TIM_OC6_SetConfig+0x7c>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a16      	ldr	r2, [pc, #88]	; (800636c <TIM_OC6_SetConfig+0xc0>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d007      	beq.n	8006328 <TIM_OC6_SetConfig+0x7c>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a15      	ldr	r2, [pc, #84]	; (8006370 <TIM_OC6_SetConfig+0xc4>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d003      	beq.n	8006328 <TIM_OC6_SetConfig+0x7c>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a14      	ldr	r2, [pc, #80]	; (8006374 <TIM_OC6_SetConfig+0xc8>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d109      	bne.n	800633c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800632e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	029b      	lsls	r3, r3, #10
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	4313      	orrs	r3, r2
 800633a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	621a      	str	r2, [r3, #32]
}
 8006356:	bf00      	nop
 8006358:	371c      	adds	r7, #28
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	40012c00 	.word	0x40012c00
 8006368:	40013400 	.word	0x40013400
 800636c:	40014000 	.word	0x40014000
 8006370:	40014400 	.word	0x40014400
 8006374:	40014800 	.word	0x40014800

08006378 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006378:	b480      	push	{r7}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
 8006384:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	f023 0201 	bic.w	r2, r3, #1
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6a1b      	ldr	r3, [r3, #32]
 800639c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	4a24      	ldr	r2, [pc, #144]	; (8006434 <TIM_TI1_SetConfig+0xbc>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d013      	beq.n	80063ce <TIM_TI1_SetConfig+0x56>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ac:	d00f      	beq.n	80063ce <TIM_TI1_SetConfig+0x56>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	4a21      	ldr	r2, [pc, #132]	; (8006438 <TIM_TI1_SetConfig+0xc0>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d00b      	beq.n	80063ce <TIM_TI1_SetConfig+0x56>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	4a20      	ldr	r2, [pc, #128]	; (800643c <TIM_TI1_SetConfig+0xc4>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d007      	beq.n	80063ce <TIM_TI1_SetConfig+0x56>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	4a1f      	ldr	r2, [pc, #124]	; (8006440 <TIM_TI1_SetConfig+0xc8>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d003      	beq.n	80063ce <TIM_TI1_SetConfig+0x56>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	4a1e      	ldr	r2, [pc, #120]	; (8006444 <TIM_TI1_SetConfig+0xcc>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d101      	bne.n	80063d2 <TIM_TI1_SetConfig+0x5a>
 80063ce:	2301      	movs	r3, #1
 80063d0:	e000      	b.n	80063d4 <TIM_TI1_SetConfig+0x5c>
 80063d2:	2300      	movs	r3, #0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d008      	beq.n	80063ea <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f023 0303 	bic.w	r3, r3, #3
 80063de:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	617b      	str	r3, [r7, #20]
 80063e8:	e003      	b.n	80063f2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f043 0301 	orr.w	r3, r3, #1
 80063f0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	011b      	lsls	r3, r3, #4
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	4313      	orrs	r3, r2
 8006404:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	f023 030a 	bic.w	r3, r3, #10
 800640c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	f003 030a 	and.w	r3, r3, #10
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	4313      	orrs	r3, r2
 8006418:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	621a      	str	r2, [r3, #32]
}
 8006426:	bf00      	nop
 8006428:	371c      	adds	r7, #28
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	40012c00 	.word	0x40012c00
 8006438:	40000400 	.word	0x40000400
 800643c:	40000800 	.word	0x40000800
 8006440:	40013400 	.word	0x40013400
 8006444:	40014000 	.word	0x40014000

08006448 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006448:	b480      	push	{r7}
 800644a:	b087      	sub	sp, #28
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6a1b      	ldr	r3, [r3, #32]
 8006458:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	f023 0201 	bic.w	r2, r3, #1
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006472:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	011b      	lsls	r3, r3, #4
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	4313      	orrs	r3, r2
 800647c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	f023 030a 	bic.w	r3, r3, #10
 8006484:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	4313      	orrs	r3, r2
 800648c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	621a      	str	r2, [r3, #32]
}
 800649a:	bf00      	nop
 800649c:	371c      	adds	r7, #28
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b087      	sub	sp, #28
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	60f8      	str	r0, [r7, #12]
 80064ae:	60b9      	str	r1, [r7, #8]
 80064b0:	607a      	str	r2, [r7, #4]
 80064b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6a1b      	ldr	r3, [r3, #32]
 80064b8:	f023 0210 	bic.w	r2, r3, #16
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	021b      	lsls	r3, r3, #8
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	4313      	orrs	r3, r2
 80064dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	031b      	lsls	r3, r3, #12
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	011b      	lsls	r3, r3, #4
 80064fe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006502:	693a      	ldr	r2, [r7, #16]
 8006504:	4313      	orrs	r3, r2
 8006506:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	621a      	str	r2, [r3, #32]
}
 8006514:	bf00      	nop
 8006516:	371c      	adds	r7, #28
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006520:	b480      	push	{r7}
 8006522:	b087      	sub	sp, #28
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	f023 0210 	bic.w	r2, r3, #16
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800654a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	031b      	lsls	r3, r3, #12
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	4313      	orrs	r3, r2
 8006554:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800655c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	011b      	lsls	r3, r3, #4
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	4313      	orrs	r3, r2
 8006566:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	621a      	str	r2, [r3, #32]
}
 8006574:	bf00      	nop
 8006576:	371c      	adds	r7, #28
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006580:	b480      	push	{r7}
 8006582:	b087      	sub	sp, #28
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
 800658c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6a1b      	ldr	r3, [r3, #32]
 80065a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f023 0303 	bic.w	r3, r3, #3
 80065ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	011b      	lsls	r3, r3, #4
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80065d0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	021b      	lsls	r3, r3, #8
 80065d6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	4313      	orrs	r3, r2
 80065de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	621a      	str	r2, [r3, #32]
}
 80065ec:	bf00      	nop
 80065ee:	371c      	adds	r7, #28
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b087      	sub	sp, #28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
 8006604:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	69db      	ldr	r3, [r3, #28]
 8006616:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6a1b      	ldr	r3, [r3, #32]
 800661c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006624:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	021b      	lsls	r3, r3, #8
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	4313      	orrs	r3, r2
 800662e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006636:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	031b      	lsls	r3, r3, #12
 800663c:	b29b      	uxth	r3, r3
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	4313      	orrs	r3, r2
 8006642:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800664a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	031b      	lsls	r3, r3, #12
 8006650:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	4313      	orrs	r3, r2
 8006658:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	693a      	ldr	r2, [r7, #16]
 8006664:	621a      	str	r2, [r3, #32]
}
 8006666:	bf00      	nop
 8006668:	371c      	adds	r7, #28
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr

08006672 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006672:	b480      	push	{r7}
 8006674:	b085      	sub	sp, #20
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800668c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800668e:	683a      	ldr	r2, [r7, #0]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	4313      	orrs	r3, r2
 8006694:	f043 0307 	orr.w	r3, r3, #7
 8006698:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	609a      	str	r2, [r3, #8]
}
 80066a0:	bf00      	nop
 80066a2:	3714      	adds	r7, #20
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b087      	sub	sp, #28
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
 80066b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	021a      	lsls	r2, r3, #8
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	431a      	orrs	r2, r3
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	697a      	ldr	r2, [r7, #20]
 80066de:	609a      	str	r2, [r3, #8]
}
 80066e0:	bf00      	nop
 80066e2:	371c      	adds	r7, #28
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b087      	sub	sp, #28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	f003 031f 	and.w	r3, r3, #31
 80066fe:	2201      	movs	r2, #1
 8006700:	fa02 f303 	lsl.w	r3, r2, r3
 8006704:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6a1a      	ldr	r2, [r3, #32]
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	43db      	mvns	r3, r3
 800670e:	401a      	ands	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6a1a      	ldr	r2, [r3, #32]
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	f003 031f 	and.w	r3, r3, #31
 800671e:	6879      	ldr	r1, [r7, #4]
 8006720:	fa01 f303 	lsl.w	r3, r1, r3
 8006724:	431a      	orrs	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	621a      	str	r2, [r3, #32]
}
 800672a:	bf00      	nop
 800672c:	371c      	adds	r7, #28
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
	...

08006738 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006748:	2b01      	cmp	r3, #1
 800674a:	d101      	bne.n	8006750 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800674c:	2302      	movs	r3, #2
 800674e:	e065      	b.n	800681c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2202      	movs	r2, #2
 800675c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a2c      	ldr	r2, [pc, #176]	; (8006828 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d004      	beq.n	8006784 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a2b      	ldr	r2, [pc, #172]	; (800682c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d108      	bne.n	8006796 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800678a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	4313      	orrs	r3, r2
 8006794:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800679c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a1b      	ldr	r2, [pc, #108]	; (8006828 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d018      	beq.n	80067f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067c6:	d013      	beq.n	80067f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a18      	ldr	r2, [pc, #96]	; (8006830 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d00e      	beq.n	80067f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a17      	ldr	r2, [pc, #92]	; (8006834 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d009      	beq.n	80067f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a12      	ldr	r2, [pc, #72]	; (800682c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d004      	beq.n	80067f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a13      	ldr	r2, [pc, #76]	; (8006838 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d10c      	bne.n	800680a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	4313      	orrs	r3, r2
 8006800:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr
 8006828:	40012c00 	.word	0x40012c00
 800682c:	40013400 	.word	0x40013400
 8006830:	40000400 	.word	0x40000400
 8006834:	40000800 	.word	0x40000800
 8006838:	40014000 	.word	0x40014000

0800683c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006846:	2300      	movs	r3, #0
 8006848:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006850:	2b01      	cmp	r3, #1
 8006852:	d101      	bne.n	8006858 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006854:	2302      	movs	r3, #2
 8006856:	e087      	b.n	8006968 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	4313      	orrs	r3, r2
 800686c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	4313      	orrs	r3, r2
 800687a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	4313      	orrs	r3, r2
 8006888:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4313      	orrs	r3, r2
 8006896:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068be:	4313      	orrs	r3, r2
 80068c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	041b      	lsls	r3, r3, #16
 80068ce:	4313      	orrs	r3, r2
 80068d0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a27      	ldr	r2, [pc, #156]	; (8006974 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d004      	beq.n	80068e6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a25      	ldr	r2, [pc, #148]	; (8006978 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d106      	bne.n	80068f4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	69db      	ldr	r3, [r3, #28]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a1e      	ldr	r2, [pc, #120]	; (8006974 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d004      	beq.n	8006908 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a1d      	ldr	r2, [pc, #116]	; (8006978 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d126      	bne.n	8006956 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006912:	051b      	lsls	r3, r3, #20
 8006914:	4313      	orrs	r3, r2
 8006916:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	4313      	orrs	r3, r2
 8006924:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006930:	4313      	orrs	r3, r2
 8006932:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a0e      	ldr	r2, [pc, #56]	; (8006974 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d004      	beq.n	8006948 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a0d      	ldr	r2, [pc, #52]	; (8006978 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d106      	bne.n	8006956 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006952:	4313      	orrs	r3, r2
 8006954:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3714      	adds	r7, #20
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	40012c00 	.word	0x40012c00
 8006978:	40013400 	.word	0x40013400

0800697c <HAL_TIMEx_TISelection>:
  *         (**) Register not available in all devices.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_TIMEx_TISelection(TIM_HandleTypeDef *htim, uint32_t TISelection, uint32_t Channel)
{
 800697c:	b480      	push	{r7}
 800697e:	b087      	sub	sp, #28
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006988:	2300      	movs	r3, #0
 800698a:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_TIM_TISEL_TIX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_TISEL(TISelection));

  __HAL_LOCK(htim);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006992:	2b01      	cmp	r3, #1
 8006994:	d101      	bne.n	800699a <HAL_TIMEx_TISelection+0x1e>
 8006996:	2302      	movs	r3, #2
 8006998:	e073      	b.n	8006a82 <HAL_TIMEx_TISelection+0x106>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2201      	movs	r2, #1
 800699e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b0c      	cmp	r3, #12
 80069a6:	d864      	bhi.n	8006a72 <HAL_TIMEx_TISelection+0xf6>
 80069a8:	a201      	add	r2, pc, #4	; (adr r2, 80069b0 <HAL_TIMEx_TISelection+0x34>)
 80069aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ae:	bf00      	nop
 80069b0:	080069e5 	.word	0x080069e5
 80069b4:	08006a73 	.word	0x08006a73
 80069b8:	08006a73 	.word	0x08006a73
 80069bc:	08006a73 	.word	0x08006a73
 80069c0:	08006a31 	.word	0x08006a31
 80069c4:	08006a73 	.word	0x08006a73
 80069c8:	08006a73 	.word	0x08006a73
 80069cc:	08006a73 	.word	0x08006a73
 80069d0:	08006a47 	.word	0x08006a47
 80069d4:	08006a73 	.word	0x08006a73
 80069d8:	08006a73 	.word	0x08006a73
 80069dc:	08006a73 	.word	0x08006a73
 80069e0:	08006a5d 	.word	0x08006a5d

  switch (Channel)
  {
    case TIM_CHANNEL_1:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI1SEL, TISelection);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ea:	f023 010f 	bic.w	r1, r3, #15
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	430a      	orrs	r2, r1
 80069f6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* If required, set OR bit to request HSE/32 clock */
      if (IS_TIM_HSE32_INSTANCE(htim->Instance))
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a24      	ldr	r2, [pc, #144]	; (8006a90 <HAL_TIMEx_TISelection+0x114>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d004      	beq.n	8006a0c <HAL_TIMEx_TISelection+0x90>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a23      	ldr	r2, [pc, #140]	; (8006a94 <HAL_TIMEx_TISelection+0x118>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d108      	bne.n	8006a1e <HAL_TIMEx_TISelection+0xa2>
      {
        SET_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f042 0201 	orr.w	r2, r2, #1
 8006a1a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      else
      {
        CLEAR_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
      }
      break;
 8006a1c:	e02c      	b.n	8006a78 <HAL_TIMEx_TISelection+0xfc>
        CLEAR_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f022 0201 	bic.w	r2, r2, #1
 8006a2c:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006a2e:	e023      	b.n	8006a78 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_2:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI2SEL, TISelection);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a36:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	430a      	orrs	r2, r1
 8006a42:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8006a44:	e018      	b.n	8006a78 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_3:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI3SEL, TISelection);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a4c:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68ba      	ldr	r2, [r7, #8]
 8006a56:	430a      	orrs	r2, r1
 8006a58:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8006a5a:	e00d      	b.n	8006a78 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_4:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI4SEL, TISelection);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a62:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8006a70:	e002      	b.n	8006a78 <HAL_TIMEx_TISelection+0xfc>
    default:
      status = HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	75fb      	strb	r3, [r7, #23]
      break;
 8006a76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	371c      	adds	r7, #28
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	40014400 	.word	0x40014400
 8006a94:	40014800 	.word	0x40014800

08006a98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ab4:	bf00      	nop
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006adc:	bf00      	nop
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006af0:	bf00      	nop
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <__libc_init_array>:
 8006b24:	b570      	push	{r4, r5, r6, lr}
 8006b26:	4d0d      	ldr	r5, [pc, #52]	; (8006b5c <__libc_init_array+0x38>)
 8006b28:	4c0d      	ldr	r4, [pc, #52]	; (8006b60 <__libc_init_array+0x3c>)
 8006b2a:	1b64      	subs	r4, r4, r5
 8006b2c:	10a4      	asrs	r4, r4, #2
 8006b2e:	2600      	movs	r6, #0
 8006b30:	42a6      	cmp	r6, r4
 8006b32:	d109      	bne.n	8006b48 <__libc_init_array+0x24>
 8006b34:	4d0b      	ldr	r5, [pc, #44]	; (8006b64 <__libc_init_array+0x40>)
 8006b36:	4c0c      	ldr	r4, [pc, #48]	; (8006b68 <__libc_init_array+0x44>)
 8006b38:	f000 f820 	bl	8006b7c <_init>
 8006b3c:	1b64      	subs	r4, r4, r5
 8006b3e:	10a4      	asrs	r4, r4, #2
 8006b40:	2600      	movs	r6, #0
 8006b42:	42a6      	cmp	r6, r4
 8006b44:	d105      	bne.n	8006b52 <__libc_init_array+0x2e>
 8006b46:	bd70      	pop	{r4, r5, r6, pc}
 8006b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b4c:	4798      	blx	r3
 8006b4e:	3601      	adds	r6, #1
 8006b50:	e7ee      	b.n	8006b30 <__libc_init_array+0xc>
 8006b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b56:	4798      	blx	r3
 8006b58:	3601      	adds	r6, #1
 8006b5a:	e7f2      	b.n	8006b42 <__libc_init_array+0x1e>
 8006b5c:	08006ba4 	.word	0x08006ba4
 8006b60:	08006ba4 	.word	0x08006ba4
 8006b64:	08006ba4 	.word	0x08006ba4
 8006b68:	08006ba8 	.word	0x08006ba8

08006b6c <memset>:
 8006b6c:	4402      	add	r2, r0
 8006b6e:	4603      	mov	r3, r0
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d100      	bne.n	8006b76 <memset+0xa>
 8006b74:	4770      	bx	lr
 8006b76:	f803 1b01 	strb.w	r1, [r3], #1
 8006b7a:	e7f9      	b.n	8006b70 <memset+0x4>

08006b7c <_init>:
 8006b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b7e:	bf00      	nop
 8006b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b82:	bc08      	pop	{r3}
 8006b84:	469e      	mov	lr, r3
 8006b86:	4770      	bx	lr

08006b88 <_fini>:
 8006b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8a:	bf00      	nop
 8006b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b8e:	bc08      	pop	{r3}
 8006b90:	469e      	mov	lr, r3
 8006b92:	4770      	bx	lr
