
eBikeInterface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c34  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08006e0c  08006e0c  00016e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e1c  08006e1c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08006e1c  08006e1c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e1c  08006e1c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e1c  08006e1c  00016e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e20  08006e20  00016e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08006e24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000018  08006e3c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08006e3c  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015481  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002714  00000000  00000000  000354c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  00037be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001280  00000000  00000000  00038f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fa93  00000000  00000000  0003a1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013430  00000000  00000000  00059c8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7e60  00000000  00000000  0006d0bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00144f1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000545c  00000000  00000000  00144f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006df4 	.word	0x08006df4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	08006df4 	.word	0x08006df4

08000218 <HAL_TIM_PeriodElapsedCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc);
void init_ADC_Channel(ADC_ChannelConfTypeDef* ADCChannel);
uint8_t refreshPPM(uint16_t value);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	if (htim == &htim6)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	4a10      	ldr	r2, [pc, #64]	; (8000264 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000224:	4293      	cmp	r3, r2
 8000226:	d105      	bne.n	8000234 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		refreshPPM(AnalogThrottleValue);
 8000228:	4b0f      	ldr	r3, [pc, #60]	; (8000268 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800022a:	881b      	ldrh	r3, [r3, #0]
 800022c:	4618      	mov	r0, r3
 800022e:	f000 fe0d 	bl	8000e4c <refreshPPM>
			PAS_Detected = 0;
		}
		else if (PASGotCapture!=2) PASGotCapture = 0;

	}
}
 8000232:	e012      	b.n	800025a <HAL_TIM_PeriodElapsedCallback+0x42>
	else if (htim == &htim15)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	4a0d      	ldr	r2, [pc, #52]	; (800026c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000238:	4293      	cmp	r3, r2
 800023a:	d10e      	bne.n	800025a <HAL_TIM_PeriodElapsedCallback+0x42>
		if (PASGotCapture == 0)	//Check if capture has been detected. If not stop PAS, if detected then reset it until next timeout check.
 800023c:	4b0c      	ldr	r3, [pc, #48]	; (8000270 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d103      	bne.n	800024c <HAL_TIM_PeriodElapsedCallback+0x34>
			PAS_Detected = 0;
 8000244:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000246:	2200      	movs	r2, #0
 8000248:	701a      	strb	r2, [r3, #0]
}
 800024a:	e006      	b.n	800025a <HAL_TIM_PeriodElapsedCallback+0x42>
		else if (PASGotCapture!=2) PASGotCapture = 0;
 800024c:	4b08      	ldr	r3, [pc, #32]	; (8000270 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	2b02      	cmp	r3, #2
 8000252:	d002      	beq.n	800025a <HAL_TIM_PeriodElapsedCallback+0x42>
 8000254:	4b06      	ldr	r3, [pc, #24]	; (8000270 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000256:	2200      	movs	r2, #0
 8000258:	701a      	strb	r2, [r3, #0]
}
 800025a:	bf00      	nop
 800025c:	3708      	adds	r7, #8
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	200001c0 	.word	0x200001c0
 8000268:	2000006e 	.word	0x2000006e
 800026c:	20000150 	.word	0x20000150
 8000270:	20000000 	.word	0x20000000
 8000274:	20000044 	.word	0x20000044

08000278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800027c:	f001 f8d5 	bl	800142a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000280:	f000 f854 	bl	800032c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000284:	f000 fbb6 	bl	80009f4 <MX_GPIO_Init>
  MX_ADC2_Init();
 8000288:	f000 f8a8 	bl	80003dc <MX_ADC2_Init>
  MX_DAC1_Init();
 800028c:	f000 f936 	bl	80004fc <MX_DAC1_Init>
  MX_TIM2_Init();
 8000290:	f000 fa58 	bl	8000744 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000294:	f000 f9a6 	bl	80005e4 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000298:	f000 fad0 	bl	800083c <MX_TIM4_Init>
  MX_COMP1_Init();
 800029c:	f000 f906 	bl	80004ac <MX_COMP1_Init>
  MX_DAC3_Init();
 80002a0:	f000 f966 	bl	8000570 <MX_DAC3_Init>
  MX_TIM6_Init();
 80002a4:	f000 fb18 	bl	80008d8 <MX_TIM6_Init>
  MX_TIM15_Init();
 80002a8:	f000 fb4c 	bl	8000944 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  // Wheel speed detection
  HAL_COMP_Start(&hcomp1);
 80002ac:	4816      	ldr	r0, [pc, #88]	; (8000308 <main+0x90>)
 80002ae:	f003 f833 	bl	8003318 <HAL_COMP_Start>
  HAL_TIM_Base_Start(&htim2);
 80002b2:	4816      	ldr	r0, [pc, #88]	; (800030c <main+0x94>)
 80002b4:	f004 fdd8 	bl	8004e68 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 80002b8:	2104      	movs	r1, #4
 80002ba:	4814      	ldr	r0, [pc, #80]	; (800030c <main+0x94>)
 80002bc:	f005 f85a 	bl	8005374 <HAL_TIM_IC_Start_IT>

  //Pedal Sensing input capture and timeout start
  HAL_TIM_Base_Start_IT(&htim15);
 80002c0:	4813      	ldr	r0, [pc, #76]	; (8000310 <main+0x98>)
 80002c2:	f004 fe33 	bl	8004f2c <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 80002c6:	2100      	movs	r1, #0
 80002c8:	4811      	ldr	r0, [pc, #68]	; (8000310 <main+0x98>)
 80002ca:	f005 f853 	bl	8005374 <HAL_TIM_IC_Start_IT>

  //output PPM start. No valid signal until throttle detected.(PWM with 5ms period. Valid tHigh 500 / 2500Âµs)
  htim1.Instance->CCR1 = 0;
 80002ce:	4b11      	ldr	r3, [pc, #68]	; (8000314 <main+0x9c>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	2200      	movs	r2, #0
 80002d4:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_Base_Start(&htim1);
 80002d6:	480f      	ldr	r0, [pc, #60]	; (8000314 <main+0x9c>)
 80002d8:	f004 fdc6 	bl	8004e68 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80002dc:	2100      	movs	r1, #0
 80002de:	480d      	ldr	r0, [pc, #52]	; (8000314 <main+0x9c>)
 80002e0:	f004 fef0 	bl	80050c4 <HAL_TIM_PWM_Start>

  // Throttle and Temperature measurement init (Select correct first channel)
  init_ADC_Channel(&ADC2ChannelConfig);
 80002e4:	480c      	ldr	r0, [pc, #48]	; (8000318 <main+0xa0>)
 80002e6:	f000 fd65 	bl	8000db4 <init_ADC_Channel>
  HAL_ADC_Start_IT(&hadc2);
 80002ea:	480c      	ldr	r0, [pc, #48]	; (800031c <main+0xa4>)
 80002ec:	f001 fd48 	bl	8001d80 <HAL_ADC_Start_IT>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 80002f0:	2110      	movs	r1, #16
 80002f2:	480b      	ldr	r0, [pc, #44]	; (8000320 <main+0xa8>)
 80002f4:	f003 f989 	bl	800360a <HAL_DAC_Start>
  HAL_TIM_Base_Start(&htim4);
 80002f8:	480a      	ldr	r0, [pc, #40]	; (8000324 <main+0xac>)
 80002fa:	f004 fdb5 	bl	8004e68 <HAL_TIM_Base_Start>

  // Start task management timer (10ms period, to refresh output value)
  HAL_TIM_Base_Start_IT(&htim6);
 80002fe:	480a      	ldr	r0, [pc, #40]	; (8000328 <main+0xb0>)
 8000300:	f004 fe14 	bl	8004f2c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000304:	e7fe      	b.n	8000304 <main+0x8c>
 8000306:	bf00      	nop
 8000308:	2000019c 	.word	0x2000019c
 800030c:	20000258 	.word	0x20000258
 8000310:	20000150 	.word	0x20000150
 8000314:	2000020c 	.word	0x2000020c
 8000318:	2000004c 	.word	0x2000004c
 800031c:	200000e4 	.word	0x200000e4
 8000320:	200000d0 	.word	0x200000d0
 8000324:	20000084 	.word	0x20000084
 8000328:	200001c0 	.word	0x200001c0

0800032c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b0a4      	sub	sp, #144	; 0x90
 8000330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000332:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000336:	2238      	movs	r2, #56	; 0x38
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f006 fd52 	bl	8006de4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000340:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000344:	2200      	movs	r2, #0
 8000346:	601a      	str	r2, [r3, #0]
 8000348:	605a      	str	r2, [r3, #4]
 800034a:	609a      	str	r2, [r3, #8]
 800034c:	60da      	str	r2, [r3, #12]
 800034e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000350:	463b      	mov	r3, r7
 8000352:	2244      	movs	r2, #68	; 0x44
 8000354:	2100      	movs	r1, #0
 8000356:	4618      	mov	r0, r3
 8000358:	f006 fd44 	bl	8006de4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800035c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000360:	f003 fd7e 	bl	8003e60 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000364:	2302      	movs	r3, #2
 8000366:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000368:	f44f 7380 	mov.w	r3, #256	; 0x100
 800036c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800036e:	2340      	movs	r3, #64	; 0x40
 8000370:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000372:	2300      	movs	r3, #0
 8000374:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000376:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800037a:	4618      	mov	r0, r3
 800037c:	f003 fe24 	bl	8003fc8 <HAL_RCC_OscConfig>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000386:	f000 fdbf 	bl	8000f08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038a:	230f      	movs	r3, #15
 800038c:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800038e:	2301      	movs	r3, #1
 8000390:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039a:	2300      	movs	r3, #0
 800039c:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800039e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003a2:	2100      	movs	r1, #0
 80003a4:	4618      	mov	r0, r3
 80003a6:	f004 f927 	bl	80045f8 <HAL_RCC_ClockConfig>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80003b0:	f000 fdaa 	bl	8000f08 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80003b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003b8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80003ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80003be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003c0:	463b      	mov	r3, r7
 80003c2:	4618      	mov	r0, r3
 80003c4:	f004 fb08 	bl	80049d8 <HAL_RCCEx_PeriphCLKConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80003ce:	f000 fd9b 	bl	8000f08 <Error_Handler>
  }
}
 80003d2:	bf00      	nop
 80003d4:	3790      	adds	r7, #144	; 0x90
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
	...

080003dc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b088      	sub	sp, #32
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003e2:	463b      	mov	r3, r7
 80003e4:	2220      	movs	r2, #32
 80003e6:	2100      	movs	r1, #0
 80003e8:	4618      	mov	r0, r3
 80003ea:	f006 fcfb 	bl	8006de4 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80003ee:	4b2c      	ldr	r3, [pc, #176]	; (80004a0 <MX_ADC2_Init+0xc4>)
 80003f0:	4a2c      	ldr	r2, [pc, #176]	; (80004a4 <MX_ADC2_Init+0xc8>)
 80003f2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80003f4:	4b2a      	ldr	r3, [pc, #168]	; (80004a0 <MX_ADC2_Init+0xc4>)
 80003f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80003fa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80003fc:	4b28      	ldr	r3, [pc, #160]	; (80004a0 <MX_ADC2_Init+0xc4>)
 80003fe:	2200      	movs	r2, #0
 8000400:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000402:	4b27      	ldr	r3, [pc, #156]	; (80004a0 <MX_ADC2_Init+0xc4>)
 8000404:	2200      	movs	r2, #0
 8000406:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000408:	4b25      	ldr	r3, [pc, #148]	; (80004a0 <MX_ADC2_Init+0xc4>)
 800040a:	2200      	movs	r2, #0
 800040c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800040e:	4b24      	ldr	r3, [pc, #144]	; (80004a0 <MX_ADC2_Init+0xc4>)
 8000410:	2200      	movs	r2, #0
 8000412:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000414:	4b22      	ldr	r3, [pc, #136]	; (80004a0 <MX_ADC2_Init+0xc4>)
 8000416:	2204      	movs	r2, #4
 8000418:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800041a:	4b21      	ldr	r3, [pc, #132]	; (80004a0 <MX_ADC2_Init+0xc4>)
 800041c:	2200      	movs	r2, #0
 800041e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000420:	4b1f      	ldr	r3, [pc, #124]	; (80004a0 <MX_ADC2_Init+0xc4>)
 8000422:	2200      	movs	r2, #0
 8000424:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000426:	4b1e      	ldr	r3, [pc, #120]	; (80004a0 <MX_ADC2_Init+0xc4>)
 8000428:	2201      	movs	r2, #1
 800042a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800042c:	4b1c      	ldr	r3, [pc, #112]	; (80004a0 <MX_ADC2_Init+0xc4>)
 800042e:	2200      	movs	r2, #0
 8000430:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8000434:	4b1a      	ldr	r3, [pc, #104]	; (80004a0 <MX_ADC2_Init+0xc4>)
 8000436:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 800043a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800043c:	4b18      	ldr	r3, [pc, #96]	; (80004a0 <MX_ADC2_Init+0xc4>)
 800043e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000442:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000444:	4b16      	ldr	r3, [pc, #88]	; (80004a0 <MX_ADC2_Init+0xc4>)
 8000446:	2200      	movs	r2, #0
 8000448:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800044c:	4b14      	ldr	r3, [pc, #80]	; (80004a0 <MX_ADC2_Init+0xc4>)
 800044e:	2200      	movs	r2, #0
 8000450:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000452:	4b13      	ldr	r3, [pc, #76]	; (80004a0 <MX_ADC2_Init+0xc4>)
 8000454:	2200      	movs	r2, #0
 8000456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800045a:	4811      	ldr	r0, [pc, #68]	; (80004a0 <MX_ADC2_Init+0xc4>)
 800045c:	f001 fb06 	bl	8001a6c <HAL_ADC_Init>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000466:	f000 fd4f 	bl	8000f08 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800046a:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <MX_ADC2_Init+0xcc>)
 800046c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800046e:	2306      	movs	r3, #6
 8000470:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000472:	2302      	movs	r3, #2
 8000474:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000476:	237f      	movs	r3, #127	; 0x7f
 8000478:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800047a:	2304      	movs	r3, #4
 800047c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800047e:	2300      	movs	r3, #0
 8000480:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000482:	463b      	mov	r3, r7
 8000484:	4619      	mov	r1, r3
 8000486:	4806      	ldr	r0, [pc, #24]	; (80004a0 <MX_ADC2_Init+0xc4>)
 8000488:	f002 f822 	bl	80024d0 <HAL_ADC_ConfigChannel>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000492:	f000 fd39 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000496:	bf00      	nop
 8000498:	3720      	adds	r7, #32
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	200000e4 	.word	0x200000e4
 80004a4:	50000100 	.word	0x50000100
 80004a8:	04300002 	.word	0x04300002

080004ac <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 80004b0:	4b10      	ldr	r3, [pc, #64]	; (80004f4 <MX_COMP1_Init+0x48>)
 80004b2:	4a11      	ldr	r2, [pc, #68]	; (80004f8 <MX_COMP1_Init+0x4c>)
 80004b4:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80004b6:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <MX_COMP1_Init+0x48>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_1_4VREFINT;
 80004bc:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <MX_COMP1_Init+0x48>)
 80004be:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80004c2:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80004c4:	4b0b      	ldr	r3, [pc, #44]	; (80004f4 <MX_COMP1_Init+0x48>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_50MV;
 80004ca:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <MX_COMP1_Init+0x48>)
 80004cc:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80004d0:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80004d2:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <MX_COMP1_Init+0x48>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <MX_COMP1_Init+0x48>)
 80004da:	2212      	movs	r2, #18
 80004dc:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80004de:	4805      	ldr	r0, [pc, #20]	; (80004f4 <MX_COMP1_Init+0x48>)
 80004e0:	f002 fe3e 	bl	8003160 <HAL_COMP_Init>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_COMP1_Init+0x42>
  {
    Error_Handler();
 80004ea:	f000 fd0d 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	2000019c 	.word	0x2000019c
 80004f8:	40010200 	.word	0x40010200

080004fc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08c      	sub	sp, #48	; 0x30
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000502:	463b      	mov	r3, r7
 8000504:	2230      	movs	r2, #48	; 0x30
 8000506:	2100      	movs	r1, #0
 8000508:	4618      	mov	r0, r3
 800050a:	f006 fc6b 	bl	8006de4 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800050e:	4b16      	ldr	r3, [pc, #88]	; (8000568 <MX_DAC1_Init+0x6c>)
 8000510:	4a16      	ldr	r2, [pc, #88]	; (800056c <MX_DAC1_Init+0x70>)
 8000512:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000514:	4814      	ldr	r0, [pc, #80]	; (8000568 <MX_DAC1_Init+0x6c>)
 8000516:	f003 f856 	bl	80035c6 <HAL_DAC_Init>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000520:	f000 fcf2 	bl	8000f08 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000524:	2302      	movs	r3, #2
 8000526:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000528:	2300      	movs	r3, #0
 800052a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800052c:	2300      	movs	r3, #0
 800052e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000530:	2300      	movs	r3, #0
 8000532:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 8000534:	2316      	movs	r3, #22
 8000536:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000538:	2300      	movs	r3, #0
 800053a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800053c:	2300      	movs	r3, #0
 800053e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000540:	2301      	movs	r3, #1
 8000542:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000544:	2300      	movs	r3, #0
 8000546:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000548:	463b      	mov	r3, r7
 800054a:	2210      	movs	r2, #16
 800054c:	4619      	mov	r1, r3
 800054e:	4806      	ldr	r0, [pc, #24]	; (8000568 <MX_DAC1_Init+0x6c>)
 8000550:	f003 f93a 	bl	80037c8 <HAL_DAC_ConfigChannel>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800055a:	f000 fcd5 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800055e:	bf00      	nop
 8000560:	3730      	adds	r7, #48	; 0x30
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	200000d0 	.word	0x200000d0
 800056c:	50000800 	.word	0x50000800

08000570 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08c      	sub	sp, #48	; 0x30
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000576:	463b      	mov	r3, r7
 8000578:	2230      	movs	r2, #48	; 0x30
 800057a:	2100      	movs	r1, #0
 800057c:	4618      	mov	r0, r3
 800057e:	f006 fc31 	bl	8006de4 <memset>
  /* USER CODE BEGIN DAC3_Init 1 */

  /* USER CODE END DAC3_Init 1 */
  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8000582:	4b16      	ldr	r3, [pc, #88]	; (80005dc <MX_DAC3_Init+0x6c>)
 8000584:	4a16      	ldr	r2, [pc, #88]	; (80005e0 <MX_DAC3_Init+0x70>)
 8000586:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8000588:	4814      	ldr	r0, [pc, #80]	; (80005dc <MX_DAC3_Init+0x6c>)
 800058a:	f003 f81c 	bl	80035c6 <HAL_DAC_Init>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8000594:	f000 fcb8 	bl	8000f08 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000598:	2302      	movs	r3, #2
 800059a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800059c:	2300      	movs	r3, #0
 800059e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80005a0:	2300      	movs	r3, #0
 80005a2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80005b0:	2302      	movs	r3, #2
 80005b2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80005b4:	2302      	movs	r3, #2
 80005b6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80005bc:	463b      	mov	r3, r7
 80005be:	2200      	movs	r2, #0
 80005c0:	4619      	mov	r1, r3
 80005c2:	4806      	ldr	r0, [pc, #24]	; (80005dc <MX_DAC3_Init+0x6c>)
 80005c4:	f003 f900 	bl	80037c8 <HAL_DAC_ConfigChannel>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 80005ce:	f000 fc9b 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 80005d2:	bf00      	nop
 80005d4:	3730      	adds	r7, #48	; 0x30
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000070 	.word	0x20000070
 80005e0:	50001000 	.word	0x50001000

080005e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b09c      	sub	sp, #112	; 0x70
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000604:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
 8000614:	615a      	str	r2, [r3, #20]
 8000616:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	2234      	movs	r2, #52	; 0x34
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f006 fbe0 	bl	8006de4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000624:	4b45      	ldr	r3, [pc, #276]	; (800073c <MX_TIM1_Init+0x158>)
 8000626:	4a46      	ldr	r2, [pc, #280]	; (8000740 <MX_TIM1_Init+0x15c>)
 8000628:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 800062a:	4b44      	ldr	r3, [pc, #272]	; (800073c <MX_TIM1_Init+0x158>)
 800062c:	220f      	movs	r2, #15
 800062e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000630:	4b42      	ldr	r3, [pc, #264]	; (800073c <MX_TIM1_Init+0x158>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 8000636:	4b41      	ldr	r3, [pc, #260]	; (800073c <MX_TIM1_Init+0x158>)
 8000638:	f241 3288 	movw	r2, #5000	; 0x1388
 800063c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800063e:	4b3f      	ldr	r3, [pc, #252]	; (800073c <MX_TIM1_Init+0x158>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000644:	4b3d      	ldr	r3, [pc, #244]	; (800073c <MX_TIM1_Init+0x158>)
 8000646:	2200      	movs	r2, #0
 8000648:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800064a:	4b3c      	ldr	r3, [pc, #240]	; (800073c <MX_TIM1_Init+0x158>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000650:	483a      	ldr	r0, [pc, #232]	; (800073c <MX_TIM1_Init+0x158>)
 8000652:	f004 fbb1 	bl	8004db8 <HAL_TIM_Base_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800065c:	f000 fc54 	bl	8000f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000664:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000666:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800066a:	4619      	mov	r1, r3
 800066c:	4833      	ldr	r0, [pc, #204]	; (800073c <MX_TIM1_Init+0x158>)
 800066e:	f005 fae1 	bl	8005c34 <HAL_TIM_ConfigClockSource>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000678:	f000 fc46 	bl	8000f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800067c:	482f      	ldr	r0, [pc, #188]	; (800073c <MX_TIM1_Init+0x158>)
 800067e:	f004 fcbf 	bl	8005000 <HAL_TIM_PWM_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000688:	f000 fc3e 	bl	8000f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800068c:	2300      	movs	r3, #0
 800068e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000690:	2300      	movs	r3, #0
 8000692:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000694:	2300      	movs	r3, #0
 8000696:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000698:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800069c:	4619      	mov	r1, r3
 800069e:	4827      	ldr	r0, [pc, #156]	; (800073c <MX_TIM1_Init+0x158>)
 80006a0:	f006 f986 	bl	80069b0 <HAL_TIMEx_MasterConfigSynchronization>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80006aa:	f000 fc2d 	bl	8000f08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ae:	2360      	movs	r3, #96	; 0x60
 80006b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006b6:	2300      	movs	r3, #0
 80006b8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006ba:	2300      	movs	r3, #0
 80006bc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006be:	2300      	movs	r3, #0
 80006c0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006c2:	2300      	movs	r3, #0
 80006c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006c6:	2300      	movs	r3, #0
 80006c8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006ce:	2200      	movs	r2, #0
 80006d0:	4619      	mov	r1, r3
 80006d2:	481a      	ldr	r0, [pc, #104]	; (800073c <MX_TIM1_Init+0x158>)
 80006d4:	f005 f99e 	bl	8005a14 <HAL_TIM_PWM_ConfigChannel>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80006de:	f000 fc13 	bl	8000f08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000700:	2300      	movs	r3, #0
 8000702:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000704:	2300      	movs	r3, #0
 8000706:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000708:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800070c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000712:	2300      	movs	r3, #0
 8000714:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000716:	2300      	movs	r3, #0
 8000718:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	4619      	mov	r1, r3
 800071e:	4807      	ldr	r0, [pc, #28]	; (800073c <MX_TIM1_Init+0x158>)
 8000720:	f006 f9c8 	bl	8006ab4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800072a:	f000 fbed 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800072e:	4803      	ldr	r0, [pc, #12]	; (800073c <MX_TIM1_Init+0x158>)
 8000730:	f000 fda8 	bl	8001284 <HAL_TIM_MspPostInit>

}
 8000734:	bf00      	nop
 8000736:	3770      	adds	r7, #112	; 0x70
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000020c 	.word	0x2000020c
 8000740:	40012c00 	.word	0x40012c00

08000744 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08c      	sub	sp, #48	; 0x30
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800074a:	f107 0320 	add.w	r3, r7, #32
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000770:	4b30      	ldr	r3, [pc, #192]	; (8000834 <MX_TIM2_Init+0xf0>)
 8000772:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000776:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8000778:	4b2e      	ldr	r3, [pc, #184]	; (8000834 <MX_TIM2_Init+0xf0>)
 800077a:	220f      	movs	r2, #15
 800077c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077e:	4b2d      	ldr	r3, [pc, #180]	; (8000834 <MX_TIM2_Init+0xf0>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3.2E7;
 8000784:	4b2b      	ldr	r3, [pc, #172]	; (8000834 <MX_TIM2_Init+0xf0>)
 8000786:	4a2c      	ldr	r2, [pc, #176]	; (8000838 <MX_TIM2_Init+0xf4>)
 8000788:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800078a:	4b2a      	ldr	r3, [pc, #168]	; (8000834 <MX_TIM2_Init+0xf0>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000790:	4b28      	ldr	r3, [pc, #160]	; (8000834 <MX_TIM2_Init+0xf0>)
 8000792:	2200      	movs	r2, #0
 8000794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000796:	4827      	ldr	r0, [pc, #156]	; (8000834 <MX_TIM2_Init+0xf0>)
 8000798:	f004 fb0e 	bl	8004db8 <HAL_TIM_Base_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80007a2:	f000 fbb1 	bl	8000f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007aa:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007ac:	f107 0320 	add.w	r3, r7, #32
 80007b0:	4619      	mov	r1, r3
 80007b2:	4820      	ldr	r0, [pc, #128]	; (8000834 <MX_TIM2_Init+0xf0>)
 80007b4:	f005 fa3e 	bl	8005c34 <HAL_TIM_ConfigClockSource>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80007be:	f000 fba3 	bl	8000f08 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80007c2:	481c      	ldr	r0, [pc, #112]	; (8000834 <MX_TIM2_Init+0xf0>)
 80007c4:	f004 fd7e 	bl	80052c4 <HAL_TIM_IC_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80007ce:	f000 fb9b 	bl	8000f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	4619      	mov	r1, r3
 80007e0:	4814      	ldr	r0, [pc, #80]	; (8000834 <MX_TIM2_Init+0xf0>)
 80007e2:	f006 f8e5 	bl	80069b0 <HAL_TIMEx_MasterConfigSynchronization>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80007ec:	f000 fb8c 	bl	8000f08 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007f0:	2300      	movs	r3, #0
 80007f2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80007f4:	2301      	movs	r3, #1
 80007f6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 4;
 80007fc:	2304      	movs	r3, #4
 80007fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2204      	movs	r2, #4
 8000804:	4619      	mov	r1, r3
 8000806:	480b      	ldr	r0, [pc, #44]	; (8000834 <MX_TIM2_Init+0xf0>)
 8000808:	f005 f86f 	bl	80058ea <HAL_TIM_IC_ConfigChannel>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000812:	f000 fb79 	bl	8000f08 <Error_Handler>
  }
  if (HAL_TIMEx_TISelection(&htim2, TIM_TIM2_TI2_COMP1, TIM_CHANNEL_2) != HAL_OK)
 8000816:	2204      	movs	r2, #4
 8000818:	f44f 7180 	mov.w	r1, #256	; 0x100
 800081c:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_TIM2_Init+0xf0>)
 800081e:	f006 f9e9 	bl	8006bf4 <HAL_TIMEx_TISelection>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000828:	f000 fb6e 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	3730      	adds	r7, #48	; 0x30
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000258 	.word	0x20000258
 8000838:	01e84800 	.word	0x01e84800

0800083c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000842:	f107 0310 	add.w	r3, r7, #16
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800085a:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <MX_TIM4_Init+0x94>)
 800085c:	4a1d      	ldr	r2, [pc, #116]	; (80008d4 <MX_TIM4_Init+0x98>)
 800085e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15;
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <MX_TIM4_Init+0x94>)
 8000862:	220f      	movs	r2, #15
 8000864:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_TIM4_Init+0x94>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 800086c:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <MX_TIM4_Init+0x94>)
 800086e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000872:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000874:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <MX_TIM4_Init+0x94>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087a:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <MX_TIM4_Init+0x94>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000880:	4813      	ldr	r0, [pc, #76]	; (80008d0 <MX_TIM4_Init+0x94>)
 8000882:	f004 fa99 	bl	8004db8 <HAL_TIM_Base_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800088c:	f000 fb3c 	bl	8000f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000894:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000896:	f107 0310 	add.w	r3, r7, #16
 800089a:	4619      	mov	r1, r3
 800089c:	480c      	ldr	r0, [pc, #48]	; (80008d0 <MX_TIM4_Init+0x94>)
 800089e:	f005 f9c9 	bl	8005c34 <HAL_TIM_ConfigClockSource>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80008a8:	f000 fb2e 	bl	8000f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008ac:	2320      	movs	r3, #32
 80008ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	4619      	mov	r1, r3
 80008b8:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_TIM4_Init+0x94>)
 80008ba:	f006 f879 	bl	80069b0 <HAL_TIMEx_MasterConfigSynchronization>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80008c4:	f000 fb20 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	3720      	adds	r7, #32
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000084 	.word	0x20000084
 80008d4:	40000800 	.word	0x40000800

080008d8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_TIM6_Init+0x64>)
 80008ea:	4a15      	ldr	r2, [pc, #84]	; (8000940 <MX_TIM6_Init+0x68>)
 80008ec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 159;
 80008ee:	4b13      	ldr	r3, [pc, #76]	; (800093c <MX_TIM6_Init+0x64>)
 80008f0:	229f      	movs	r2, #159	; 0x9f
 80008f2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_TIM6_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <MX_TIM6_Init+0x64>)
 80008fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000900:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_TIM6_Init+0x64>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000908:	480c      	ldr	r0, [pc, #48]	; (800093c <MX_TIM6_Init+0x64>)
 800090a:	f004 fa55 	bl	8004db8 <HAL_TIM_Base_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000914:	f000 faf8 	bl	8000f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000918:	2300      	movs	r3, #0
 800091a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	4619      	mov	r1, r3
 8000924:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_TIM6_Init+0x64>)
 8000926:	f006 f843 	bl	80069b0 <HAL_TIMEx_MasterConfigSynchronization>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000930:	f000 faea 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	200001c0 	.word	0x200001c0
 8000940:	40001000 	.word	0x40001000

08000944 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000962:	4b22      	ldr	r3, [pc, #136]	; (80009ec <MX_TIM15_Init+0xa8>)
 8000964:	4a22      	ldr	r2, [pc, #136]	; (80009f0 <MX_TIM15_Init+0xac>)
 8000966:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 159;
 8000968:	4b20      	ldr	r3, [pc, #128]	; (80009ec <MX_TIM15_Init+0xa8>)
 800096a:	229f      	movs	r2, #159	; 0x9f
 800096c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096e:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <MX_TIM15_Init+0xa8>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 41000;
 8000974:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <MX_TIM15_Init+0xa8>)
 8000976:	f24a 0228 	movw	r2, #41000	; 0xa028
 800097a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <MX_TIM15_Init+0xa8>)
 800097e:	2200      	movs	r2, #0
 8000980:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <MX_TIM15_Init+0xa8>)
 8000984:	2200      	movs	r2, #0
 8000986:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000988:	4b18      	ldr	r3, [pc, #96]	; (80009ec <MX_TIM15_Init+0xa8>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 800098e:	4817      	ldr	r0, [pc, #92]	; (80009ec <MX_TIM15_Init+0xa8>)
 8000990:	f004 fc98 	bl	80052c4 <HAL_TIM_IC_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800099a:	f000 fab5 	bl	8000f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	4619      	mov	r1, r3
 80009ac:	480f      	ldr	r0, [pc, #60]	; (80009ec <MX_TIM15_Init+0xa8>)
 80009ae:	f005 ffff 	bl	80069b0 <HAL_TIMEx_MasterConfigSynchronization>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 80009b8:	f000 faa6 	bl	8000f08 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80009bc:	2300      	movs	r3, #0
 80009be:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80009c0:	2301      	movs	r3, #1
 80009c2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 4;
 80009c8:	2304      	movs	r3, #4
 80009ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	2200      	movs	r2, #0
 80009d0:	4619      	mov	r1, r3
 80009d2:	4806      	ldr	r0, [pc, #24]	; (80009ec <MX_TIM15_Init+0xa8>)
 80009d4:	f004 ff89 	bl	80058ea <HAL_TIM_IC_ConfigChannel>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM15_Init+0x9e>
  {
    Error_Handler();
 80009de:	f000 fa93 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	3720      	adds	r7, #32
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000150 	.word	0x20000150
 80009f0:	40014000 	.word	0x40014000

080009f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <MX_GPIO_Init+0x60>)
 8000a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0c:	4a11      	ldr	r2, [pc, #68]	; (8000a54 <MX_GPIO_Init+0x60>)
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_GPIO_Init+0x60>)
 8000a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, GPIO_PIN_RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2a:	f003 fa01 	bl	8003e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Status_LED_Pin */
  GPIO_InitStruct.Pin = Status_LED_Pin;
 8000a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Status_LED_GPIO_Port, &GPIO_InitStruct);
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	4619      	mov	r1, r3
 8000a44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a48:	f003 f870 	bl	8003b2c <HAL_GPIO_Init>

}
 8000a4c:	bf00      	nop
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40021000 	.word	0x40021000

08000a58 <NormalizeChannel>:

/* USER CODE BEGIN 4 */

int32_t NormalizeChannel(uint16_t ChannelValue, int32_t InMin, int32_t InMax, int32_t OutMin, int32_t OutMax)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b087      	sub	sp, #28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60b9      	str	r1, [r7, #8]
 8000a60:	607a      	str	r2, [r7, #4]
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	4603      	mov	r3, r0
 8000a66:	81fb      	strh	r3, [r7, #14]
	if ( ChannelValue <= InMin) return OutMin;
 8000a68:	89fb      	ldrh	r3, [r7, #14]
 8000a6a:	68ba      	ldr	r2, [r7, #8]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	db01      	blt.n	8000a74 <NormalizeChannel+0x1c>
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	e03a      	b.n	8000aea <NormalizeChannel+0x92>
	if ( ChannelValue >= InMax) return OutMax;
 8000a74:	89fb      	ldrh	r3, [r7, #14]
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	dc01      	bgt.n	8000a80 <NormalizeChannel+0x28>
 8000a7c:	6a3b      	ldr	r3, [r7, #32]
 8000a7e:	e034      	b.n	8000aea <NormalizeChannel+0x92>

	float ScaleA = ((float)(OutMax - OutMin))/(float)(InMax - InMin);
 8000a80:	6a3a      	ldr	r2, [r7, #32]
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	ee07 3a90 	vmov	s15, r3
 8000a8a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	ee07 3a90 	vmov	s15, r3
 8000a98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000aa0:	edc7 7a05 	vstr	s15, [r7, #20]
	float ScaleB = (float)OutMin-((float)InMin * ScaleA);
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	ee07 3a90 	vmov	s15, r3
 8000aaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	ee07 3a90 	vmov	s15, r3
 8000ab4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ab8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000abc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ac0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ac4:	edc7 7a04 	vstr	s15, [r7, #16]
	return (int32_t)(ChannelValue * ScaleA + ScaleB);
 8000ac8:	89fb      	ldrh	r3, [r7, #14]
 8000aca:	ee07 3a90 	vmov	s15, r3
 8000ace:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ad2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ad6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ada:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ade:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ae2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ae6:	ee17 3a90 	vmov	r3, s15
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	371c      	adds	r7, #28
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
	...

08000af8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
  {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a49      	ldr	r2, [pc, #292]	; (8000c28 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d15c      	bne.n	8000bc2 <HAL_TIM_IC_CaptureCallback+0xca>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)	//Input capture source is from COMP1 with a 1/4*VREF threshold
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	7f1b      	ldrb	r3, [r3, #28]
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	f040 8087 	bne.w	8000c20 <HAL_TIM_IC_CaptureCallback+0x128>
		{
			if (!ICSpeedIsFirstCapt)
 8000b12:	4b46      	ldr	r3, [pc, #280]	; (8000c2c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d10a      	bne.n	8000b30 <HAL_TIM_IC_CaptureCallback+0x38>
			{
				ICSpeedVal1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000b1a:	2104      	movs	r1, #4
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f005 f97f 	bl	8005e20 <HAL_TIM_ReadCapturedValue>
 8000b22:	4603      	mov	r3, r0
 8000b24:	4a42      	ldr	r2, [pc, #264]	; (8000c30 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000b26:	6013      	str	r3, [r2, #0]
				ICSpeedIsFirstCapt = 1;
 8000b28:	4b40      	ldr	r3, [pc, #256]	; (8000c2c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	701a      	strb	r2, [r3, #0]
			PASGotCapture = 1;

		}
	}

  }
 8000b2e:	e077      	b.n	8000c20 <HAL_TIM_IC_CaptureCallback+0x128>
				ICSpeedVal2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000b30:	2104      	movs	r1, #4
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f005 f974 	bl	8005e20 <HAL_TIM_ReadCapturedValue>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	4a3e      	ldr	r2, [pc, #248]	; (8000c34 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b3c:	6013      	str	r3, [r2, #0]
				if ( counter !=0)
 8000b3e:	4b3e      	ldr	r3, [pc, #248]	; (8000c38 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000b40:	881b      	ldrh	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d01f      	beq.n	8000b86 <HAL_TIM_IC_CaptureCallback+0x8e>
					if (ICSpeedVal1 < ICSpeedVal2) // Overflowed ?
 8000b46:	4b3a      	ldr	r3, [pc, #232]	; (8000c30 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	4b3a      	ldr	r3, [pc, #232]	; (8000c34 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d20a      	bcs.n	8000b68 <HAL_TIM_IC_CaptureCallback+0x70>
						ICSpeedDiff += ICSpeedVal2-ICSpeedVal1;
 8000b52:	4b38      	ldr	r3, [pc, #224]	; (8000c34 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	4b36      	ldr	r3, [pc, #216]	; (8000c30 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	1ad2      	subs	r2, r2, r3
 8000b5c:	4b37      	ldr	r3, [pc, #220]	; (8000c3c <HAL_TIM_IC_CaptureCallback+0x144>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4413      	add	r3, r2
 8000b62:	4a36      	ldr	r2, [pc, #216]	; (8000c3c <HAL_TIM_IC_CaptureCallback+0x144>)
 8000b64:	6013      	str	r3, [r2, #0]
 8000b66:	e00e      	b.n	8000b86 <HAL_TIM_IC_CaptureCallback+0x8e>
						ICSpeedDiff += ((htim->Instance->ARR-ICSpeedVal1)+ICSpeedVal2)+1;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b6e:	4b30      	ldr	r3, [pc, #192]	; (8000c30 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	1ad2      	subs	r2, r2, r3
 8000b74:	4b2f      	ldr	r3, [pc, #188]	; (8000c34 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4413      	add	r3, r2
 8000b7a:	1c5a      	adds	r2, r3, #1
 8000b7c:	4b2f      	ldr	r3, [pc, #188]	; (8000c3c <HAL_TIM_IC_CaptureCallback+0x144>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4413      	add	r3, r2
 8000b82:	4a2e      	ldr	r2, [pc, #184]	; (8000c3c <HAL_TIM_IC_CaptureCallback+0x144>)
 8000b84:	6013      	str	r3, [r2, #0]
				ICSpeedVal1 = ICSpeedVal2;
 8000b86:	4b2b      	ldr	r3, [pc, #172]	; (8000c34 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a29      	ldr	r2, [pc, #164]	; (8000c30 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000b8c:	6013      	str	r3, [r2, #0]
				counter++;
 8000b8e:	4b2a      	ldr	r3, [pc, #168]	; (8000c38 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000b90:	881b      	ldrh	r3, [r3, #0]
 8000b92:	3301      	adds	r3, #1
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	4b28      	ldr	r3, [pc, #160]	; (8000c38 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000b98:	801a      	strh	r2, [r3, #0]
				if (counter>=50)
 8000b9a:	4b27      	ldr	r3, [pc, #156]	; (8000c38 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	2b31      	cmp	r3, #49	; 0x31
 8000ba0:	d93e      	bls.n	8000c20 <HAL_TIM_IC_CaptureCallback+0x128>
					ICSpeedDiff /= counter-1;
 8000ba2:	4b26      	ldr	r3, [pc, #152]	; (8000c3c <HAL_TIM_IC_CaptureCallback+0x144>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a24      	ldr	r2, [pc, #144]	; (8000c38 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000ba8:	8812      	ldrh	r2, [r2, #0]
 8000baa:	3a01      	subs	r2, #1
 8000bac:	fbb3 f3f2 	udiv	r3, r3, r2
 8000bb0:	4a22      	ldr	r2, [pc, #136]	; (8000c3c <HAL_TIM_IC_CaptureCallback+0x144>)
 8000bb2:	6013      	str	r3, [r2, #0]
					counter = 0;
 8000bb4:	4b20      	ldr	r3, [pc, #128]	; (8000c38 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	801a      	strh	r2, [r3, #0]
					ICSpeedDiff = 0;
 8000bba:	4b20      	ldr	r3, [pc, #128]	; (8000c3c <HAL_TIM_IC_CaptureCallback+0x144>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
  }
 8000bc0:	e02e      	b.n	8000c20 <HAL_TIM_IC_CaptureCallback+0x128>
	else if (htim == &htim15)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a1e      	ldr	r2, [pc, #120]	; (8000c40 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d12a      	bne.n	8000c20 <HAL_TIM_IC_CaptureCallback+0x128>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)	//Input capture from PAS on channel 1
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	7f1b      	ldrb	r3, [r3, #28]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d126      	bne.n	8000c20 <HAL_TIM_IC_CaptureCallback+0x128>
			__HAL_TIM_SET_COUNTER(&htim15, 0); //Reset timeout counter
 8000bd2:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	625a      	str	r2, [r3, #36]	; 0x24
			PASSpeedDiff = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000bda:	2100      	movs	r1, #0
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f005 f91f 	bl	8005e20 <HAL_TIM_ReadCapturedValue>
 8000be2:	4603      	mov	r3, r0
 8000be4:	4a17      	ldr	r2, [pc, #92]	; (8000c44 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000be6:	6013      	str	r3, [r2, #0]
			if (PASSpeedDiff < (PAS_ACTIVE_THRESHOLD + PAS_Detected * 100))
 8000be8:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	2364      	movs	r3, #100	; 0x64
 8000bf0:	fb03 f302 	mul.w	r3, r3, r2
 8000bf4:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8000bf8:	3320      	adds	r3, #32
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d907      	bls.n	8000c14 <HAL_TIM_IC_CaptureCallback+0x11c>
				if (PASGotCapture == 1) PAS_Detected = 1;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <HAL_TIM_IC_CaptureCallback+0x154>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d106      	bne.n	8000c1a <HAL_TIM_IC_CaptureCallback+0x122>
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	e002      	b.n	8000c1a <HAL_TIM_IC_CaptureCallback+0x122>
				PAS_Detected = 0;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]
			PASGotCapture = 1;
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <HAL_TIM_IC_CaptureCallback+0x154>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	701a      	strb	r2, [r3, #0]
  }
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000258 	.word	0x20000258
 8000c2c:	20000040 	.word	0x20000040
 8000c30:	20000034 	.word	0x20000034
 8000c34:	20000038 	.word	0x20000038
 8000c38:	20000042 	.word	0x20000042
 8000c3c:	2000003c 	.word	0x2000003c
 8000c40:	20000150 	.word	0x20000150
 8000c44:	20000048 	.word	0x20000048
 8000c48:	20000044 	.word	0x20000044
 8000c4c:	20000000 	.word	0x20000000

08000c50 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc2)	//Do a lot of things inside the interruption because it's trigged by Timer 4 not so often (few ms)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a4b      	ldr	r2, [pc, #300]	; (8000d88 <HAL_ADC_ConvCpltCallback+0x138>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	f040 808f 	bne.w	8000d80 <HAL_ADC_ConvCpltCallback+0x130>
	{
		uint16_t value = HAL_ADC_GetValue(hadc);
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f001 f9f9 	bl	800205a <HAL_ADC_GetValue>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	81fb      	strh	r3, [r7, #14]
		switch(ADC2ChannelConfig.Channel)
 8000c6c:	4b47      	ldr	r3, [pc, #284]	; (8000d8c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a47      	ldr	r2, [pc, #284]	; (8000d90 <HAL_ADC_ConvCpltCallback+0x140>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d003      	beq.n	8000c7e <HAL_ADC_ConvCpltCallback+0x2e>
 8000c76:	4a47      	ldr	r2, [pc, #284]	; (8000d94 <HAL_ADC_ConvCpltCallback+0x144>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d018      	beq.n	8000cae <HAL_ADC_ConvCpltCallback+0x5e>
 8000c7c:	e073      	b.n	8000d66 <HAL_ADC_ConvCpltCallback+0x116>
		{
		case ADC_CHANNEL_1:;	//Channel 1 is mixed temperature/speed reading. Concentrate on the high level and ignore signal when it is low. We can concentrate on
			uint32_t reg = hcomp1.Instance->CSR;
 8000c7e:	4b46      	ldr	r3, [pc, #280]	; (8000d98 <HAL_ADC_ConvCpltCallback+0x148>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	60bb      	str	r3, [r7, #8]
			if (( reg & 0x40000000) != 0)
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d06d      	beq.n	8000d6c <HAL_ADC_ConvCpltCallback+0x11c>
			{
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, value);
 8000c90:	89fb      	ldrh	r3, [r7, #14]
 8000c92:	2200      	movs	r2, #0
 8000c94:	2110      	movs	r1, #16
 8000c96:	4841      	ldr	r0, [pc, #260]	; (8000d9c <HAL_ADC_ConvCpltCallback+0x14c>)
 8000c98:	f002 fd64 	bl	8003764 <HAL_DAC_SetValue>
				if (lowest>value) lowest = value;
 8000c9c:	4b40      	ldr	r3, [pc, #256]	; (8000da0 <HAL_ADC_ConvCpltCallback+0x150>)
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	89fa      	ldrh	r2, [r7, #14]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d262      	bcs.n	8000d6c <HAL_ADC_ConvCpltCallback+0x11c>
 8000ca6:	4a3e      	ldr	r2, [pc, #248]	; (8000da0 <HAL_ADC_ConvCpltCallback+0x150>)
 8000ca8:	89fb      	ldrh	r3, [r7, #14]
 8000caa:	8013      	strh	r3, [r2, #0]
			}
			break;
 8000cac:	e05e      	b.n	8000d6c <HAL_ADC_ConvCpltCallback+0x11c>

		case ADC_CHANNEL_17:	//Channel 17 is throttle input. Just copy its value after PPM conversion
			if (ThrottleStartup!=0)
 8000cae:	4b3d      	ldr	r3, [pc, #244]	; (8000da4 <HAL_ADC_ConvCpltCallback+0x154>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d04f      	beq.n	8000d56 <HAL_ADC_ConvCpltCallback+0x106>
			{
				if (value > 2048 && ThrottleStartup == 1)	//Throttle is maintained high during startup ==> Start calibration sequence
 8000cb6:	89fb      	ldrh	r3, [r7, #14]
 8000cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cbc:	d90a      	bls.n	8000cd4 <HAL_ADC_ConvCpltCallback+0x84>
 8000cbe:	4b39      	ldr	r3, [pc, #228]	; (8000da4 <HAL_ADC_ConvCpltCallback+0x154>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d106      	bne.n	8000cd4 <HAL_ADC_ConvCpltCallback+0x84>
				{
					ThrottleStartup = 2;
 8000cc6:	4b37      	ldr	r3, [pc, #220]	; (8000da4 <HAL_ADC_ConvCpltCallback+0x154>)
 8000cc8:	2202      	movs	r2, #2
 8000cca:	701a      	strb	r2, [r3, #0]
					MaxAnalogThrottleValue = value;
 8000ccc:	4a36      	ldr	r2, [pc, #216]	; (8000da8 <HAL_ADC_ConvCpltCallback+0x158>)
 8000cce:	89fb      	ldrh	r3, [r7, #14]
 8000cd0:	8013      	strh	r3, [r2, #0]
 8000cd2:	e047      	b.n	8000d64 <HAL_ADC_ConvCpltCallback+0x114>
				}
				else if (value > 2048 && ThrottleStartup == 2 && value>MaxAnalogThrottleValue)	//Capture max value while throttle is higher than 2048
 8000cd4:	89fb      	ldrh	r3, [r7, #14]
 8000cd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cda:	d90c      	bls.n	8000cf6 <HAL_ADC_ConvCpltCallback+0xa6>
 8000cdc:	4b31      	ldr	r3, [pc, #196]	; (8000da4 <HAL_ADC_ConvCpltCallback+0x154>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d108      	bne.n	8000cf6 <HAL_ADC_ConvCpltCallback+0xa6>
 8000ce4:	4b30      	ldr	r3, [pc, #192]	; (8000da8 <HAL_ADC_ConvCpltCallback+0x158>)
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	89fa      	ldrh	r2, [r7, #14]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d903      	bls.n	8000cf6 <HAL_ADC_ConvCpltCallback+0xa6>
				{
					MaxAnalogThrottleValue = value;
 8000cee:	4a2e      	ldr	r2, [pc, #184]	; (8000da8 <HAL_ADC_ConvCpltCallback+0x158>)
 8000cf0:	89fb      	ldrh	r3, [r7, #14]
 8000cf2:	8013      	strh	r3, [r2, #0]
 8000cf4:	e036      	b.n	8000d64 <HAL_ADC_ConvCpltCallback+0x114>
				}
				else if (value <= 2048 && ThrottleStartup == 2)	//When throttle has gone below mid value launch min calibration step
 8000cf6:	89fb      	ldrh	r3, [r7, #14]
 8000cf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cfc:	d80a      	bhi.n	8000d14 <HAL_ADC_ConvCpltCallback+0xc4>
 8000cfe:	4b29      	ldr	r3, [pc, #164]	; (8000da4 <HAL_ADC_ConvCpltCallback+0x154>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d106      	bne.n	8000d14 <HAL_ADC_ConvCpltCallback+0xc4>
				{
					ThrottleStartup = 3;
 8000d06:	4b27      	ldr	r3, [pc, #156]	; (8000da4 <HAL_ADC_ConvCpltCallback+0x154>)
 8000d08:	2203      	movs	r2, #3
 8000d0a:	701a      	strb	r2, [r3, #0]
					MinAnalogThrottleValue = value;
 8000d0c:	4a27      	ldr	r2, [pc, #156]	; (8000dac <HAL_ADC_ConvCpltCallback+0x15c>)
 8000d0e:	89fb      	ldrh	r3, [r7, #14]
 8000d10:	8013      	strh	r3, [r2, #0]
 8000d12:	e027      	b.n	8000d64 <HAL_ADC_ConvCpltCallback+0x114>
				}
				else if (value <= 2048 && ThrottleStartup == 3 && value<MinAnalogThrottleValue)	//capture min value while throttle is kept below 2048
 8000d14:	89fb      	ldrh	r3, [r7, #14]
 8000d16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d1a:	d80c      	bhi.n	8000d36 <HAL_ADC_ConvCpltCallback+0xe6>
 8000d1c:	4b21      	ldr	r3, [pc, #132]	; (8000da4 <HAL_ADC_ConvCpltCallback+0x154>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b03      	cmp	r3, #3
 8000d22:	d108      	bne.n	8000d36 <HAL_ADC_ConvCpltCallback+0xe6>
 8000d24:	4b21      	ldr	r3, [pc, #132]	; (8000dac <HAL_ADC_ConvCpltCallback+0x15c>)
 8000d26:	881b      	ldrh	r3, [r3, #0]
 8000d28:	89fa      	ldrh	r2, [r7, #14]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d203      	bcs.n	8000d36 <HAL_ADC_ConvCpltCallback+0xe6>
				{
					MinAnalogThrottleValue = value;
 8000d2e:	4a1f      	ldr	r2, [pc, #124]	; (8000dac <HAL_ADC_ConvCpltCallback+0x15c>)
 8000d30:	89fb      	ldrh	r3, [r7, #14]
 8000d32:	8013      	strh	r3, [r2, #0]
 8000d34:	e016      	b.n	8000d64 <HAL_ADC_ConvCpltCallback+0x114>
				}
				else if (value > 2048 && ThrottleStartup == 3) 	//Exit calibration procedure when throttle is back above mid value
 8000d36:	89fb      	ldrh	r3, [r7, #14]
 8000d38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d3c:	d907      	bls.n	8000d4e <HAL_ADC_ConvCpltCallback+0xfe>
 8000d3e:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <HAL_ADC_ConvCpltCallback+0x154>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b03      	cmp	r3, #3
 8000d44:	d103      	bne.n	8000d4e <HAL_ADC_ConvCpltCallback+0xfe>
				{
					ThrottleStartup = 0;
 8000d46:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <HAL_ADC_ConvCpltCallback+0x154>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
 8000d4c:	e00a      	b.n	8000d64 <HAL_ADC_ConvCpltCallback+0x114>
					//Add step to store new calibrated values to EEPROM
				}
				else ThrottleStartup = 0;
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <HAL_ADC_ConvCpltCallback+0x154>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	701a      	strb	r2, [r3, #0]
			else
			{
				ThrottleStartup = 0;
				AnalogThrottleValue = value;
			}
			break;
 8000d54:	e00b      	b.n	8000d6e <HAL_ADC_ConvCpltCallback+0x11e>
				ThrottleStartup = 0;
 8000d56:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <HAL_ADC_ConvCpltCallback+0x154>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]
				AnalogThrottleValue = value;
 8000d5c:	4a14      	ldr	r2, [pc, #80]	; (8000db0 <HAL_ADC_ConvCpltCallback+0x160>)
 8000d5e:	89fb      	ldrh	r3, [r7, #14]
 8000d60:	8013      	strh	r3, [r2, #0]
			break;
 8000d62:	e004      	b.n	8000d6e <HAL_ADC_ConvCpltCallback+0x11e>
 8000d64:	e003      	b.n	8000d6e <HAL_ADC_ConvCpltCallback+0x11e>

		default:
			Error_Handler();
 8000d66:	f000 f8cf 	bl	8000f08 <Error_Handler>
			break;
 8000d6a:	e000      	b.n	8000d6e <HAL_ADC_ConvCpltCallback+0x11e>
			break;
 8000d6c:	bf00      	nop
		}
		HAL_ADC_Stop_IT(&hadc2);	//Stop ADC Because we are going to change channel
 8000d6e:	4806      	ldr	r0, [pc, #24]	; (8000d88 <HAL_ADC_ConvCpltCallback+0x138>)
 8000d70:	f001 f938 	bl	8001fe4 <HAL_ADC_Stop_IT>
		toogle_ADC_Channel(&ADC2ChannelConfig);	//Switch adc channel for next conversion
 8000d74:	4805      	ldr	r0, [pc, #20]	; (8000d8c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000d76:	f000 f845 	bl	8000e04 <toogle_ADC_Channel>
		HAL_ADC_Start_IT(&hadc2);	//Restart ADC Waiting for next conversion (after Timer 4 Trigger)
 8000d7a:	4803      	ldr	r0, [pc, #12]	; (8000d88 <HAL_ADC_ConvCpltCallback+0x138>)
 8000d7c:	f001 f800 	bl	8001d80 <HAL_ADC_Start_IT>
	}
}
 8000d80:	bf00      	nop
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	200000e4 	.word	0x200000e4
 8000d8c:	2000004c 	.word	0x2000004c
 8000d90:	04300002 	.word	0x04300002
 8000d94:	47520000 	.word	0x47520000
 8000d98:	2000019c 	.word	0x2000019c
 8000d9c:	200000d0 	.word	0x200000d0
 8000da0:	20000002 	.word	0x20000002
 8000da4:	20000006 	.word	0x20000006
 8000da8:	20000004 	.word	0x20000004
 8000dac:	2000006c 	.word	0x2000006c
 8000db0:	2000006e 	.word	0x2000006e

08000db4 <init_ADC_Channel>:

void init_ADC_Channel(ADC_ChannelConfTypeDef* ADCChannel)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	ADCChannel->Channel = ADC_CHANNEL_1;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4a0f      	ldr	r2, [pc, #60]	; (8000dfc <init_ADC_Channel+0x48>)
 8000dc0:	601a      	str	r2, [r3, #0]
	ADCChannel->Rank = ADC_REGULAR_RANK_1;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2206      	movs	r2, #6
 8000dc6:	605a      	str	r2, [r3, #4]
	ADCChannel->SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2202      	movs	r2, #2
 8000dcc:	609a      	str	r2, [r3, #8]
	ADCChannel->SingleDiff = ADC_SINGLE_ENDED;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	227f      	movs	r2, #127	; 0x7f
 8000dd2:	60da      	str	r2, [r3, #12]
	ADCChannel->OffsetNumber = ADC_OFFSET_NONE;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2204      	movs	r2, #4
 8000dd8:	611a      	str	r2, [r3, #16]
	ADCChannel->Offset = 0;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_ConfigChannel(&hadc2, ADCChannel) != HAL_OK)
 8000de0:	6879      	ldr	r1, [r7, #4]
 8000de2:	4807      	ldr	r0, [pc, #28]	; (8000e00 <init_ADC_Channel+0x4c>)
 8000de4:	f001 fb74 	bl	80024d0 <HAL_ADC_ConfigChannel>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <init_ADC_Channel+0x3e>
		{
			Error_Handler();
 8000dee:	f000 f88b 	bl	8000f08 <Error_Handler>
		}
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	04300002 	.word	0x04300002
 8000e00:	200000e4 	.word	0x200000e4

08000e04 <toogle_ADC_Channel>:

void toogle_ADC_Channel(ADC_ChannelConfTypeDef* ADCChannel)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
	if ( ADCChannel->Channel == ADC_CHANNEL_1) ADCChannel->Channel = ADC_CHANNEL_17;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0b      	ldr	r2, [pc, #44]	; (8000e40 <toogle_ADC_Channel+0x3c>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d103      	bne.n	8000e1e <toogle_ADC_Channel+0x1a>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <toogle_ADC_Channel+0x40>)
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	e002      	b.n	8000e24 <toogle_ADC_Channel+0x20>
	else ADCChannel->Channel = ADC_CHANNEL_1;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <toogle_ADC_Channel+0x3c>)
 8000e22:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc2, ADCChannel) != HAL_OK)
 8000e24:	6879      	ldr	r1, [r7, #4]
 8000e26:	4808      	ldr	r0, [pc, #32]	; (8000e48 <toogle_ADC_Channel+0x44>)
 8000e28:	f001 fb52 	bl	80024d0 <HAL_ADC_ConfigChannel>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <toogle_ADC_Channel+0x32>
	{
		Error_Handler();
 8000e32:	f000 f869 	bl	8000f08 <Error_Handler>
	}
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	04300002 	.word	0x04300002
 8000e44:	47520000 	.word	0x47520000
 8000e48:	200000e4 	.word	0x200000e4

08000e4c <refreshPPM>:

uint8_t refreshPPM(uint16_t ThrottleValue)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af02      	add	r7, sp, #8
 8000e52:	4603      	mov	r3, r0
 8000e54:	80fb      	strh	r3, [r7, #6]
	if (OutputActive == 1 )
 8000e56:	4b26      	ldr	r3, [pc, #152]	; (8000ef0 <refreshPPM+0xa4>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d13e      	bne.n	8000edc <refreshPPM+0x90>
	{
		if (ThrottleValue < THROTTLE_THRESHOLD && PAS_Detected != 0 && AssistLevel<=4 && AssistLevel >0)
 8000e5e:	88fb      	ldrh	r3, [r7, #6]
 8000e60:	2b63      	cmp	r3, #99	; 0x63
 8000e62:	d826      	bhi.n	8000eb2 <refreshPPM+0x66>
 8000e64:	4b23      	ldr	r3, [pc, #140]	; (8000ef4 <refreshPPM+0xa8>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d022      	beq.n	8000eb2 <refreshPPM+0x66>
 8000e6c:	4b22      	ldr	r3, [pc, #136]	; (8000ef8 <refreshPPM+0xac>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b04      	cmp	r3, #4
 8000e72:	d81e      	bhi.n	8000eb2 <refreshPPM+0x66>
 8000e74:	4b20      	ldr	r3, [pc, #128]	; (8000ef8 <refreshPPM+0xac>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d01a      	beq.n	8000eb2 <refreshPPM+0x66>
		{
			htim1.Instance->CCR1 = (uint16_t)NormalizeChannel(1000 * AssistLevel, 0, 4000, MIN_CHANNEL_VALUE, MAX_CHANNEL_VALUE);
 8000e7c:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <refreshPPM+0xac>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	461a      	mov	r2, r3
 8000e84:	0152      	lsls	r2, r2, #5
 8000e86:	1ad2      	subs	r2, r2, r3
 8000e88:	0092      	lsls	r2, r2, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	b298      	uxth	r0, r3
 8000e90:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000e94:	9300      	str	r3, [sp, #0]
 8000e96:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e9a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	f7ff fdda 	bl	8000a58 <NormalizeChannel>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	4b14      	ldr	r3, [pc, #80]	; (8000efc <refreshPPM+0xb0>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	635a      	str	r2, [r3, #52]	; 0x34
			return 2;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	e01a      	b.n	8000ee8 <refreshPPM+0x9c>
		}

		htim1.Instance->CCR1 = (uint16_t)NormalizeChannel(ThrottleValue, MinAnalogThrottleValue, MaxAnalogThrottleValue, MIN_CHANNEL_VALUE, MAX_CHANNEL_VALUE);
 8000eb2:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <refreshPPM+0xb4>)
 8000eb4:	881b      	ldrh	r3, [r3, #0]
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <refreshPPM+0xb8>)
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	88f8      	ldrh	r0, [r7, #6]
 8000ec0:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000eca:	f7ff fdc5 	bl	8000a58 <NormalizeChannel>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <refreshPPM+0xb0>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	635a      	str	r2, [r3, #52]	; 0x34
		return 1;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e005      	b.n	8000ee8 <refreshPPM+0x9c>
	}
	else htim1.Instance->CCR1 = 500;
 8000edc:	4b07      	ldr	r3, [pc, #28]	; (8000efc <refreshPPM+0xb0>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ee4:	635a      	str	r2, [r3, #52]	; 0x34
	return 0;
 8000ee6:	2300      	movs	r3, #0
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000007 	.word	0x20000007
 8000ef4:	20000044 	.word	0x20000044
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	2000020c 	.word	0x2000020c
 8000f00:	2000006c 	.word	0x2000006c
 8000f04:	20000004 	.word	0x20000004

08000f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f0c:	b672      	cpsid	i
}
 8000f0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <Error_Handler+0x8>
	...

08000f14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <HAL_MspInit+0x44>)
 8000f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f1e:	4a0e      	ldr	r2, [pc, #56]	; (8000f58 <HAL_MspInit+0x44>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6613      	str	r3, [r2, #96]	; 0x60
 8000f26:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <HAL_MspInit+0x44>)
 8000f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_MspInit+0x44>)
 8000f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f36:	4a08      	ldr	r2, [pc, #32]	; (8000f58 <HAL_MspInit+0x44>)
 8000f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_MspInit+0x44>)
 8000f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f4a:	f003 f82d 	bl	8003fa8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40021000 	.word	0x40021000

08000f5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	; 0x28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a19      	ldr	r2, [pc, #100]	; (8000fe0 <HAL_ADC_MspInit+0x84>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d12c      	bne.n	8000fd8 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f7e:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <HAL_ADC_MspInit+0x88>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	4a18      	ldr	r2, [pc, #96]	; (8000fe4 <HAL_ADC_MspInit+0x88>)
 8000f84:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8a:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <HAL_ADC_MspInit+0x88>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <HAL_ADC_MspInit+0x88>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9a:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <HAL_ADC_MspInit+0x88>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa2:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <HAL_ADC_MspInit+0x88>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA0     ------> ADC2_IN1
    PA4     ------> ADC2_IN17
    */
    GPIO_InitStruct.Pin = Temp_in_analog_Pin|Throttle_in_analog_Pin;
 8000fae:	2311      	movs	r3, #17
 8000fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc4:	f002 fdb2 	bl	8003b2c <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2100      	movs	r1, #0
 8000fcc:	2012      	movs	r0, #18
 8000fce:	f002 fac6 	bl	800355e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000fd2:	2012      	movs	r0, #18
 8000fd4:	f002 fadd 	bl	8003592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000fd8:	bf00      	nop
 8000fda:	3728      	adds	r7, #40	; 0x28
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	50000100 	.word	0x50000100
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0f      	ldr	r2, [pc, #60]	; (8001044 <HAL_COMP_MspInit+0x5c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d118      	bne.n	800103c <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <HAL_COMP_MspInit+0x60>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	4a0e      	ldr	r2, [pc, #56]	; (8001048 <HAL_COMP_MspInit+0x60>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <HAL_COMP_MspInit+0x60>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PA1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001022:	2302      	movs	r3, #2
 8001024:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001026:	2303      	movs	r3, #3
 8001028:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	4619      	mov	r1, r3
 8001034:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001038:	f002 fd78 	bl	8003b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 800103c:	bf00      	nop
 800103e:	3720      	adds	r7, #32
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40010200 	.word	0x40010200
 8001048:	40021000 	.word	0x40021000

0800104c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08a      	sub	sp, #40	; 0x28
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a26      	ldr	r2, [pc, #152]	; (8001104 <HAL_DAC_MspInit+0xb8>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d12d      	bne.n	80010ca <HAL_DAC_MspInit+0x7e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800106e:	4b26      	ldr	r3, [pc, #152]	; (8001108 <HAL_DAC_MspInit+0xbc>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	4a25      	ldr	r2, [pc, #148]	; (8001108 <HAL_DAC_MspInit+0xbc>)
 8001074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107a:	4b23      	ldr	r3, [pc, #140]	; (8001108 <HAL_DAC_MspInit+0xbc>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	4b20      	ldr	r3, [pc, #128]	; (8001108 <HAL_DAC_MspInit+0xbc>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	4a1f      	ldr	r2, [pc, #124]	; (8001108 <HAL_DAC_MspInit+0xbc>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001092:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <HAL_DAC_MspInit+0xbc>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = Temp_out_Pin;
 800109e:	2320      	movs	r3, #32
 80010a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010a2:	2303      	movs	r3, #3
 80010a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Temp_out_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	4619      	mov	r1, r3
 80010b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b4:	f002 fd3a 	bl	8003b2c <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2100      	movs	r1, #0
 80010bc:	2036      	movs	r0, #54	; 0x36
 80010be:	f002 fa4e 	bl	800355e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010c2:	2036      	movs	r0, #54	; 0x36
 80010c4:	f002 fa65 	bl	8003592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }

}
 80010c8:	e018      	b.n	80010fc <HAL_DAC_MspInit+0xb0>
  else if(hdac->Instance==DAC3)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a0f      	ldr	r2, [pc, #60]	; (800110c <HAL_DAC_MspInit+0xc0>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d113      	bne.n	80010fc <HAL_DAC_MspInit+0xb0>
    __HAL_RCC_DAC3_CLK_ENABLE();
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <HAL_DAC_MspInit+0xbc>)
 80010d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d8:	4a0b      	ldr	r2, [pc, #44]	; (8001108 <HAL_DAC_MspInit+0xbc>)
 80010da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e0:	4b09      	ldr	r3, [pc, #36]	; (8001108 <HAL_DAC_MspInit+0xbc>)
 80010e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2100      	movs	r1, #0
 80010f0:	2036      	movs	r0, #54	; 0x36
 80010f2:	f002 fa34 	bl	800355e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010f6:	2036      	movs	r0, #54	; 0x36
 80010f8:	f002 fa4b 	bl	8003592 <HAL_NVIC_EnableIRQ>
}
 80010fc:	bf00      	nop
 80010fe:	3728      	adds	r7, #40	; 0x28
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	50000800 	.word	0x50000800
 8001108:	40021000 	.word	0x40021000
 800110c:	50001000 	.word	0x50001000

08001110 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a30      	ldr	r2, [pc, #192]	; (80011e0 <HAL_TIM_Base_MspInit+0xd0>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d114      	bne.n	800114c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001122:	4b30      	ldr	r3, [pc, #192]	; (80011e4 <HAL_TIM_Base_MspInit+0xd4>)
 8001124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001126:	4a2f      	ldr	r2, [pc, #188]	; (80011e4 <HAL_TIM_Base_MspInit+0xd4>)
 8001128:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800112c:	6613      	str	r3, [r2, #96]	; 0x60
 800112e:	4b2d      	ldr	r3, [pc, #180]	; (80011e4 <HAL_TIM_Base_MspInit+0xd4>)
 8001130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2100      	movs	r1, #0
 800113e:	2018      	movs	r0, #24
 8001140:	f002 fa0d 	bl	800355e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001144:	2018      	movs	r0, #24
 8001146:	f002 fa24 	bl	8003592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800114a:	e044      	b.n	80011d6 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001154:	d114      	bne.n	8001180 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001156:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <HAL_TIM_Base_MspInit+0xd4>)
 8001158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115a:	4a22      	ldr	r2, [pc, #136]	; (80011e4 <HAL_TIM_Base_MspInit+0xd4>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6593      	str	r3, [r2, #88]	; 0x58
 8001162:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <HAL_TIM_Base_MspInit+0xd4>)
 8001164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	201c      	movs	r0, #28
 8001174:	f002 f9f3 	bl	800355e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001178:	201c      	movs	r0, #28
 800117a:	f002 fa0a 	bl	8003592 <HAL_NVIC_EnableIRQ>
}
 800117e:	e02a      	b.n	80011d6 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a18      	ldr	r2, [pc, #96]	; (80011e8 <HAL_TIM_Base_MspInit+0xd8>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d10c      	bne.n	80011a4 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800118a:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <HAL_TIM_Base_MspInit+0xd4>)
 800118c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118e:	4a15      	ldr	r2, [pc, #84]	; (80011e4 <HAL_TIM_Base_MspInit+0xd4>)
 8001190:	f043 0304 	orr.w	r3, r3, #4
 8001194:	6593      	str	r3, [r2, #88]	; 0x58
 8001196:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <HAL_TIM_Base_MspInit+0xd4>)
 8001198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119a:	f003 0304 	and.w	r3, r3, #4
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
}
 80011a2:	e018      	b.n	80011d6 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM6)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a10      	ldr	r2, [pc, #64]	; (80011ec <HAL_TIM_Base_MspInit+0xdc>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d113      	bne.n	80011d6 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80011ae:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <HAL_TIM_Base_MspInit+0xd4>)
 80011b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b2:	4a0c      	ldr	r2, [pc, #48]	; (80011e4 <HAL_TIM_Base_MspInit+0xd4>)
 80011b4:	f043 0310 	orr.w	r3, r3, #16
 80011b8:	6593      	str	r3, [r2, #88]	; 0x58
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <HAL_TIM_Base_MspInit+0xd4>)
 80011bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011be:	f003 0310 	and.w	r3, r3, #16
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2100      	movs	r1, #0
 80011ca:	2036      	movs	r0, #54	; 0x36
 80011cc:	f002 f9c7 	bl	800355e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011d0:	2036      	movs	r0, #54	; 0x36
 80011d2:	f002 f9de 	bl	8003592 <HAL_NVIC_EnableIRQ>
}
 80011d6:	bf00      	nop
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40012c00 	.word	0x40012c00
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40000800 	.word	0x40000800
 80011ec:	40001000 	.word	0x40001000

080011f0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM15)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a1b      	ldr	r2, [pc, #108]	; (800127c <HAL_TIM_IC_MspInit+0x8c>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d130      	bne.n	8001274 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001212:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <HAL_TIM_IC_MspInit+0x90>)
 8001214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001216:	4a1a      	ldr	r2, [pc, #104]	; (8001280 <HAL_TIM_IC_MspInit+0x90>)
 8001218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800121c:	6613      	str	r3, [r2, #96]	; 0x60
 800121e:	4b18      	ldr	r3, [pc, #96]	; (8001280 <HAL_TIM_IC_MspInit+0x90>)
 8001220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <HAL_TIM_IC_MspInit+0x90>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	4a14      	ldr	r2, [pc, #80]	; (8001280 <HAL_TIM_IC_MspInit+0x90>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_TIM_IC_MspInit+0x90>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
    /**TIM15 GPIO Configuration
    PA2     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001242:	2304      	movs	r3, #4
 8001244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	2302      	movs	r3, #2
 8001248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2300      	movs	r3, #0
 8001250:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8001252:	2309      	movs	r3, #9
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	4619      	mov	r1, r3
 800125c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001260:	f002 fc64 	bl	8003b2c <HAL_GPIO_Init>

    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001264:	2200      	movs	r2, #0
 8001266:	2100      	movs	r1, #0
 8001268:	2018      	movs	r0, #24
 800126a:	f002 f978 	bl	800355e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800126e:	2018      	movs	r0, #24
 8001270:	f002 f98f 	bl	8003592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001274:	bf00      	nop
 8001276:	3728      	adds	r7, #40	; 0x28
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40014000 	.word	0x40014000
 8001280:	40021000 	.word	0x40021000

08001284 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a12      	ldr	r2, [pc, #72]	; (80012ec <HAL_TIM_MspPostInit+0x68>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d11d      	bne.n	80012e2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_TIM_MspPostInit+0x6c>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	4a11      	ldr	r2, [pc, #68]	; (80012f0 <HAL_TIM_MspPostInit+0x6c>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <HAL_TIM_MspPostInit+0x6c>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80012d0:	2306      	movs	r3, #6
 80012d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	4619      	mov	r1, r3
 80012da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012de:	f002 fc25 	bl	8003b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80012e2:	bf00      	nop
 80012e4:	3720      	adds	r7, #32
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40012c00 	.word	0x40012c00
 80012f0:	40021000 	.word	0x40021000

080012f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <NMI_Handler+0x4>

080012fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012fe:	e7fe      	b.n	80012fe <HardFault_Handler+0x4>

08001300 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <MemManage_Handler+0x4>

08001306 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800130a:	e7fe      	b.n	800130a <BusFault_Handler+0x4>

0800130c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001310:	e7fe      	b.n	8001310 <UsageFault_Handler+0x4>

08001312 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001340:	f000 f8c6 	bl	80014d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}

08001348 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 800134c:	4802      	ldr	r0, [pc, #8]	; (8001358 <ADC1_2_IRQHandler+0x10>)
 800134e:	f000 fe91 	bl	8002074 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200000e4 	.word	0x200000e4

0800135c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001360:	4803      	ldr	r0, [pc, #12]	; (8001370 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8001362:	f004 f943 	bl	80055ec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8001366:	4803      	ldr	r0, [pc, #12]	; (8001374 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8001368:	f004 f940 	bl	80055ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	2000020c 	.word	0x2000020c
 8001374:	20000150 	.word	0x20000150

08001378 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800137c:	4802      	ldr	r0, [pc, #8]	; (8001388 <TIM2_IRQHandler+0x10>)
 800137e:	f004 f935 	bl	80055ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000258 	.word	0x20000258

0800138c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001390:	4805      	ldr	r0, [pc, #20]	; (80013a8 <TIM6_DAC_IRQHandler+0x1c>)
 8001392:	f004 f92b 	bl	80055ec <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <TIM6_DAC_IRQHandler+0x20>)
 8001398:	f002 f98a 	bl	80036b0 <HAL_DAC_IRQHandler>
  HAL_DAC_IRQHandler(&hdac3);
 800139c:	4804      	ldr	r0, [pc, #16]	; (80013b0 <TIM6_DAC_IRQHandler+0x24>)
 800139e:	f002 f987 	bl	80036b0 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200001c0 	.word	0x200001c0
 80013ac:	200000d0 	.word	0x200000d0
 80013b0:	20000070 	.word	0x20000070

080013b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <SystemInit+0x20>)
 80013ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013be:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <SystemInit+0x20>)
 80013c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 80013d8:	480d      	ldr	r0, [pc, #52]	; (8001410 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013da:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013dc:	480d      	ldr	r0, [pc, #52]	; (8001414 <LoopForever+0x6>)
  ldr r1, =_edata
 80013de:	490e      	ldr	r1, [pc, #56]	; (8001418 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013e0:	4a0e      	ldr	r2, [pc, #56]	; (800141c <LoopForever+0xe>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80013e4:	e002      	b.n	80013ec <LoopCopyDataInit>

080013e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ea:	3304      	adds	r3, #4

080013ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f0:	d3f9      	bcc.n	80013e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f2:	4a0b      	ldr	r2, [pc, #44]	; (8001420 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013f4:	4c0b      	ldr	r4, [pc, #44]	; (8001424 <LoopForever+0x16>)
  movs r3, #0
 80013f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f8:	e001      	b.n	80013fe <LoopFillZerobss>

080013fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013fc:	3204      	adds	r2, #4

080013fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001400:	d3fb      	bcc.n	80013fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001402:	f7ff ffd7 	bl	80013b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001406:	f005 fcc9 	bl	8006d9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800140a:	f7fe ff35 	bl	8000278 <main>

0800140e <LoopForever>:

LoopForever:
    b LoopForever
 800140e:	e7fe      	b.n	800140e <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8001410:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001418:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800141c:	08006e24 	.word	0x08006e24
  ldr r2, =_sbss
 8001420:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001424:	200002a8 	.word	0x200002a8

08001428 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001428:	e7fe      	b.n	8001428 <COMP1_2_3_IRQHandler>

0800142a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001430:	2300      	movs	r3, #0
 8001432:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001434:	2003      	movs	r0, #3
 8001436:	f002 f887 	bl	8003548 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800143a:	2000      	movs	r0, #0
 800143c:	f000 f80e 	bl	800145c <HAL_InitTick>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d002      	beq.n	800144c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	71fb      	strb	r3, [r7, #7]
 800144a:	e001      	b.n	8001450 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800144c:	f7ff fd62 	bl	8000f14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001450:	79fb      	ldrb	r3, [r7, #7]

}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001464:	2300      	movs	r3, #0
 8001466:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001468:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <HAL_InitTick+0x68>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d022      	beq.n	80014b6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001470:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <HAL_InitTick+0x6c>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <HAL_InitTick+0x68>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800147c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001480:	fbb2 f3f3 	udiv	r3, r2, r3
 8001484:	4618      	mov	r0, r3
 8001486:	f002 f892 	bl	80035ae <HAL_SYSTICK_Config>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d10f      	bne.n	80014b0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b0f      	cmp	r3, #15
 8001494:	d809      	bhi.n	80014aa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001496:	2200      	movs	r2, #0
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	f04f 30ff 	mov.w	r0, #4294967295
 800149e:	f002 f85e 	bl	800355e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014a2:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <HAL_InitTick+0x70>)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	e007      	b.n	80014ba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	73fb      	strb	r3, [r7, #15]
 80014ae:	e004      	b.n	80014ba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	73fb      	strb	r3, [r7, #15]
 80014b4:	e001      	b.n	80014ba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000014 	.word	0x20000014
 80014c8:	2000000c 	.word	0x2000000c
 80014cc:	20000010 	.word	0x20000010

080014d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <HAL_IncTick+0x1c>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <HAL_IncTick+0x20>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4413      	add	r3, r2
 80014de:	4a03      	ldr	r2, [pc, #12]	; (80014ec <HAL_IncTick+0x1c>)
 80014e0:	6013      	str	r3, [r2, #0]
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	200002a4 	.word	0x200002a4
 80014f0:	20000014 	.word	0x20000014

080014f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return uwTick;
 80014f8:	4b03      	ldr	r3, [pc, #12]	; (8001508 <HAL_GetTick+0x14>)
 80014fa:	681b      	ldr	r3, [r3, #0]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	200002a4 	.word	0x200002a4

0800150c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001514:	f7ff ffee 	bl	80014f4 <HAL_GetTick>
 8001518:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001524:	d004      	beq.n	8001530 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <HAL_Delay+0x40>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	4413      	add	r3, r2
 800152e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001530:	bf00      	nop
 8001532:	f7ff ffdf 	bl	80014f4 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	429a      	cmp	r2, r3
 8001540:	d8f7      	bhi.n	8001532 <HAL_Delay+0x26>
  {
  }
}
 8001542:	bf00      	nop
 8001544:	bf00      	nop
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000014 	.word	0x20000014

08001550 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	609a      	str	r2, [r3, #8]
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	431a      	orrs	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	609a      	str	r2, [r3, #8]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b087      	sub	sp, #28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
 80015c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	3360      	adds	r3, #96	; 0x60
 80015ca:	461a      	mov	r2, r3
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b08      	ldr	r3, [pc, #32]	; (80015fc <LL_ADC_SetOffset+0x44>)
 80015da:	4013      	ands	r3, r2
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	430a      	orrs	r2, r1
 80015e6:	4313      	orrs	r3, r2
 80015e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80015f0:	bf00      	nop
 80015f2:	371c      	adds	r7, #28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	03fff000 	.word	0x03fff000

08001600 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3360      	adds	r3, #96	; 0x60
 800160e:	461a      	mov	r2, r3
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001620:	4618      	mov	r0, r3
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800162c:	b480      	push	{r7}
 800162e:	b087      	sub	sp, #28
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	3360      	adds	r3, #96	; 0x60
 800163c:	461a      	mov	r2, r3
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	431a      	orrs	r2, r3
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001656:	bf00      	nop
 8001658:	371c      	adds	r7, #28
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001662:	b480      	push	{r7}
 8001664:	b087      	sub	sp, #28
 8001666:	af00      	add	r7, sp, #0
 8001668:	60f8      	str	r0, [r7, #12]
 800166a:	60b9      	str	r1, [r7, #8]
 800166c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	3360      	adds	r3, #96	; 0x60
 8001672:	461a      	mov	r2, r3
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	431a      	orrs	r2, r3
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800168c:	bf00      	nop
 800168e:	371c      	adds	r7, #28
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001698:	b480      	push	{r7}
 800169a:	b087      	sub	sp, #28
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	3360      	adds	r3, #96	; 0x60
 80016a8:	461a      	mov	r2, r3
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	431a      	orrs	r2, r3
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80016c2:	bf00      	nop
 80016c4:	371c      	adds	r7, #28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	695b      	ldr	r3, [r3, #20]
 80016dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	615a      	str	r2, [r3, #20]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001708:	2301      	movs	r3, #1
 800170a:	e000      	b.n	800170e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800171a:	b480      	push	{r7}
 800171c:	b087      	sub	sp, #28
 800171e:	af00      	add	r7, sp, #0
 8001720:	60f8      	str	r0, [r7, #12]
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	3330      	adds	r3, #48	; 0x30
 800172a:	461a      	mov	r2, r3
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	0a1b      	lsrs	r3, r3, #8
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	f003 030c 	and.w	r3, r3, #12
 8001736:	4413      	add	r3, r2
 8001738:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	f003 031f 	and.w	r3, r3, #31
 8001744:	211f      	movs	r1, #31
 8001746:	fa01 f303 	lsl.w	r3, r1, r3
 800174a:	43db      	mvns	r3, r3
 800174c:	401a      	ands	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	0e9b      	lsrs	r3, r3, #26
 8001752:	f003 011f 	and.w	r1, r3, #31
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	f003 031f 	and.w	r3, r3, #31
 800175c:	fa01 f303 	lsl.w	r3, r1, r3
 8001760:	431a      	orrs	r2, r3
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001766:	bf00      	nop
 8001768:	371c      	adds	r7, #28
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001786:	2301      	movs	r3, #1
 8001788:	e000      	b.n	800178c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001798:	b480      	push	{r7}
 800179a:	b087      	sub	sp, #28
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	3314      	adds	r3, #20
 80017a8:	461a      	mov	r2, r3
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	0e5b      	lsrs	r3, r3, #25
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	4413      	add	r3, r2
 80017b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	0d1b      	lsrs	r3, r3, #20
 80017c0:	f003 031f 	and.w	r3, r3, #31
 80017c4:	2107      	movs	r1, #7
 80017c6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	401a      	ands	r2, r3
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	0d1b      	lsrs	r3, r3, #20
 80017d2:	f003 031f 	and.w	r3, r3, #31
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	fa01 f303 	lsl.w	r3, r1, r3
 80017dc:	431a      	orrs	r2, r3
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80017e2:	bf00      	nop
 80017e4:	371c      	adds	r7, #28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
	...

080017f0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001808:	43db      	mvns	r3, r3
 800180a:	401a      	ands	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f003 0318 	and.w	r3, r3, #24
 8001812:	4908      	ldr	r1, [pc, #32]	; (8001834 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001814:	40d9      	lsrs	r1, r3
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	400b      	ands	r3, r1
 800181a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800181e:	431a      	orrs	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001826:	bf00      	nop
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	0007ffff 	.word	0x0007ffff

08001838 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 031f 	and.w	r3, r3, #31
}
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001864:	4618      	mov	r0, r3
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001880:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	6093      	str	r3, [r2, #8]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018a8:	d101      	bne.n	80018ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018aa:	2301      	movs	r3, #1
 80018ac:	e000      	b.n	80018b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80018cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80018f8:	d101      	bne.n	80018fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80018fa:	2301      	movs	r3, #1
 80018fc:	e000      	b.n	8001900 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800191c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001920:	f043 0201 	orr.w	r2, r3, #1
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001944:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001948:	f043 0202 	orr.w	r2, r3, #2
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b01      	cmp	r3, #1
 800196e:	d101      	bne.n	8001974 <LL_ADC_IsEnabled+0x18>
 8001970:	2301      	movs	r3, #1
 8001972:	e000      	b.n	8001976 <LL_ADC_IsEnabled+0x1a>
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b02      	cmp	r3, #2
 8001994:	d101      	bne.n	800199a <LL_ADC_IsDisableOngoing+0x18>
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <LL_ADC_IsDisableOngoing+0x1a>
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019bc:	f043 0204 	orr.w	r2, r3, #4
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019e4:	f043 0210 	orr.w	r2, r3, #16
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b04      	cmp	r3, #4
 8001a0a:	d101      	bne.n	8001a10 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e000      	b.n	8001a12 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a2e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a32:	f043 0220 	orr.w	r2, r3, #32
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b08      	cmp	r3, #8
 8001a58:	d101      	bne.n	8001a5e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a6c:	b590      	push	{r4, r7, lr}
 8001a6e:	b089      	sub	sp, #36	; 0x24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a74:	2300      	movs	r3, #0
 8001a76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e16d      	b.n	8001d62 <HAL_ADC_Init+0x2f6>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d109      	bne.n	8001aa8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff fa61 	bl	8000f5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fef1 	bl	8001894 <LL_ADC_IsDeepPowerDownEnabled>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d004      	beq.n	8001ac2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fed7 	bl	8001870 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff ff0c 	bl	80018e4 <LL_ADC_IsInternalRegulatorEnabled>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d115      	bne.n	8001afe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fef0 	bl	80018bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001adc:	4ba3      	ldr	r3, [pc, #652]	; (8001d6c <HAL_ADC_Init+0x300>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	099b      	lsrs	r3, r3, #6
 8001ae2:	4aa3      	ldr	r2, [pc, #652]	; (8001d70 <HAL_ADC_Init+0x304>)
 8001ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae8:	099b      	lsrs	r3, r3, #6
 8001aea:	3301      	adds	r3, #1
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001af0:	e002      	b.n	8001af8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	3b01      	subs	r3, #1
 8001af6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f9      	bne.n	8001af2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff feee 	bl	80018e4 <LL_ADC_IsInternalRegulatorEnabled>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10d      	bne.n	8001b2a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b12:	f043 0210 	orr.w	r2, r3, #16
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b1e:	f043 0201 	orr.w	r2, r3, #1
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff ff62 	bl	80019f8 <LL_ADC_REG_IsConversionOngoing>
 8001b34:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b3a:	f003 0310 	and.w	r3, r3, #16
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f040 8106 	bne.w	8001d50 <HAL_ADC_Init+0x2e4>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f040 8102 	bne.w	8001d50 <HAL_ADC_Init+0x2e4>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b50:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b54:	f043 0202 	orr.w	r2, r3, #2
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fefb 	bl	800195c <LL_ADC_IsEnabled>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d111      	bne.n	8001b90 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b6c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001b70:	f7ff fef4 	bl	800195c <LL_ADC_IsEnabled>
 8001b74:	4604      	mov	r4, r0
 8001b76:	487f      	ldr	r0, [pc, #508]	; (8001d74 <HAL_ADC_Init+0x308>)
 8001b78:	f7ff fef0 	bl	800195c <LL_ADC_IsEnabled>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	4323      	orrs	r3, r4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d105      	bne.n	8001b90 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	4619      	mov	r1, r3
 8001b8a:	487b      	ldr	r0, [pc, #492]	; (8001d78 <HAL_ADC_Init+0x30c>)
 8001b8c:	f7ff fce0 	bl	8001550 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	7f5b      	ldrb	r3, [r3, #29]
 8001b94:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b9a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001ba0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001ba6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bae:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d106      	bne.n	8001bcc <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	045b      	lsls	r3, r3, #17
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d009      	beq.n	8001be8 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68da      	ldr	r2, [r3, #12]
 8001bee:	4b63      	ldr	r3, [pc, #396]	; (8001d7c <HAL_ADC_Init+0x310>)
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6812      	ldr	r2, [r2, #0]
 8001bf6:	69b9      	ldr	r1, [r7, #24]
 8001bf8:	430b      	orrs	r3, r1
 8001bfa:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff feee 	bl	80019f8 <LL_ADC_REG_IsConversionOngoing>
 8001c1c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff ff0f 	bl	8001a46 <LL_ADC_INJ_IsConversionOngoing>
 8001c28:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d16d      	bne.n	8001d0c <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d16a      	bne.n	8001d0c <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c3a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c42:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c52:	f023 0302 	bic.w	r3, r3, #2
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6812      	ldr	r2, [r2, #0]
 8001c5a:	69b9      	ldr	r1, [r7, #24]
 8001c5c:	430b      	orrs	r3, r1
 8001c5e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d017      	beq.n	8001c98 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	691a      	ldr	r2, [r3, #16]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c76:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001c80:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	6911      	ldr	r1, [r2, #16]
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	430b      	orrs	r3, r1
 8001c92:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001c96:	e013      	b.n	8001cc0 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	691a      	ldr	r2, [r3, #16]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ca6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6812      	ldr	r2, [r2, #0]
 8001cb4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001cb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cbc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d118      	bne.n	8001cfc <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001cd4:	f023 0304 	bic.w	r3, r3, #4
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ce0:	4311      	orrs	r1, r2
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001ce6:	4311      	orrs	r1, r2
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001cec:	430a      	orrs	r2, r1
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f042 0201 	orr.w	r2, r2, #1
 8001cf8:	611a      	str	r2, [r3, #16]
 8001cfa:	e007      	b.n	8001d0c <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	691a      	ldr	r2, [r3, #16]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0201 	bic.w	r2, r2, #1
 8001d0a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	695b      	ldr	r3, [r3, #20]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d10c      	bne.n	8001d2e <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f023 010f 	bic.w	r1, r3, #15
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	1e5a      	subs	r2, r3, #1
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	631a      	str	r2, [r3, #48]	; 0x30
 8001d2c:	e007      	b.n	8001d3e <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 020f 	bic.w	r2, r2, #15
 8001d3c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d42:	f023 0303 	bic.w	r3, r3, #3
 8001d46:	f043 0201 	orr.w	r2, r3, #1
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d4e:	e007      	b.n	8001d60 <HAL_ADC_Init+0x2f4>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d54:	f043 0210 	orr.w	r2, r3, #16
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d60:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3724      	adds	r7, #36	; 0x24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd90      	pop	{r4, r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	2000000c 	.word	0x2000000c
 8001d70:	053e2d63 	.word	0x053e2d63
 8001d74:	50000100 	.word	0x50000100
 8001d78:	50000300 	.word	0x50000300
 8001d7c:	fff04007 	.word	0xfff04007

08001d80 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d88:	4894      	ldr	r0, [pc, #592]	; (8001fdc <HAL_ADC_Start_IT+0x25c>)
 8001d8a:	f7ff fd55 	bl	8001838 <LL_ADC_GetMultimode>
 8001d8e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fe2f 	bl	80019f8 <LL_ADC_REG_IsConversionOngoing>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f040 8114 	bne.w	8001fca <HAL_ADC_Start_IT+0x24a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d101      	bne.n	8001db0 <HAL_ADC_Start_IT+0x30>
 8001dac:	2302      	movs	r3, #2
 8001dae:	e111      	b.n	8001fd4 <HAL_ADC_Start_IT+0x254>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f001 f835 	bl	8002e28 <ADC_Enable>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001dc2:	7dfb      	ldrb	r3, [r7, #23]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f040 80fb 	bne.w	8001fc0 <HAL_ADC_Start_IT+0x240>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001dd2:	f023 0301 	bic.w	r3, r3, #1
 8001dd6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a7f      	ldr	r2, [pc, #508]	; (8001fe0 <HAL_ADC_Start_IT+0x260>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d002      	beq.n	8001dee <HAL_ADC_Start_IT+0x6e>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	e001      	b.n	8001df2 <HAL_ADC_Start_IT+0x72>
 8001dee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	6812      	ldr	r2, [r2, #0]
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d002      	beq.n	8001e00 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d105      	bne.n	8001e0c <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e04:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d006      	beq.n	8001e26 <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e1c:	f023 0206 	bic.w	r2, r3, #6
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	661a      	str	r2, [r3, #96]	; 0x60
 8001e24:	e002      	b.n	8001e2c <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	221c      	movs	r2, #28
 8001e32:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 021c 	bic.w	r2, r2, #28
 8001e4a:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d108      	bne.n	8001e66 <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0208 	orr.w	r2, r2, #8
 8001e62:	605a      	str	r2, [r3, #4]
          break;
 8001e64:	e008      	b.n	8001e78 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f042 0204 	orr.w	r2, r2, #4
 8001e74:	605a      	str	r2, [r3, #4]
          break;
 8001e76:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d107      	bne.n	8001e90 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0210 	orr.w	r2, r2, #16
 8001e8e:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a52      	ldr	r2, [pc, #328]	; (8001fe0 <HAL_ADC_Start_IT+0x260>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d002      	beq.n	8001ea0 <HAL_ADC_Start_IT+0x120>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	e001      	b.n	8001ea4 <HAL_ADC_Start_IT+0x124>
 8001ea0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	6812      	ldr	r2, [r2, #0]
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d008      	beq.n	8001ebe <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d005      	beq.n	8001ebe <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	2b05      	cmp	r3, #5
 8001eb6:	d002      	beq.n	8001ebe <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	2b09      	cmp	r3, #9
 8001ebc:	d13b      	bne.n	8001f36 <HAL_ADC_Start_IT+0x1b6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d02d      	beq.n	8001f28 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ed4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d110      	bne.n	8001f06 <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 0220 	bic.w	r2, r2, #32
 8001ef2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f02:	605a      	str	r2, [r3, #4]
              break;
 8001f04:	e011      	b.n	8001f2a <HAL_ADC_Start_IT+0x1aa>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f14:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f042 0220 	orr.w	r2, r2, #32
 8001f24:	605a      	str	r2, [r3, #4]
              break;
 8001f26:	e000      	b.n	8001f2a <HAL_ADC_Start_IT+0x1aa>
          }
        }
 8001f28:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff fd3a 	bl	80019a8 <LL_ADC_REG_StartConversion>
 8001f34:	e04d      	b.n	8001fd2 <HAL_ADC_Start_IT+0x252>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a26      	ldr	r2, [pc, #152]	; (8001fe0 <HAL_ADC_Start_IT+0x260>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d002      	beq.n	8001f52 <HAL_ADC_Start_IT+0x1d2>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	e001      	b.n	8001f56 <HAL_ADC_Start_IT+0x1d6>
 8001f52:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f56:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d035      	beq.n	8001fd0 <HAL_ADC_Start_IT+0x250>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f68:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f6c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d110      	bne.n	8001f9e <HAL_ADC_Start_IT+0x21e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0220 	bic.w	r2, r2, #32
 8001f8a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f9a:	605a      	str	r2, [r3, #4]
              break;
 8001f9c:	e019      	b.n	8001fd2 <HAL_ADC_Start_IT+0x252>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fac:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f042 0220 	orr.w	r2, r2, #32
 8001fbc:	605a      	str	r2, [r3, #4]
              break;
 8001fbe:	e008      	b.n	8001fd2 <HAL_ADC_Start_IT+0x252>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001fc8:	e003      	b.n	8001fd2 <HAL_ADC_Start_IT+0x252>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	75fb      	strb	r3, [r7, #23]
 8001fce:	e000      	b.n	8001fd2 <HAL_ADC_Start_IT+0x252>
        }
 8001fd0:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8001fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	50000300 	.word	0x50000300
 8001fe0:	50000100 	.word	0x50000100

08001fe4 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d101      	bne.n	8001ffa <HAL_ADC_Stop_IT+0x16>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e02b      	b.n	8002052 <HAL_ADC_Stop_IT+0x6e>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002002:	2103      	movs	r1, #3
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 fe53 	bl	8002cb0 <ADC_ConversionStop>
 800200a:	4603      	mov	r3, r0
 800200c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d119      	bne.n	8002048 <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 021c 	bic.w	r2, r2, #28
 8002022:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 ff61 	bl	8002eec <ADC_Disable>
 800202a:	4603      	mov	r3, r0
 800202c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800202e:	7bfb      	ldrb	r3, [r7, #15]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d109      	bne.n	8002048 <HAL_ADC_Stop_IT+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002038:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800203c:	f023 0301 	bic.w	r3, r3, #1
 8002040:	f043 0201 	orr.w	r2, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002050:	7bfb      	ldrb	r3, [r7, #15]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002068:	4618      	mov	r0, r3
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08a      	sub	sp, #40	; 0x28
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800207c:	2300      	movs	r3, #0
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002090:	4883      	ldr	r0, [pc, #524]	; (80022a0 <HAL_ADC_IRQHandler+0x22c>)
 8002092:	f7ff fbd1 	bl	8001838 <LL_ADC_GetMultimode>
 8002096:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d017      	beq.n	80020d2 <HAL_ADC_IRQHandler+0x5e>
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d012      	beq.n	80020d2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b0:	f003 0310 	and.w	r3, r3, #16
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d105      	bne.n	80020c4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020bc:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 ff98 	bl	8002ffa <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2202      	movs	r2, #2
 80020d0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d004      	beq.n	80020e6 <HAL_ADC_IRQHandler+0x72>
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10a      	bne.n	80020fc <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 8085 	beq.w	80021fc <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d07f      	beq.n	80021fc <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002100:	f003 0310 	and.w	r3, r3, #16
 8002104:	2b00      	cmp	r3, #0
 8002106:	d105      	bne.n	8002114 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff faeb 	bl	80016f4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d064      	beq.n	80021ee <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a5e      	ldr	r2, [pc, #376]	; (80022a4 <HAL_ADC_IRQHandler+0x230>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d002      	beq.n	8002134 <HAL_ADC_IRQHandler+0xc0>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	e001      	b.n	8002138 <HAL_ADC_IRQHandler+0xc4>
 8002134:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6812      	ldr	r2, [r2, #0]
 800213c:	4293      	cmp	r3, r2
 800213e:	d008      	beq.n	8002152 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d005      	beq.n	8002152 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	2b05      	cmp	r3, #5
 800214a:	d002      	beq.n	8002152 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	2b09      	cmp	r3, #9
 8002150:	d104      	bne.n	800215c <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	623b      	str	r3, [r7, #32]
 800215a:	e00d      	b.n	8002178 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a50      	ldr	r2, [pc, #320]	; (80022a4 <HAL_ADC_IRQHandler+0x230>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d002      	beq.n	800216c <HAL_ADC_IRQHandler+0xf8>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	e001      	b.n	8002170 <HAL_ADC_IRQHandler+0xfc>
 800216c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002170:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002178:	6a3b      	ldr	r3, [r7, #32]
 800217a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d135      	bne.n	80021ee <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0308 	and.w	r3, r3, #8
 800218c:	2b08      	cmp	r3, #8
 800218e:	d12e      	bne.n	80021ee <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff fc2f 	bl	80019f8 <LL_ADC_REG_IsConversionOngoing>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d11a      	bne.n	80021d6 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 020c 	bic.w	r2, r2, #12
 80021ae:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d112      	bne.n	80021ee <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021cc:	f043 0201 	orr.w	r2, r3, #1
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80021d4:	e00b      	b.n	80021ee <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021da:	f043 0210 	orr.w	r2, r3, #16
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e6:	f043 0201 	orr.w	r2, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7fe fd2e 	bl	8000c50 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	220c      	movs	r2, #12
 80021fa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f003 0320 	and.w	r3, r3, #32
 8002202:	2b00      	cmp	r3, #0
 8002204:	d004      	beq.n	8002210 <HAL_ADC_IRQHandler+0x19c>
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	f003 0320 	and.w	r3, r3, #32
 800220c:	2b00      	cmp	r3, #0
 800220e:	d10b      	bne.n	8002228 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 809e 	beq.w	8002358 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 8098 	beq.w	8002358 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222c:	f003 0310 	and.w	r3, r3, #16
 8002230:	2b00      	cmp	r3, #0
 8002232:	d105      	bne.n	8002240 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002238:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff fa94 	bl	8001772 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800224a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff fa4f 	bl	80016f4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002256:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a11      	ldr	r2, [pc, #68]	; (80022a4 <HAL_ADC_IRQHandler+0x230>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d002      	beq.n	8002268 <HAL_ADC_IRQHandler+0x1f4>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	e001      	b.n	800226c <HAL_ADC_IRQHandler+0x1f8>
 8002268:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6812      	ldr	r2, [r2, #0]
 8002270:	4293      	cmp	r3, r2
 8002272:	d008      	beq.n	8002286 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d005      	beq.n	8002286 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2b06      	cmp	r3, #6
 800227e:	d002      	beq.n	8002286 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	2b07      	cmp	r3, #7
 8002284:	d104      	bne.n	8002290 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	623b      	str	r3, [r7, #32]
 800228e:	e011      	b.n	80022b4 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a03      	ldr	r2, [pc, #12]	; (80022a4 <HAL_ADC_IRQHandler+0x230>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d006      	beq.n	80022a8 <HAL_ADC_IRQHandler+0x234>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	e005      	b.n	80022ac <HAL_ADC_IRQHandler+0x238>
 80022a0:	50000300 	.word	0x50000300
 80022a4:	50000100 	.word	0x50000100
 80022a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022ac:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d047      	beq.n	800234a <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80022ba:	6a3b      	ldr	r3, [r7, #32]
 80022bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d007      	beq.n	80022d4 <HAL_ADC_IRQHandler+0x260>
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d03f      	beq.n	800234a <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80022ca:	6a3b      	ldr	r3, [r7, #32]
 80022cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d13a      	bne.n	800234a <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022de:	2b40      	cmp	r3, #64	; 0x40
 80022e0:	d133      	bne.n	800234a <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d12e      	bne.n	800234a <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fba8 	bl	8001a46 <LL_ADC_INJ_IsConversionOngoing>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d11a      	bne.n	8002332 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800230a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002310:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002320:	2b00      	cmp	r3, #0
 8002322:	d112      	bne.n	800234a <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002328:	f043 0201 	orr.w	r2, r3, #1
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002330:	e00b      	b.n	800234a <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002336:	f043 0210 	orr.w	r2, r3, #16
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002342:	f043 0201 	orr.w	r2, r3, #1
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 fe2d 	bl	8002faa <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2260      	movs	r2, #96	; 0x60
 8002356:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235e:	2b00      	cmp	r3, #0
 8002360:	d011      	beq.n	8002386 <HAL_ADC_IRQHandler+0x312>
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00c      	beq.n	8002386 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002370:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 f895 	bl	80024a8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2280      	movs	r2, #128	; 0x80
 8002384:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238c:	2b00      	cmp	r3, #0
 800238e:	d012      	beq.n	80023b6 <HAL_ADC_IRQHandler+0x342>
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00d      	beq.n	80023b6 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800239e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 fe13 	bl	8002fd2 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023b4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d012      	beq.n	80023e6 <HAL_ADC_IRQHandler+0x372>
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00d      	beq.n	80023e6 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 fe05 	bl	8002fe6 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	f003 0310 	and.w	r3, r3, #16
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d036      	beq.n	800245e <HAL_ADC_IRQHandler+0x3ea>
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	f003 0310 	and.w	r3, r3, #16
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d031      	beq.n	800245e <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d102      	bne.n	8002408 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8002402:	2301      	movs	r3, #1
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
 8002406:	e014      	b.n	8002432 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d008      	beq.n	8002420 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800240e:	4825      	ldr	r0, [pc, #148]	; (80024a4 <HAL_ADC_IRQHandler+0x430>)
 8002410:	f7ff fa20 	bl	8001854 <LL_ADC_GetMultiDMATransfer>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00b      	beq.n	8002432 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800241a:	2301      	movs	r3, #1
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
 800241e:	e008      	b.n	8002432 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800242e:	2301      	movs	r3, #1
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	2b01      	cmp	r3, #1
 8002436:	d10e      	bne.n	8002456 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002448:	f043 0202 	orr.w	r2, r3, #2
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f833 	bl	80024bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2210      	movs	r2, #16
 800245c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002464:	2b00      	cmp	r3, #0
 8002466:	d018      	beq.n	800249a <HAL_ADC_IRQHandler+0x426>
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800246e:	2b00      	cmp	r3, #0
 8002470:	d013      	beq.n	800249a <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002476:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002482:	f043 0208 	orr.w	r2, r3, #8
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002492:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 fd92 	bl	8002fbe <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800249a:	bf00      	nop
 800249c:	3728      	adds	r7, #40	; 0x28
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	50000300 	.word	0x50000300

080024a8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b0b6      	sub	sp, #216	; 0xd8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d101      	bne.n	80024f2 <HAL_ADC_ConfigChannel+0x22>
 80024ee:	2302      	movs	r3, #2
 80024f0:	e3c8      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x7b4>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff fa7a 	bl	80019f8 <LL_ADC_REG_IsConversionOngoing>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	f040 83ad 	bne.w	8002c66 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6818      	ldr	r0, [r3, #0]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	6859      	ldr	r1, [r3, #4]
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	461a      	mov	r2, r3
 800251a:	f7ff f8fe 	bl	800171a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff fa68 	bl	80019f8 <LL_ADC_REG_IsConversionOngoing>
 8002528:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fa88 	bl	8001a46 <LL_ADC_INJ_IsConversionOngoing>
 8002536:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800253a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800253e:	2b00      	cmp	r3, #0
 8002540:	f040 81d9 	bne.w	80028f6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002544:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002548:	2b00      	cmp	r3, #0
 800254a:	f040 81d4 	bne.w	80028f6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002556:	d10f      	bne.n	8002578 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2200      	movs	r2, #0
 8002562:	4619      	mov	r1, r3
 8002564:	f7ff f918 	bl	8001798 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff f8ac 	bl	80016ce <LL_ADC_SetSamplingTimeCommonConfig>
 8002576:	e00e      	b.n	8002596 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	6819      	ldr	r1, [r3, #0]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	461a      	mov	r2, r3
 8002586:	f7ff f907 	bl	8001798 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2100      	movs	r1, #0
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff f89c 	bl	80016ce <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	695a      	ldr	r2, [r3, #20]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	08db      	lsrs	r3, r3, #3
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	2b04      	cmp	r3, #4
 80025b6:	d022      	beq.n	80025fe <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6818      	ldr	r0, [r3, #0]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	6919      	ldr	r1, [r3, #16]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80025c8:	f7fe fff6 	bl	80015b8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	6919      	ldr	r1, [r3, #16]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	461a      	mov	r2, r3
 80025da:	f7ff f842 	bl	8001662 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	6919      	ldr	r1, [r3, #16]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	7f1b      	ldrb	r3, [r3, #28]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d102      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x124>
 80025ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025f2:	e000      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x126>
 80025f4:	2300      	movs	r3, #0
 80025f6:	461a      	mov	r2, r3
 80025f8:	f7ff f84e 	bl	8001698 <LL_ADC_SetOffsetSaturation>
 80025fc:	e17b      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2100      	movs	r1, #0
 8002604:	4618      	mov	r0, r3
 8002606:	f7fe fffb 	bl	8001600 <LL_ADC_GetOffsetChannel>
 800260a:	4603      	mov	r3, r0
 800260c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10a      	bne.n	800262a <HAL_ADC_ConfigChannel+0x15a>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2100      	movs	r1, #0
 800261a:	4618      	mov	r0, r3
 800261c:	f7fe fff0 	bl	8001600 <LL_ADC_GetOffsetChannel>
 8002620:	4603      	mov	r3, r0
 8002622:	0e9b      	lsrs	r3, r3, #26
 8002624:	f003 021f 	and.w	r2, r3, #31
 8002628:	e01e      	b.n	8002668 <HAL_ADC_ConfigChannel+0x198>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2100      	movs	r1, #0
 8002630:	4618      	mov	r0, r3
 8002632:	f7fe ffe5 	bl	8001600 <LL_ADC_GetOffsetChannel>
 8002636:	4603      	mov	r3, r0
 8002638:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002640:	fa93 f3a3 	rbit	r3, r3
 8002644:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002648:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800264c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002650:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002658:	2320      	movs	r3, #32
 800265a:	e004      	b.n	8002666 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800265c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002660:	fab3 f383 	clz	r3, r3
 8002664:	b2db      	uxtb	r3, r3
 8002666:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002670:	2b00      	cmp	r3, #0
 8002672:	d105      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x1b0>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	0e9b      	lsrs	r3, r3, #26
 800267a:	f003 031f 	and.w	r3, r3, #31
 800267e:	e018      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x1e2>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800268c:	fa93 f3a3 	rbit	r3, r3
 8002690:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002694:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002698:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800269c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80026a4:	2320      	movs	r3, #32
 80026a6:	e004      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80026a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80026ac:	fab3 f383 	clz	r3, r3
 80026b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d106      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2200      	movs	r2, #0
 80026bc:	2100      	movs	r1, #0
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe ffb4 	bl	800162c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2101      	movs	r1, #1
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fe ff98 	bl	8001600 <LL_ADC_GetOffsetChannel>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10a      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x220>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2101      	movs	r1, #1
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fe ff8d 	bl	8001600 <LL_ADC_GetOffsetChannel>
 80026e6:	4603      	mov	r3, r0
 80026e8:	0e9b      	lsrs	r3, r3, #26
 80026ea:	f003 021f 	and.w	r2, r3, #31
 80026ee:	e01e      	b.n	800272e <HAL_ADC_ConfigChannel+0x25e>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2101      	movs	r1, #1
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fe ff82 	bl	8001600 <LL_ADC_GetOffsetChannel>
 80026fc:	4603      	mov	r3, r0
 80026fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002702:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002706:	fa93 f3a3 	rbit	r3, r3
 800270a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800270e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002712:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002716:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800271e:	2320      	movs	r3, #32
 8002720:	e004      	b.n	800272c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002722:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002726:	fab3 f383 	clz	r3, r3
 800272a:	b2db      	uxtb	r3, r3
 800272c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002736:	2b00      	cmp	r3, #0
 8002738:	d105      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x276>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	0e9b      	lsrs	r3, r3, #26
 8002740:	f003 031f 	and.w	r3, r3, #31
 8002744:	e018      	b.n	8002778 <HAL_ADC_ConfigChannel+0x2a8>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002752:	fa93 f3a3 	rbit	r3, r3
 8002756:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800275a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800275e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002762:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800276a:	2320      	movs	r3, #32
 800276c:	e004      	b.n	8002778 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800276e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002772:	fab3 f383 	clz	r3, r3
 8002776:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002778:	429a      	cmp	r2, r3
 800277a:	d106      	bne.n	800278a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2200      	movs	r2, #0
 8002782:	2101      	movs	r1, #1
 8002784:	4618      	mov	r0, r3
 8002786:	f7fe ff51 	bl	800162c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2102      	movs	r1, #2
 8002790:	4618      	mov	r0, r3
 8002792:	f7fe ff35 	bl	8001600 <LL_ADC_GetOffsetChannel>
 8002796:	4603      	mov	r3, r0
 8002798:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10a      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x2e6>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2102      	movs	r1, #2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fe ff2a 	bl	8001600 <LL_ADC_GetOffsetChannel>
 80027ac:	4603      	mov	r3, r0
 80027ae:	0e9b      	lsrs	r3, r3, #26
 80027b0:	f003 021f 	and.w	r2, r3, #31
 80027b4:	e01e      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x324>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2102      	movs	r1, #2
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fe ff1f 	bl	8001600 <LL_ADC_GetOffsetChannel>
 80027c2:	4603      	mov	r3, r0
 80027c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027cc:	fa93 f3a3 	rbit	r3, r3
 80027d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80027d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80027dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80027e4:	2320      	movs	r3, #32
 80027e6:	e004      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80027e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027ec:	fab3 f383 	clz	r3, r3
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d105      	bne.n	800280c <HAL_ADC_ConfigChannel+0x33c>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	0e9b      	lsrs	r3, r3, #26
 8002806:	f003 031f 	and.w	r3, r3, #31
 800280a:	e016      	b.n	800283a <HAL_ADC_ConfigChannel+0x36a>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002814:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002818:	fa93 f3a3 	rbit	r3, r3
 800281c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800281e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002820:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002824:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800282c:	2320      	movs	r3, #32
 800282e:	e004      	b.n	800283a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002830:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002834:	fab3 f383 	clz	r3, r3
 8002838:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800283a:	429a      	cmp	r2, r3
 800283c:	d106      	bne.n	800284c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2200      	movs	r2, #0
 8002844:	2102      	movs	r1, #2
 8002846:	4618      	mov	r0, r3
 8002848:	f7fe fef0 	bl	800162c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2103      	movs	r1, #3
 8002852:	4618      	mov	r0, r3
 8002854:	f7fe fed4 	bl	8001600 <LL_ADC_GetOffsetChannel>
 8002858:	4603      	mov	r3, r0
 800285a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10a      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x3a8>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2103      	movs	r1, #3
 8002868:	4618      	mov	r0, r3
 800286a:	f7fe fec9 	bl	8001600 <LL_ADC_GetOffsetChannel>
 800286e:	4603      	mov	r3, r0
 8002870:	0e9b      	lsrs	r3, r3, #26
 8002872:	f003 021f 	and.w	r2, r3, #31
 8002876:	e017      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x3d8>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2103      	movs	r1, #3
 800287e:	4618      	mov	r0, r3
 8002880:	f7fe febe 	bl	8001600 <LL_ADC_GetOffsetChannel>
 8002884:	4603      	mov	r3, r0
 8002886:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002888:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800288a:	fa93 f3a3 	rbit	r3, r3
 800288e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002890:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002892:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002894:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800289a:	2320      	movs	r3, #32
 800289c:	e003      	b.n	80028a6 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800289e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028a0:	fab3 f383 	clz	r3, r3
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d105      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x3f0>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	0e9b      	lsrs	r3, r3, #26
 80028ba:	f003 031f 	and.w	r3, r3, #31
 80028be:	e011      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x414>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028c8:	fa93 f3a3 	rbit	r3, r3
 80028cc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80028ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80028d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80028d8:	2320      	movs	r3, #32
 80028da:	e003      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80028dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028de:	fab3 f383 	clz	r3, r3
 80028e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d106      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2200      	movs	r2, #0
 80028ee:	2103      	movs	r1, #3
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7fe fe9b 	bl	800162c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff f82e 	bl	800195c <LL_ADC_IsEnabled>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	f040 8140 	bne.w	8002b88 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6818      	ldr	r0, [r3, #0]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	6819      	ldr	r1, [r3, #0]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	461a      	mov	r2, r3
 8002916:	f7fe ff6b 	bl	80017f0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	4a8f      	ldr	r2, [pc, #572]	; (8002b5c <HAL_ADC_ConfigChannel+0x68c>)
 8002920:	4293      	cmp	r3, r2
 8002922:	f040 8131 	bne.w	8002b88 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10b      	bne.n	800294e <HAL_ADC_ConfigChannel+0x47e>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	0e9b      	lsrs	r3, r3, #26
 800293c:	3301      	adds	r3, #1
 800293e:	f003 031f 	and.w	r3, r3, #31
 8002942:	2b09      	cmp	r3, #9
 8002944:	bf94      	ite	ls
 8002946:	2301      	movls	r3, #1
 8002948:	2300      	movhi	r3, #0
 800294a:	b2db      	uxtb	r3, r3
 800294c:	e019      	b.n	8002982 <HAL_ADC_ConfigChannel+0x4b2>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002954:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002956:	fa93 f3a3 	rbit	r3, r3
 800295a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800295c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800295e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002960:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002966:	2320      	movs	r3, #32
 8002968:	e003      	b.n	8002972 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800296a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800296c:	fab3 f383 	clz	r3, r3
 8002970:	b2db      	uxtb	r3, r3
 8002972:	3301      	adds	r3, #1
 8002974:	f003 031f 	and.w	r3, r3, #31
 8002978:	2b09      	cmp	r3, #9
 800297a:	bf94      	ite	ls
 800297c:	2301      	movls	r3, #1
 800297e:	2300      	movhi	r3, #0
 8002980:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002982:	2b00      	cmp	r3, #0
 8002984:	d079      	beq.n	8002a7a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800298e:	2b00      	cmp	r3, #0
 8002990:	d107      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x4d2>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	0e9b      	lsrs	r3, r3, #26
 8002998:	3301      	adds	r3, #1
 800299a:	069b      	lsls	r3, r3, #26
 800299c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029a0:	e015      	b.n	80029ce <HAL_ADC_ConfigChannel+0x4fe>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029aa:	fa93 f3a3 	rbit	r3, r3
 80029ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80029b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029b2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80029b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80029ba:	2320      	movs	r3, #32
 80029bc:	e003      	b.n	80029c6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80029be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c0:	fab3 f383 	clz	r3, r3
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	3301      	adds	r3, #1
 80029c8:	069b      	lsls	r3, r3, #26
 80029ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d109      	bne.n	80029ee <HAL_ADC_ConfigChannel+0x51e>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	0e9b      	lsrs	r3, r3, #26
 80029e0:	3301      	adds	r3, #1
 80029e2:	f003 031f 	and.w	r3, r3, #31
 80029e6:	2101      	movs	r1, #1
 80029e8:	fa01 f303 	lsl.w	r3, r1, r3
 80029ec:	e017      	b.n	8002a1e <HAL_ADC_ConfigChannel+0x54e>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029f6:	fa93 f3a3 	rbit	r3, r3
 80029fa:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80029fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002a00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002a06:	2320      	movs	r3, #32
 8002a08:	e003      	b.n	8002a12 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a0c:	fab3 f383 	clz	r3, r3
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	3301      	adds	r3, #1
 8002a14:	f003 031f 	and.w	r3, r3, #31
 8002a18:	2101      	movs	r1, #1
 8002a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1e:	ea42 0103 	orr.w	r1, r2, r3
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10a      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x574>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	0e9b      	lsrs	r3, r3, #26
 8002a34:	3301      	adds	r3, #1
 8002a36:	f003 021f 	and.w	r2, r3, #31
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	4413      	add	r3, r2
 8002a40:	051b      	lsls	r3, r3, #20
 8002a42:	e018      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x5a6>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a4c:	fa93 f3a3 	rbit	r3, r3
 8002a50:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a54:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002a5c:	2320      	movs	r3, #32
 8002a5e:	e003      	b.n	8002a68 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a62:	fab3 f383 	clz	r3, r3
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	3301      	adds	r3, #1
 8002a6a:	f003 021f 	and.w	r2, r3, #31
 8002a6e:	4613      	mov	r3, r2
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	4413      	add	r3, r2
 8002a74:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a76:	430b      	orrs	r3, r1
 8002a78:	e081      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d107      	bne.n	8002a96 <HAL_ADC_ConfigChannel+0x5c6>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	0e9b      	lsrs	r3, r3, #26
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	069b      	lsls	r3, r3, #26
 8002a90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a94:	e015      	b.n	8002ac2 <HAL_ADC_ConfigChannel+0x5f2>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9e:	fa93 f3a3 	rbit	r3, r3
 8002aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002aae:	2320      	movs	r3, #32
 8002ab0:	e003      	b.n	8002aba <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab4:	fab3 f383 	clz	r3, r3
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	3301      	adds	r3, #1
 8002abc:	069b      	lsls	r3, r3, #26
 8002abe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d109      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x612>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	0e9b      	lsrs	r3, r3, #26
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	f003 031f 	and.w	r3, r3, #31
 8002ada:	2101      	movs	r1, #1
 8002adc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae0:	e017      	b.n	8002b12 <HAL_ADC_ConfigChannel+0x642>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	fa93 f3a3 	rbit	r3, r3
 8002aee:	61fb      	str	r3, [r7, #28]
  return result;
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002afa:	2320      	movs	r3, #32
 8002afc:	e003      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	fab3 f383 	clz	r3, r3
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	3301      	adds	r3, #1
 8002b08:	f003 031f 	and.w	r3, r3, #31
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b12:	ea42 0103 	orr.w	r1, r2, r3
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10d      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x66e>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	0e9b      	lsrs	r3, r3, #26
 8002b28:	3301      	adds	r3, #1
 8002b2a:	f003 021f 	and.w	r2, r3, #31
 8002b2e:	4613      	mov	r3, r2
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	4413      	add	r3, r2
 8002b34:	3b1e      	subs	r3, #30
 8002b36:	051b      	lsls	r3, r3, #20
 8002b38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b3c:	e01e      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x6ac>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	fa93 f3a3 	rbit	r3, r3
 8002b4a:	613b      	str	r3, [r7, #16]
  return result;
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d104      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002b56:	2320      	movs	r3, #32
 8002b58:	e006      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x698>
 8002b5a:	bf00      	nop
 8002b5c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	fab3 f383 	clz	r3, r3
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	3301      	adds	r3, #1
 8002b6a:	f003 021f 	and.w	r2, r3, #31
 8002b6e:	4613      	mov	r3, r2
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	4413      	add	r3, r2
 8002b74:	3b1e      	subs	r3, #30
 8002b76:	051b      	lsls	r3, r3, #20
 8002b78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b7c:	430b      	orrs	r3, r1
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	6892      	ldr	r2, [r2, #8]
 8002b82:	4619      	mov	r1, r3
 8002b84:	f7fe fe08 	bl	8001798 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	4b3f      	ldr	r3, [pc, #252]	; (8002c8c <HAL_ADC_ConfigChannel+0x7bc>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d071      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b94:	483e      	ldr	r0, [pc, #248]	; (8002c90 <HAL_ADC_ConfigChannel+0x7c0>)
 8002b96:	f7fe fd01 	bl	800159c <LL_ADC_GetCommonPathInternalCh>
 8002b9a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a3c      	ldr	r2, [pc, #240]	; (8002c94 <HAL_ADC_ConfigChannel+0x7c4>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d004      	beq.n	8002bb2 <HAL_ADC_ConfigChannel+0x6e2>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a3a      	ldr	r2, [pc, #232]	; (8002c98 <HAL_ADC_ConfigChannel+0x7c8>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d127      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002bb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d121      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bc6:	d157      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bcc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	482f      	ldr	r0, [pc, #188]	; (8002c90 <HAL_ADC_ConfigChannel+0x7c0>)
 8002bd4:	f7fe fccf 	bl	8001576 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bd8:	4b30      	ldr	r3, [pc, #192]	; (8002c9c <HAL_ADC_ConfigChannel+0x7cc>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	099b      	lsrs	r3, r3, #6
 8002bde:	4a30      	ldr	r2, [pc, #192]	; (8002ca0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002be0:	fba2 2303 	umull	r2, r3, r2, r3
 8002be4:	099b      	lsrs	r3, r3, #6
 8002be6:	1c5a      	adds	r2, r3, #1
 8002be8:	4613      	mov	r3, r2
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	4413      	add	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002bf2:	e002      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1f9      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c00:	e03a      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a27      	ldr	r2, [pc, #156]	; (8002ca4 <HAL_ADC_ConfigChannel+0x7d4>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d113      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x764>
 8002c0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10d      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a22      	ldr	r2, [pc, #136]	; (8002ca8 <HAL_ADC_ConfigChannel+0x7d8>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d02a      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4818      	ldr	r0, [pc, #96]	; (8002c90 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c2e:	f7fe fca2 	bl	8001576 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c32:	e021      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a1c      	ldr	r2, [pc, #112]	; (8002cac <HAL_ADC_ConfigChannel+0x7dc>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d11c      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d116      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a16      	ldr	r2, [pc, #88]	; (8002ca8 <HAL_ADC_ConfigChannel+0x7d8>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d011      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	480c      	ldr	r0, [pc, #48]	; (8002c90 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c60:	f7fe fc89 	bl	8001576 <LL_ADC_SetCommonPathInternalCh>
 8002c64:	e008      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6a:	f043 0220 	orr.w	r2, r3, #32
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002c80:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	37d8      	adds	r7, #216	; 0xd8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	80080000 	.word	0x80080000
 8002c90:	50000300 	.word	0x50000300
 8002c94:	c3210000 	.word	0xc3210000
 8002c98:	90c00010 	.word	0x90c00010
 8002c9c:	2000000c 	.word	0x2000000c
 8002ca0:	053e2d63 	.word	0x053e2d63
 8002ca4:	c7520000 	.word	0xc7520000
 8002ca8:	50000100 	.word	0x50000100
 8002cac:	cb840000 	.word	0xcb840000

08002cb0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fe fe96 	bl	80019f8 <LL_ADC_REG_IsConversionOngoing>
 8002ccc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7fe feb7 	bl	8001a46 <LL_ADC_INJ_IsConversionOngoing>
 8002cd8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d103      	bne.n	8002ce8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 8098 	beq.w	8002e18 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d02a      	beq.n	8002d4c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	7f5b      	ldrb	r3, [r3, #29]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d126      	bne.n	8002d4c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	7f1b      	ldrb	r3, [r3, #28]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d122      	bne.n	8002d4c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002d06:	2301      	movs	r3, #1
 8002d08:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002d0a:	e014      	b.n	8002d36 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	4a45      	ldr	r2, [pc, #276]	; (8002e24 <ADC_ConversionStop+0x174>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d90d      	bls.n	8002d30 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d18:	f043 0210 	orr.w	r2, r3, #16
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d24:	f043 0201 	orr.w	r2, r3, #1
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e074      	b.n	8002e1a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	3301      	adds	r3, #1
 8002d34:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d40:	2b40      	cmp	r3, #64	; 0x40
 8002d42:	d1e3      	bne.n	8002d0c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2240      	movs	r2, #64	; 0x40
 8002d4a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d014      	beq.n	8002d7c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fe fe4e 	bl	80019f8 <LL_ADC_REG_IsConversionOngoing>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00c      	beq.n	8002d7c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fe fe0b 	bl	8001982 <LL_ADC_IsDisableOngoing>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d104      	bne.n	8002d7c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fe fe2a 	bl	80019d0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d014      	beq.n	8002dac <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fe fe5d 	bl	8001a46 <LL_ADC_INJ_IsConversionOngoing>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00c      	beq.n	8002dac <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fe fdf3 	bl	8001982 <LL_ADC_IsDisableOngoing>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d104      	bne.n	8002dac <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fe fe39 	bl	8001a1e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d005      	beq.n	8002dbe <ADC_ConversionStop+0x10e>
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	2b03      	cmp	r3, #3
 8002db6:	d105      	bne.n	8002dc4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002db8:	230c      	movs	r3, #12
 8002dba:	617b      	str	r3, [r7, #20]
        break;
 8002dbc:	e005      	b.n	8002dca <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002dbe:	2308      	movs	r3, #8
 8002dc0:	617b      	str	r3, [r7, #20]
        break;
 8002dc2:	e002      	b.n	8002dca <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002dc4:	2304      	movs	r3, #4
 8002dc6:	617b      	str	r3, [r7, #20]
        break;
 8002dc8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002dca:	f7fe fb93 	bl	80014f4 <HAL_GetTick>
 8002dce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002dd0:	e01b      	b.n	8002e0a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002dd2:	f7fe fb8f 	bl	80014f4 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b05      	cmp	r3, #5
 8002dde:	d914      	bls.n	8002e0a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	4013      	ands	r3, r2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00d      	beq.n	8002e0a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df2:	f043 0210 	orr.w	r2, r3, #16
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dfe:	f043 0201 	orr.w	r2, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e007      	b.n	8002e1a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	4013      	ands	r3, r2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1dc      	bne.n	8002dd2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3720      	adds	r7, #32
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	a33fffff 	.word	0xa33fffff

08002e28 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7fe fd91 	bl	800195c <LL_ADC_IsEnabled>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d14d      	bne.n	8002edc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	4b28      	ldr	r3, [pc, #160]	; (8002ee8 <ADC_Enable+0xc0>)
 8002e48:	4013      	ands	r3, r2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00d      	beq.n	8002e6a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e52:	f043 0210 	orr.w	r2, r3, #16
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e5e:	f043 0201 	orr.w	r2, r3, #1
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e039      	b.n	8002ede <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fe fd4c 	bl	800190c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e74:	f7fe fb3e 	bl	80014f4 <HAL_GetTick>
 8002e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e7a:	e028      	b.n	8002ece <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fe fd6b 	bl	800195c <LL_ADC_IsEnabled>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d104      	bne.n	8002e96 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7fe fd3b 	bl	800190c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e96:	f7fe fb2d 	bl	80014f4 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d914      	bls.n	8002ece <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d00d      	beq.n	8002ece <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb6:	f043 0210 	orr.w	r2, r3, #16
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec2:	f043 0201 	orr.w	r2, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e007      	b.n	8002ede <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d1cf      	bne.n	8002e7c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	8000003f 	.word	0x8000003f

08002eec <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7fe fd42 	bl	8001982 <LL_ADC_IsDisableOngoing>
 8002efe:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7fe fd29 	bl	800195c <LL_ADC_IsEnabled>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d047      	beq.n	8002fa0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d144      	bne.n	8002fa0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 030d 	and.w	r3, r3, #13
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d10c      	bne.n	8002f3e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fe fd03 	bl	8001934 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2203      	movs	r2, #3
 8002f34:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f36:	f7fe fadd 	bl	80014f4 <HAL_GetTick>
 8002f3a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f3c:	e029      	b.n	8002f92 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f42:	f043 0210 	orr.w	r2, r3, #16
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f4e:	f043 0201 	orr.w	r2, r3, #1
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e023      	b.n	8002fa2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f5a:	f7fe facb 	bl	80014f4 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d914      	bls.n	8002f92 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00d      	beq.n	8002f92 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7a:	f043 0210 	orr.w	r2, r3, #16
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f86:	f043 0201 	orr.w	r2, r3, #1
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e007      	b.n	8002fa2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1dc      	bne.n	8002f5a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b083      	sub	sp, #12
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
	...

08003010 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003018:	4b05      	ldr	r3, [pc, #20]	; (8003030 <LL_EXTI_EnableIT_0_31+0x20>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	4904      	ldr	r1, [pc, #16]	; (8003030 <LL_EXTI_EnableIT_0_31+0x20>)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4313      	orrs	r3, r2
 8003022:	600b      	str	r3, [r1, #0]
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	40010400 	.word	0x40010400

08003034 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800303c:	4b06      	ldr	r3, [pc, #24]	; (8003058 <LL_EXTI_DisableIT_0_31+0x24>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	43db      	mvns	r3, r3
 8003044:	4904      	ldr	r1, [pc, #16]	; (8003058 <LL_EXTI_DisableIT_0_31+0x24>)
 8003046:	4013      	ands	r3, r2
 8003048:	600b      	str	r3, [r1, #0]
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40010400 	.word	0x40010400

0800305c <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003064:	4b05      	ldr	r3, [pc, #20]	; (800307c <LL_EXTI_EnableEvent_0_31+0x20>)
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	4904      	ldr	r1, [pc, #16]	; (800307c <LL_EXTI_EnableEvent_0_31+0x20>)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4313      	orrs	r3, r2
 800306e:	604b      	str	r3, [r1, #4]

}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	40010400 	.word	0x40010400

08003080 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003088:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <LL_EXTI_DisableEvent_0_31+0x24>)
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	43db      	mvns	r3, r3
 8003090:	4904      	ldr	r1, [pc, #16]	; (80030a4 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003092:	4013      	ands	r3, r2
 8003094:	604b      	str	r3, [r1, #4]
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	40010400 	.word	0x40010400

080030a8 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80030b0:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	4904      	ldr	r1, [pc, #16]	; (80030c8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	608b      	str	r3, [r1, #8]

}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	40010400 	.word	0x40010400

080030cc <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80030d4:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	43db      	mvns	r3, r3
 80030dc:	4904      	ldr	r1, [pc, #16]	; (80030f0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80030de:	4013      	ands	r3, r2
 80030e0:	608b      	str	r3, [r1, #8]

}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	40010400 	.word	0x40010400

080030f4 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80030fc:	4b05      	ldr	r3, [pc, #20]	; (8003114 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80030fe:	68da      	ldr	r2, [r3, #12]
 8003100:	4904      	ldr	r1, [pc, #16]	; (8003114 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4313      	orrs	r3, r2
 8003106:	60cb      	str	r3, [r1, #12]
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	40010400 	.word	0x40010400

08003118 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003120:	4b06      	ldr	r3, [pc, #24]	; (800313c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	43db      	mvns	r3, r3
 8003128:	4904      	ldr	r1, [pc, #16]	; (800313c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800312a:	4013      	ands	r3, r2
 800312c:	60cb      	str	r3, [r1, #12]
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	40010400 	.word	0x40010400

08003140 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003148:	4a04      	ldr	r2, [pc, #16]	; (800315c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6153      	str	r3, [r2, #20]
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40010400 	.word	0x40010400

08003160 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b088      	sub	sp, #32
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8003168:	2300      	movs	r3, #0
 800316a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800316c:	2300      	movs	r3, #0
 800316e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d102      	bne.n	800317c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	77fb      	strb	r3, [r7, #31]
 800317a:	e0bb      	b.n	80032f4 <HAL_COMP_Init+0x194>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003186:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800318a:	d102      	bne.n	8003192 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	77fb      	strb	r3, [r7, #31]
 8003190:	e0b0      	b.n	80032f4 <HAL_COMP_Init+0x194>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	7f5b      	ldrb	r3, [r3, #29]
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b00      	cmp	r3, #0
 800319a:	d108      	bne.n	80031ae <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7fd ff1d 	bl	8000fe8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031b8:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 80031d4:	4313      	orrs	r3, r2
 80031d6:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	4b48      	ldr	r3, [pc, #288]	; (8003300 <HAL_COMP_Init+0x1a0>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6812      	ldr	r2, [r2, #0]
 80031e6:	6979      	ldr	r1, [r7, #20]
 80031e8:	430b      	orrs	r3, r1
 80031ea:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d015      	beq.n	8003226 <HAL_COMP_Init+0xc6>
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d112      	bne.n	8003226 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003200:	4b40      	ldr	r3, [pc, #256]	; (8003304 <HAL_COMP_Init+0x1a4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	099b      	lsrs	r3, r3, #6
 8003206:	4a40      	ldr	r2, [pc, #256]	; (8003308 <HAL_COMP_Init+0x1a8>)
 8003208:	fba2 2303 	umull	r2, r3, r2, r3
 800320c:	099a      	lsrs	r2, r3, #6
 800320e:	4613      	mov	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003218:	e002      	b.n	8003220 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	3b01      	subs	r3, #1
 800321e:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f9      	bne.n	800321a <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a38      	ldr	r2, [pc, #224]	; (800330c <HAL_COMP_Init+0x1ac>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d012      	beq.n	8003256 <HAL_COMP_Init+0xf6>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a36      	ldr	r2, [pc, #216]	; (8003310 <HAL_COMP_Init+0x1b0>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d00a      	beq.n	8003250 <HAL_COMP_Init+0xf0>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a35      	ldr	r2, [pc, #212]	; (8003314 <HAL_COMP_Init+0x1b4>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d102      	bne.n	800324a <HAL_COMP_Init+0xea>
 8003244:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003248:	e007      	b.n	800325a <HAL_COMP_Init+0xfa>
 800324a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800324e:	e004      	b.n	800325a <HAL_COMP_Init+0xfa>
 8003250:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003254:	e001      	b.n	800325a <HAL_COMP_Init+0xfa>
 8003256:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800325a:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d037      	beq.n	80032d8 <HAL_COMP_Init+0x178>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <HAL_COMP_Init+0x11c>
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8003274:	6938      	ldr	r0, [r7, #16]
 8003276:	f7ff ff17 	bl	80030a8 <LL_EXTI_EnableRisingTrig_0_31>
 800327a:	e002      	b.n	8003282 <HAL_COMP_Init+0x122>
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800327c:	6938      	ldr	r0, [r7, #16]
 800327e:	f7ff ff25 	bl	80030cc <LL_EXTI_DisableRisingTrig_0_31>
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	f003 0320 	and.w	r3, r3, #32
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_COMP_Init+0x136>
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800328e:	6938      	ldr	r0, [r7, #16]
 8003290:	f7ff ff30 	bl	80030f4 <LL_EXTI_EnableFallingTrig_0_31>
 8003294:	e002      	b.n	800329c <HAL_COMP_Init+0x13c>
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8003296:	6938      	ldr	r0, [r7, #16]
 8003298:	f7ff ff3e 	bl	8003118 <LL_EXTI_DisableFallingTrig_0_31>
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
      }
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
 800329c:	6938      	ldr	r0, [r7, #16]
 800329e:	f7ff ff4f 	bl	8003140 <LL_EXTI_ClearFlag_0_31>
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_COMP_Init+0x156>
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_EnableEvent_0_31(exti_line);
 80032ae:	6938      	ldr	r0, [r7, #16]
 80032b0:	f7ff fed4 	bl	800305c <LL_EXTI_EnableEvent_0_31>
 80032b4:	e002      	b.n	80032bc <HAL_COMP_Init+0x15c>
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_DisableEvent_0_31(exti_line);
 80032b6:	6938      	ldr	r0, [r7, #16]
 80032b8:	f7ff fee2 	bl	8003080 <LL_EXTI_DisableEvent_0_31>
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <HAL_COMP_Init+0x170>
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
        }
#else
        LL_EXTI_EnableIT_0_31(exti_line);
 80032c8:	6938      	ldr	r0, [r7, #16]
 80032ca:	f7ff fea1 	bl	8003010 <LL_EXTI_EnableIT_0_31>
 80032ce:	e009      	b.n	80032e4 <HAL_COMP_Init+0x184>
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
        }
#else
        LL_EXTI_DisableIT_0_31(exti_line);
 80032d0:	6938      	ldr	r0, [r7, #16]
 80032d2:	f7ff feaf 	bl	8003034 <LL_EXTI_DisableIT_0_31>
 80032d6:	e005      	b.n	80032e4 <HAL_COMP_Init+0x184>
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
      }
#else
      LL_EXTI_DisableEvent_0_31(exti_line);
 80032d8:	6938      	ldr	r0, [r7, #16]
 80032da:	f7ff fed1 	bl	8003080 <LL_EXTI_DisableEvent_0_31>
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
      }
#else
      LL_EXTI_DisableIT_0_31(exti_line);
 80032de:	6938      	ldr	r0, [r7, #16]
 80032e0:	f7ff fea8 	bl	8003034 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	7f5b      	ldrb	r3, [r3, #29]
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d102      	bne.n	80032f4 <HAL_COMP_Init+0x194>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 80032f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3720      	adds	r7, #32
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	ff007e0f 	.word	0xff007e0f
 8003304:	2000000c 	.word	0x2000000c
 8003308:	053e2d63 	.word	0x053e2d63
 800330c:	40010200 	.word	0x40010200
 8003310:	40010204 	.word	0x40010204
 8003314:	40010208 	.word	0x40010208

08003318 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8003320:	2300      	movs	r3, #0
 8003322:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003324:	2300      	movs	r3, #0
 8003326:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d102      	bne.n	8003334 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	73fb      	strb	r3, [r7, #15]
 8003332:	e02e      	b.n	8003392 <HAL_COMP_Start+0x7a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800333e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003342:	d102      	bne.n	800334a <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	73fb      	strb	r3, [r7, #15]
 8003348:	e023      	b.n	8003392 <HAL_COMP_Start+0x7a>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	7f5b      	ldrb	r3, [r3, #29]
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b01      	cmp	r3, #1
 8003352:	d11c      	bne.n	800338e <HAL_COMP_Start+0x76>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0201 	orr.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	775a      	strb	r2, [r3, #29]
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */
      /* Note: In case of system low frequency (below 1Mhz), short delay      */
      /*       of startup time (few us) is within CPU processing cycles       */
      /*       of following instructions.                                     */
      wait_loop_index = (COMP_DELAY_STARTUP_US * (SystemCoreClock / (1000000UL * 2UL)));
 800336a:	4b0d      	ldr	r3, [pc, #52]	; (80033a0 <HAL_COMP_Start+0x88>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a0d      	ldr	r2, [pc, #52]	; (80033a4 <HAL_COMP_Start+0x8c>)
 8003370:	fba2 2303 	umull	r2, r3, r2, r3
 8003374:	0cda      	lsrs	r2, r3, #19
 8003376:	4613      	mov	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800337e:	e002      	b.n	8003386 <HAL_COMP_Start+0x6e>
      {
        wait_loop_index--;
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	3b01      	subs	r3, #1
 8003384:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1f9      	bne.n	8003380 <HAL_COMP_Start+0x68>
 800338c:	e001      	b.n	8003392 <HAL_COMP_Start+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003392:	7bfb      	ldrb	r3, [r7, #15]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3714      	adds	r7, #20
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	2000000c 	.word	0x2000000c
 80033a4:	431bde83 	.word	0x431bde83

080033a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033b8:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <__NVIC_SetPriorityGrouping+0x44>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033c4:	4013      	ands	r3, r2
 80033c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033da:	4a04      	ldr	r2, [pc, #16]	; (80033ec <__NVIC_SetPriorityGrouping+0x44>)
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	60d3      	str	r3, [r2, #12]
}
 80033e0:	bf00      	nop
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	e000ed00 	.word	0xe000ed00

080033f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033f4:	4b04      	ldr	r3, [pc, #16]	; (8003408 <__NVIC_GetPriorityGrouping+0x18>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	0a1b      	lsrs	r3, r3, #8
 80033fa:	f003 0307 	and.w	r3, r3, #7
}
 80033fe:	4618      	mov	r0, r3
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	e000ed00 	.word	0xe000ed00

0800340c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	4603      	mov	r3, r0
 8003414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341a:	2b00      	cmp	r3, #0
 800341c:	db0b      	blt.n	8003436 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800341e:	79fb      	ldrb	r3, [r7, #7]
 8003420:	f003 021f 	and.w	r2, r3, #31
 8003424:	4907      	ldr	r1, [pc, #28]	; (8003444 <__NVIC_EnableIRQ+0x38>)
 8003426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342a:	095b      	lsrs	r3, r3, #5
 800342c:	2001      	movs	r0, #1
 800342e:	fa00 f202 	lsl.w	r2, r0, r2
 8003432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	e000e100 	.word	0xe000e100

08003448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	6039      	str	r1, [r7, #0]
 8003452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003458:	2b00      	cmp	r3, #0
 800345a:	db0a      	blt.n	8003472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	b2da      	uxtb	r2, r3
 8003460:	490c      	ldr	r1, [pc, #48]	; (8003494 <__NVIC_SetPriority+0x4c>)
 8003462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003466:	0112      	lsls	r2, r2, #4
 8003468:	b2d2      	uxtb	r2, r2
 800346a:	440b      	add	r3, r1
 800346c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003470:	e00a      	b.n	8003488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	b2da      	uxtb	r2, r3
 8003476:	4908      	ldr	r1, [pc, #32]	; (8003498 <__NVIC_SetPriority+0x50>)
 8003478:	79fb      	ldrb	r3, [r7, #7]
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	3b04      	subs	r3, #4
 8003480:	0112      	lsls	r2, r2, #4
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	440b      	add	r3, r1
 8003486:	761a      	strb	r2, [r3, #24]
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	e000e100 	.word	0xe000e100
 8003498:	e000ed00 	.word	0xe000ed00

0800349c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800349c:	b480      	push	{r7}
 800349e:	b089      	sub	sp, #36	; 0x24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	f1c3 0307 	rsb	r3, r3, #7
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	bf28      	it	cs
 80034ba:	2304      	movcs	r3, #4
 80034bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	3304      	adds	r3, #4
 80034c2:	2b06      	cmp	r3, #6
 80034c4:	d902      	bls.n	80034cc <NVIC_EncodePriority+0x30>
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	3b03      	subs	r3, #3
 80034ca:	e000      	b.n	80034ce <NVIC_EncodePriority+0x32>
 80034cc:	2300      	movs	r3, #0
 80034ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d0:	f04f 32ff 	mov.w	r2, #4294967295
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43da      	mvns	r2, r3
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	401a      	ands	r2, r3
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034e4:	f04f 31ff 	mov.w	r1, #4294967295
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	fa01 f303 	lsl.w	r3, r1, r3
 80034ee:	43d9      	mvns	r1, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f4:	4313      	orrs	r3, r2
         );
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3724      	adds	r7, #36	; 0x24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
	...

08003504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3b01      	subs	r3, #1
 8003510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003514:	d301      	bcc.n	800351a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003516:	2301      	movs	r3, #1
 8003518:	e00f      	b.n	800353a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800351a:	4a0a      	ldr	r2, [pc, #40]	; (8003544 <SysTick_Config+0x40>)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3b01      	subs	r3, #1
 8003520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003522:	210f      	movs	r1, #15
 8003524:	f04f 30ff 	mov.w	r0, #4294967295
 8003528:	f7ff ff8e 	bl	8003448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800352c:	4b05      	ldr	r3, [pc, #20]	; (8003544 <SysTick_Config+0x40>)
 800352e:	2200      	movs	r2, #0
 8003530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003532:	4b04      	ldr	r3, [pc, #16]	; (8003544 <SysTick_Config+0x40>)
 8003534:	2207      	movs	r2, #7
 8003536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	e000e010 	.word	0xe000e010

08003548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7ff ff29 	bl	80033a8 <__NVIC_SetPriorityGrouping>
}
 8003556:	bf00      	nop
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b086      	sub	sp, #24
 8003562:	af00      	add	r7, sp, #0
 8003564:	4603      	mov	r3, r0
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	607a      	str	r2, [r7, #4]
 800356a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800356c:	f7ff ff40 	bl	80033f0 <__NVIC_GetPriorityGrouping>
 8003570:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	68b9      	ldr	r1, [r7, #8]
 8003576:	6978      	ldr	r0, [r7, #20]
 8003578:	f7ff ff90 	bl	800349c <NVIC_EncodePriority>
 800357c:	4602      	mov	r2, r0
 800357e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003582:	4611      	mov	r1, r2
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff ff5f 	bl	8003448 <__NVIC_SetPriority>
}
 800358a:	bf00      	nop
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b082      	sub	sp, #8
 8003596:	af00      	add	r7, sp, #0
 8003598:	4603      	mov	r3, r0
 800359a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800359c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff ff33 	bl	800340c <__NVIC_EnableIRQ>
}
 80035a6:	bf00      	nop
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b082      	sub	sp, #8
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7ff ffa4 	bl	8003504 <SysTick_Config>
 80035bc:	4603      	mov	r3, r0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b082      	sub	sp, #8
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e014      	b.n	8003602 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	791b      	ldrb	r3, [r3, #4]
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d105      	bne.n	80035ee <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7fd fd2f 	bl	800104c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2202      	movs	r2, #2
 80035f2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b082      	sub	sp, #8
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
 8003612:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	795b      	ldrb	r3, [r3, #5]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d101      	bne.n	8003620 <HAL_DAC_Start+0x16>
 800361c:	2302      	movs	r3, #2
 800361e:	e043      	b.n	80036a8 <HAL_DAC_Start+0x9e>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2202      	movs	r2, #2
 800362a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6819      	ldr	r1, [r3, #0]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	f003 0310 	and.w	r3, r3, #16
 8003638:	2201      	movs	r2, #1
 800363a:	409a      	lsls	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8003644:	2001      	movs	r0, #1
 8003646:	f7fd ff61 	bl	800150c <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10f      	bne.n	8003670 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800365a:	2b02      	cmp	r3, #2
 800365c:	d11d      	bne.n	800369a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f042 0201 	orr.w	r2, r2, #1
 800366c:	605a      	str	r2, [r3, #4]
 800366e:	e014      	b.n	800369a <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	f003 0310 	and.w	r3, r3, #16
 8003680:	2102      	movs	r1, #2
 8003682:	fa01 f303 	lsl.w	r3, r1, r3
 8003686:	429a      	cmp	r2, r3
 8003688:	d107      	bne.n	800369a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f042 0202 	orr.w	r2, r2, #2
 8003698:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036c6:	d120      	bne.n	800370a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036d6:	d118      	bne.n	800370a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2204      	movs	r2, #4
 80036dc:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	f043 0201 	orr.w	r2, r3, #1
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003702:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f855 	bl	80037b4 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003714:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003718:	d120      	bne.n	800375c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003720:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003724:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003728:	d118      	bne.n	800375c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2204      	movs	r2, #4
 800372e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	f043 0202 	orr.w	r2, r3, #2
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003744:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003754:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f9de 	bl	8003b18 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800375c:	bf00      	nop
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003764:	b480      	push	{r7}
 8003766:	b087      	sub	sp, #28
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
 8003770:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003772:	2300      	movs	r3, #0
 8003774:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d105      	bne.n	8003794 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4413      	add	r3, r2
 800378e:	3308      	adds	r3, #8
 8003790:	617b      	str	r3, [r7, #20]
 8003792:	e004      	b.n	800379e <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4413      	add	r3, r2
 800379a:	3314      	adds	r3, #20
 800379c:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	461a      	mov	r2, r3
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	371c      	adds	r7, #28
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08a      	sub	sp, #40	; 0x28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	795b      	ldrb	r3, [r3, #5]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d101      	bne.n	80037e0 <HAL_DAC_ConfigChannel+0x18>
 80037dc:	2302      	movs	r3, #2
 80037de:	e192      	b.n	8003b06 <HAL_DAC_ConfigChannel+0x33e>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2201      	movs	r2, #1
 80037e4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2202      	movs	r2, #2
 80037ea:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d174      	bne.n	80038de <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80037f4:	f7fd fe7e 	bl	80014f4 <HAL_GetTick>
 80037f8:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d134      	bne.n	800386a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003800:	e011      	b.n	8003826 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003802:	f7fd fe77 	bl	80014f4 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b01      	cmp	r3, #1
 800380e:	d90a      	bls.n	8003826 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	f043 0208 	orr.w	r2, r3, #8
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2203      	movs	r2, #3
 8003820:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e16f      	b.n	8003b06 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800382c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1e6      	bne.n	8003802 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8003834:	2001      	movs	r0, #1
 8003836:	f7fd fe69 	bl	800150c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003842:	641a      	str	r2, [r3, #64]	; 0x40
 8003844:	e01e      	b.n	8003884 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003846:	f7fd fe55 	bl	80014f4 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b01      	cmp	r3, #1
 8003852:	d90a      	bls.n	800386a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	f043 0208 	orr.w	r2, r3, #8
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2203      	movs	r2, #3
 8003864:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e14d      	b.n	8003b06 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003870:	2b00      	cmp	r3, #0
 8003872:	dbe8      	blt.n	8003846 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8003874:	2001      	movs	r0, #1
 8003876:	f7fd fe49 	bl	800150c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003882:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f003 0310 	and.w	r3, r3, #16
 8003890:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003894:	fa01 f303 	lsl.w	r3, r1, r3
 8003898:	43db      	mvns	r3, r3
 800389a:	ea02 0103 	and.w	r1, r2, r3
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f003 0310 	and.w	r3, r3, #16
 80038a8:	409a      	lsls	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f003 0310 	and.w	r3, r3, #16
 80038be:	21ff      	movs	r1, #255	; 0xff
 80038c0:	fa01 f303 	lsl.w	r3, r1, r3
 80038c4:	43db      	mvns	r3, r3
 80038c6:	ea02 0103 	and.w	r1, r2, r3
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f003 0310 	and.w	r3, r3, #16
 80038d4:	409a      	lsls	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	430a      	orrs	r2, r1
 80038dc:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d11d      	bne.n	8003922 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ec:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f003 0310 	and.w	r3, r3, #16
 80038f4:	221f      	movs	r2, #31
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	43db      	mvns	r3, r3
 80038fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038fe:	4013      	ands	r3, r2
 8003900:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f003 0310 	and.w	r3, r3, #16
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003916:	4313      	orrs	r3, r2
 8003918:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003920:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003928:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f003 0310 	and.w	r3, r3, #16
 8003930:	2207      	movs	r2, #7
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	43db      	mvns	r3, r3
 8003938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800393a:	4013      	ands	r3, r2
 800393c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d102      	bne.n	800394c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8003946:	2300      	movs	r3, #0
 8003948:	623b      	str	r3, [r7, #32]
 800394a:	e00f      	b.n	800396c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	2b02      	cmp	r3, #2
 8003952:	d102      	bne.n	800395a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003954:	2301      	movs	r3, #1
 8003956:	623b      	str	r3, [r7, #32]
 8003958:	e008      	b.n	800396c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d102      	bne.n	8003968 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003962:	2301      	movs	r3, #1
 8003964:	623b      	str	r3, [r7, #32]
 8003966:	e001      	b.n	800396c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003968:	2300      	movs	r3, #0
 800396a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	689a      	ldr	r2, [r3, #8]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	4313      	orrs	r3, r2
 8003976:	6a3a      	ldr	r2, [r7, #32]
 8003978:	4313      	orrs	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f003 0310 	and.w	r3, r3, #16
 8003982:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	43db      	mvns	r3, r3
 800398c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800398e:	4013      	ands	r3, r2
 8003990:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	791b      	ldrb	r3, [r3, #4]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d102      	bne.n	80039a0 <HAL_DAC_ConfigChannel+0x1d8>
 800399a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800399e:	e000      	b.n	80039a2 <HAL_DAC_ConfigChannel+0x1da>
 80039a0:	2300      	movs	r3, #0
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f003 0310 	and.w	r3, r3, #16
 80039ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	43db      	mvns	r3, r3
 80039b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ba:	4013      	ands	r3, r2
 80039bc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	795b      	ldrb	r3, [r3, #5]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d102      	bne.n	80039cc <HAL_DAC_ConfigChannel+0x204>
 80039c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039ca:	e000      	b.n	80039ce <HAL_DAC_ConfigChannel+0x206>
 80039cc:	2300      	movs	r3, #0
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80039da:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d114      	bne.n	8003a0e <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80039e4:	f000 ffa6 	bl	8004934 <HAL_RCC_GetHCLKFreq>
 80039e8:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	4a48      	ldr	r2, [pc, #288]	; (8003b10 <HAL_DAC_ConfigChannel+0x348>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d904      	bls.n	80039fc <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
 80039fa:	e00f      	b.n	8003a1c <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	4a45      	ldr	r2, [pc, #276]	; (8003b14 <HAL_DAC_ConfigChannel+0x34c>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d90a      	bls.n	8003a1a <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a0c:	e006      	b.n	8003a1c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a14:	4313      	orrs	r3, r2
 8003a16:	627b      	str	r3, [r7, #36]	; 0x24
 8003a18:	e000      	b.n	8003a1c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003a1a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f003 0310 	and.w	r3, r3, #16
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6819      	ldr	r1, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f003 0310 	and.w	r3, r3, #16
 8003a42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	43da      	mvns	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	400a      	ands	r2, r1
 8003a52:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f003 0310 	and.w	r3, r3, #16
 8003a62:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a6e:	4013      	ands	r3, r2
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f003 0310 	and.w	r3, r3, #16
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a86:	4313      	orrs	r3, r2
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a90:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6819      	ldr	r1, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f003 0310 	and.w	r3, r3, #16
 8003a9e:	22c0      	movs	r2, #192	; 0xc0
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	43da      	mvns	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	400a      	ands	r2, r1
 8003aac:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	089b      	lsrs	r3, r3, #2
 8003ab4:	f003 030f 	and.w	r3, r3, #15
 8003ab8:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	089b      	lsrs	r3, r3, #2
 8003ac0:	021b      	lsls	r3, r3, #8
 8003ac2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f003 0310 	and.w	r3, r3, #16
 8003ad8:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003adc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	ea02 0103 	and.w	r1, r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f003 0310 	and.w	r3, r3, #16
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	409a      	lsls	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2201      	movs	r2, #1
 8003afc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3728      	adds	r7, #40	; 0x28
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	09896800 	.word	0x09896800
 8003b14:	04c4b400 	.word	0x04c4b400

08003b18 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b3a:	e15a      	b.n	8003df2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	2101      	movs	r1, #1
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	fa01 f303 	lsl.w	r3, r1, r3
 8003b48:	4013      	ands	r3, r2
 8003b4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 814c 	beq.w	8003dec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d00b      	beq.n	8003b74 <HAL_GPIO_Init+0x48>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d007      	beq.n	8003b74 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b68:	2b11      	cmp	r3, #17
 8003b6a:	d003      	beq.n	8003b74 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	2b12      	cmp	r3, #18
 8003b72:	d130      	bne.n	8003bd6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	2203      	movs	r2, #3
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	43db      	mvns	r3, r3
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	68da      	ldr	r2, [r3, #12]
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003baa:	2201      	movs	r2, #1
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb2:	43db      	mvns	r3, r3
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	091b      	lsrs	r3, r3, #4
 8003bc0:	f003 0201 	and.w	r2, r3, #1
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	2203      	movs	r2, #3
 8003be2:	fa02 f303 	lsl.w	r3, r2, r3
 8003be6:	43db      	mvns	r3, r3
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	4013      	ands	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	689a      	ldr	r2, [r3, #8]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d003      	beq.n	8003c16 <HAL_GPIO_Init+0xea>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b12      	cmp	r3, #18
 8003c14:	d123      	bne.n	8003c5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	08da      	lsrs	r2, r3, #3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3208      	adds	r2, #8
 8003c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	220f      	movs	r2, #15
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	43db      	mvns	r3, r3
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	4013      	ands	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	691a      	ldr	r2, [r3, #16]
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	08da      	lsrs	r2, r3, #3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3208      	adds	r2, #8
 8003c58:	6939      	ldr	r1, [r7, #16]
 8003c5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	2203      	movs	r2, #3
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4013      	ands	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f003 0203 	and.w	r2, r3, #3
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 80a6 	beq.w	8003dec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ca0:	4b5b      	ldr	r3, [pc, #364]	; (8003e10 <HAL_GPIO_Init+0x2e4>)
 8003ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ca4:	4a5a      	ldr	r2, [pc, #360]	; (8003e10 <HAL_GPIO_Init+0x2e4>)
 8003ca6:	f043 0301 	orr.w	r3, r3, #1
 8003caa:	6613      	str	r3, [r2, #96]	; 0x60
 8003cac:	4b58      	ldr	r3, [pc, #352]	; (8003e10 <HAL_GPIO_Init+0x2e4>)
 8003cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	60bb      	str	r3, [r7, #8]
 8003cb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cb8:	4a56      	ldr	r2, [pc, #344]	; (8003e14 <HAL_GPIO_Init+0x2e8>)
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	089b      	lsrs	r3, r3, #2
 8003cbe:	3302      	adds	r3, #2
 8003cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f003 0303 	and.w	r3, r3, #3
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	220f      	movs	r2, #15
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	43db      	mvns	r3, r3
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ce2:	d01f      	beq.n	8003d24 <HAL_GPIO_Init+0x1f8>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a4c      	ldr	r2, [pc, #304]	; (8003e18 <HAL_GPIO_Init+0x2ec>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d019      	beq.n	8003d20 <HAL_GPIO_Init+0x1f4>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a4b      	ldr	r2, [pc, #300]	; (8003e1c <HAL_GPIO_Init+0x2f0>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d013      	beq.n	8003d1c <HAL_GPIO_Init+0x1f0>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a4a      	ldr	r2, [pc, #296]	; (8003e20 <HAL_GPIO_Init+0x2f4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d00d      	beq.n	8003d18 <HAL_GPIO_Init+0x1ec>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a49      	ldr	r2, [pc, #292]	; (8003e24 <HAL_GPIO_Init+0x2f8>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d007      	beq.n	8003d14 <HAL_GPIO_Init+0x1e8>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a48      	ldr	r2, [pc, #288]	; (8003e28 <HAL_GPIO_Init+0x2fc>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d101      	bne.n	8003d10 <HAL_GPIO_Init+0x1e4>
 8003d0c:	2305      	movs	r3, #5
 8003d0e:	e00a      	b.n	8003d26 <HAL_GPIO_Init+0x1fa>
 8003d10:	2306      	movs	r3, #6
 8003d12:	e008      	b.n	8003d26 <HAL_GPIO_Init+0x1fa>
 8003d14:	2304      	movs	r3, #4
 8003d16:	e006      	b.n	8003d26 <HAL_GPIO_Init+0x1fa>
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e004      	b.n	8003d26 <HAL_GPIO_Init+0x1fa>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	e002      	b.n	8003d26 <HAL_GPIO_Init+0x1fa>
 8003d20:	2301      	movs	r3, #1
 8003d22:	e000      	b.n	8003d26 <HAL_GPIO_Init+0x1fa>
 8003d24:	2300      	movs	r3, #0
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	f002 0203 	and.w	r2, r2, #3
 8003d2c:	0092      	lsls	r2, r2, #2
 8003d2e:	4093      	lsls	r3, r2
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d36:	4937      	ldr	r1, [pc, #220]	; (8003e14 <HAL_GPIO_Init+0x2e8>)
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	089b      	lsrs	r3, r3, #2
 8003d3c:	3302      	adds	r3, #2
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003d44:	4b39      	ldr	r3, [pc, #228]	; (8003e2c <HAL_GPIO_Init+0x300>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	43db      	mvns	r3, r3
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	4013      	ands	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d68:	4a30      	ldr	r2, [pc, #192]	; (8003e2c <HAL_GPIO_Init+0x300>)
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003d6e:	4b2f      	ldr	r3, [pc, #188]	; (8003e2c <HAL_GPIO_Init+0x300>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	43db      	mvns	r3, r3
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d92:	4a26      	ldr	r2, [pc, #152]	; (8003e2c <HAL_GPIO_Init+0x300>)
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d98:	4b24      	ldr	r3, [pc, #144]	; (8003e2c <HAL_GPIO_Init+0x300>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	43db      	mvns	r3, r3
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4013      	ands	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003dbc:	4a1b      	ldr	r2, [pc, #108]	; (8003e2c <HAL_GPIO_Init+0x300>)
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003dc2:	4b1a      	ldr	r3, [pc, #104]	; (8003e2c <HAL_GPIO_Init+0x300>)
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003de6:	4a11      	ldr	r2, [pc, #68]	; (8003e2c <HAL_GPIO_Init+0x300>)
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	3301      	adds	r3, #1
 8003df0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	fa22 f303 	lsr.w	r3, r2, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f47f ae9d 	bne.w	8003b3c <HAL_GPIO_Init+0x10>
  }
}
 8003e02:	bf00      	nop
 8003e04:	bf00      	nop
 8003e06:	371c      	adds	r7, #28
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	40021000 	.word	0x40021000
 8003e14:	40010000 	.word	0x40010000
 8003e18:	48000400 	.word	0x48000400
 8003e1c:	48000800 	.word	0x48000800
 8003e20:	48000c00 	.word	0x48000c00
 8003e24:	48001000 	.word	0x48001000
 8003e28:	48001400 	.word	0x48001400
 8003e2c:	40010400 	.word	0x40010400

08003e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	807b      	strh	r3, [r7, #2]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e40:	787b      	ldrb	r3, [r7, #1]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e46:	887a      	ldrh	r2, [r7, #2]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e4c:	e002      	b.n	8003e54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e4e:	887a      	ldrh	r2, [r7, #2]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d141      	bne.n	8003ef2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e6e:	4b4b      	ldr	r3, [pc, #300]	; (8003f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e7a:	d131      	bne.n	8003ee0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e7c:	4b47      	ldr	r3, [pc, #284]	; (8003f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e82:	4a46      	ldr	r2, [pc, #280]	; (8003f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e8c:	4b43      	ldr	r3, [pc, #268]	; (8003f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e94:	4a41      	ldr	r2, [pc, #260]	; (8003f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e9c:	4b40      	ldr	r3, [pc, #256]	; (8003fa0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2232      	movs	r2, #50	; 0x32
 8003ea2:	fb02 f303 	mul.w	r3, r2, r3
 8003ea6:	4a3f      	ldr	r2, [pc, #252]	; (8003fa4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eac:	0c9b      	lsrs	r3, r3, #18
 8003eae:	3301      	adds	r3, #1
 8003eb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003eb2:	e002      	b.n	8003eba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003eba:	4b38      	ldr	r3, [pc, #224]	; (8003f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec6:	d102      	bne.n	8003ece <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1f2      	bne.n	8003eb4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ece:	4b33      	ldr	r3, [pc, #204]	; (8003f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eda:	d158      	bne.n	8003f8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e057      	b.n	8003f90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ee0:	4b2e      	ldr	r3, [pc, #184]	; (8003f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ee6:	4a2d      	ldr	r2, [pc, #180]	; (8003f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003ef0:	e04d      	b.n	8003f8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ef8:	d141      	bne.n	8003f7e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003efa:	4b28      	ldr	r3, [pc, #160]	; (8003f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f06:	d131      	bne.n	8003f6c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f08:	4b24      	ldr	r3, [pc, #144]	; (8003f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f0e:	4a23      	ldr	r2, [pc, #140]	; (8003f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f18:	4b20      	ldr	r3, [pc, #128]	; (8003f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f20:	4a1e      	ldr	r2, [pc, #120]	; (8003f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f28:	4b1d      	ldr	r3, [pc, #116]	; (8003fa0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2232      	movs	r2, #50	; 0x32
 8003f2e:	fb02 f303 	mul.w	r3, r2, r3
 8003f32:	4a1c      	ldr	r2, [pc, #112]	; (8003fa4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f34:	fba2 2303 	umull	r2, r3, r2, r3
 8003f38:	0c9b      	lsrs	r3, r3, #18
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f3e:	e002      	b.n	8003f46 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	3b01      	subs	r3, #1
 8003f44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f46:	4b15      	ldr	r3, [pc, #84]	; (8003f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f52:	d102      	bne.n	8003f5a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1f2      	bne.n	8003f40 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f5a:	4b10      	ldr	r3, [pc, #64]	; (8003f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f66:	d112      	bne.n	8003f8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e011      	b.n	8003f90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f72:	4a0a      	ldr	r2, [pc, #40]	; (8003f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f7c:	e007      	b.n	8003f8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f7e:	4b07      	ldr	r3, [pc, #28]	; (8003f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f86:	4a05      	ldr	r2, [pc, #20]	; (8003f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f8c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3714      	adds	r7, #20
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	40007000 	.word	0x40007000
 8003fa0:	2000000c 	.word	0x2000000c
 8003fa4:	431bde83 	.word	0x431bde83

08003fa8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003fac:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	4a04      	ldr	r2, [pc, #16]	; (8003fc4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003fb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fb6:	6093      	str	r3, [r2, #8]
}
 8003fb8:	bf00      	nop
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	40007000 	.word	0x40007000

08003fc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b088      	sub	sp, #32
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e308      	b.n	80045ec <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d075      	beq.n	80040d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fe6:	4ba3      	ldr	r3, [pc, #652]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 030c 	and.w	r3, r3, #12
 8003fee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ff0:	4ba0      	ldr	r3, [pc, #640]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f003 0303 	and.w	r3, r3, #3
 8003ff8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	2b0c      	cmp	r3, #12
 8003ffe:	d102      	bne.n	8004006 <HAL_RCC_OscConfig+0x3e>
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	2b03      	cmp	r3, #3
 8004004:	d002      	beq.n	800400c <HAL_RCC_OscConfig+0x44>
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	2b08      	cmp	r3, #8
 800400a:	d10b      	bne.n	8004024 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800400c:	4b99      	ldr	r3, [pc, #612]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d05b      	beq.n	80040d0 <HAL_RCC_OscConfig+0x108>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d157      	bne.n	80040d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e2e3      	b.n	80045ec <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800402c:	d106      	bne.n	800403c <HAL_RCC_OscConfig+0x74>
 800402e:	4b91      	ldr	r3, [pc, #580]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a90      	ldr	r2, [pc, #576]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 8004034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	e01d      	b.n	8004078 <HAL_RCC_OscConfig+0xb0>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004044:	d10c      	bne.n	8004060 <HAL_RCC_OscConfig+0x98>
 8004046:	4b8b      	ldr	r3, [pc, #556]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a8a      	ldr	r2, [pc, #552]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 800404c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	4b88      	ldr	r3, [pc, #544]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a87      	ldr	r2, [pc, #540]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 8004058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800405c:	6013      	str	r3, [r2, #0]
 800405e:	e00b      	b.n	8004078 <HAL_RCC_OscConfig+0xb0>
 8004060:	4b84      	ldr	r3, [pc, #528]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a83      	ldr	r2, [pc, #524]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 8004066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	4b81      	ldr	r3, [pc, #516]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a80      	ldr	r2, [pc, #512]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 8004072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004076:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d013      	beq.n	80040a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004080:	f7fd fa38 	bl	80014f4 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004088:	f7fd fa34 	bl	80014f4 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b64      	cmp	r3, #100	; 0x64
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e2a8      	b.n	80045ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800409a:	4b76      	ldr	r3, [pc, #472]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0f0      	beq.n	8004088 <HAL_RCC_OscConfig+0xc0>
 80040a6:	e014      	b.n	80040d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a8:	f7fd fa24 	bl	80014f4 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040b0:	f7fd fa20 	bl	80014f4 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b64      	cmp	r3, #100	; 0x64
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e294      	b.n	80045ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040c2:	4b6c      	ldr	r3, [pc, #432]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1f0      	bne.n	80040b0 <HAL_RCC_OscConfig+0xe8>
 80040ce:	e000      	b.n	80040d2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d075      	beq.n	80041ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040de:	4b65      	ldr	r3, [pc, #404]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 030c 	and.w	r3, r3, #12
 80040e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040e8:	4b62      	ldr	r3, [pc, #392]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f003 0303 	and.w	r3, r3, #3
 80040f0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	2b0c      	cmp	r3, #12
 80040f6:	d102      	bne.n	80040fe <HAL_RCC_OscConfig+0x136>
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d002      	beq.n	8004104 <HAL_RCC_OscConfig+0x13c>
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	2b04      	cmp	r3, #4
 8004102:	d11f      	bne.n	8004144 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004104:	4b5b      	ldr	r3, [pc, #364]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800410c:	2b00      	cmp	r3, #0
 800410e:	d005      	beq.n	800411c <HAL_RCC_OscConfig+0x154>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e267      	b.n	80045ec <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800411c:	4b55      	ldr	r3, [pc, #340]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	061b      	lsls	r3, r3, #24
 800412a:	4952      	ldr	r1, [pc, #328]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 800412c:	4313      	orrs	r3, r2
 800412e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004130:	4b51      	ldr	r3, [pc, #324]	; (8004278 <HAL_RCC_OscConfig+0x2b0>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4618      	mov	r0, r3
 8004136:	f7fd f991 	bl	800145c <HAL_InitTick>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d043      	beq.n	80041c8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e253      	b.n	80045ec <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d023      	beq.n	8004194 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800414c:	4b49      	ldr	r3, [pc, #292]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a48      	ldr	r2, [pc, #288]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 8004152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004158:	f7fd f9cc 	bl	80014f4 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004160:	f7fd f9c8 	bl	80014f4 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e23c      	b.n	80045ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004172:	4b40      	ldr	r3, [pc, #256]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0f0      	beq.n	8004160 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800417e:	4b3d      	ldr	r3, [pc, #244]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	061b      	lsls	r3, r3, #24
 800418c:	4939      	ldr	r1, [pc, #228]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 800418e:	4313      	orrs	r3, r2
 8004190:	604b      	str	r3, [r1, #4]
 8004192:	e01a      	b.n	80041ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004194:	4b37      	ldr	r3, [pc, #220]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a36      	ldr	r2, [pc, #216]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 800419a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800419e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a0:	f7fd f9a8 	bl	80014f4 <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041a6:	e008      	b.n	80041ba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041a8:	f7fd f9a4 	bl	80014f4 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e218      	b.n	80045ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041ba:	4b2e      	ldr	r3, [pc, #184]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1f0      	bne.n	80041a8 <HAL_RCC_OscConfig+0x1e0>
 80041c6:	e000      	b.n	80041ca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d03c      	beq.n	8004250 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d01c      	beq.n	8004218 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041de:	4b25      	ldr	r3, [pc, #148]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 80041e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041e4:	4a23      	ldr	r2, [pc, #140]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 80041e6:	f043 0301 	orr.w	r3, r3, #1
 80041ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ee:	f7fd f981 	bl	80014f4 <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041f4:	e008      	b.n	8004208 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041f6:	f7fd f97d 	bl	80014f4 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e1f1      	b.n	80045ec <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004208:	4b1a      	ldr	r3, [pc, #104]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 800420a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d0ef      	beq.n	80041f6 <HAL_RCC_OscConfig+0x22e>
 8004216:	e01b      	b.n	8004250 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004218:	4b16      	ldr	r3, [pc, #88]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 800421a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800421e:	4a15      	ldr	r2, [pc, #84]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 8004220:	f023 0301 	bic.w	r3, r3, #1
 8004224:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004228:	f7fd f964 	bl	80014f4 <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004230:	f7fd f960 	bl	80014f4 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e1d4      	b.n	80045ec <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004242:	4b0c      	ldr	r3, [pc, #48]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 8004244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1ef      	bne.n	8004230 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 80ab 	beq.w	80043b4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800425e:	2300      	movs	r3, #0
 8004260:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004262:	4b04      	ldr	r3, [pc, #16]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 8004264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d106      	bne.n	800427c <HAL_RCC_OscConfig+0x2b4>
 800426e:	2301      	movs	r3, #1
 8004270:	e005      	b.n	800427e <HAL_RCC_OscConfig+0x2b6>
 8004272:	bf00      	nop
 8004274:	40021000 	.word	0x40021000
 8004278:	20000010 	.word	0x20000010
 800427c:	2300      	movs	r3, #0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00d      	beq.n	800429e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004282:	4baf      	ldr	r3, [pc, #700]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 8004284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004286:	4aae      	ldr	r2, [pc, #696]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 8004288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800428c:	6593      	str	r3, [r2, #88]	; 0x58
 800428e:	4bac      	ldr	r3, [pc, #688]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 8004290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800429a:	2301      	movs	r3, #1
 800429c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800429e:	4ba9      	ldr	r3, [pc, #676]	; (8004544 <HAL_RCC_OscConfig+0x57c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d118      	bne.n	80042dc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042aa:	4ba6      	ldr	r3, [pc, #664]	; (8004544 <HAL_RCC_OscConfig+0x57c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4aa5      	ldr	r2, [pc, #660]	; (8004544 <HAL_RCC_OscConfig+0x57c>)
 80042b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042b6:	f7fd f91d 	bl	80014f4 <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042bc:	e008      	b.n	80042d0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042be:	f7fd f919 	bl	80014f4 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e18d      	b.n	80045ec <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042d0:	4b9c      	ldr	r3, [pc, #624]	; (8004544 <HAL_RCC_OscConfig+0x57c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0f0      	beq.n	80042be <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d108      	bne.n	80042f6 <HAL_RCC_OscConfig+0x32e>
 80042e4:	4b96      	ldr	r3, [pc, #600]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 80042e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ea:	4a95      	ldr	r2, [pc, #596]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 80042ec:	f043 0301 	orr.w	r3, r3, #1
 80042f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042f4:	e024      	b.n	8004340 <HAL_RCC_OscConfig+0x378>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	2b05      	cmp	r3, #5
 80042fc:	d110      	bne.n	8004320 <HAL_RCC_OscConfig+0x358>
 80042fe:	4b90      	ldr	r3, [pc, #576]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 8004300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004304:	4a8e      	ldr	r2, [pc, #568]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 8004306:	f043 0304 	orr.w	r3, r3, #4
 800430a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800430e:	4b8c      	ldr	r3, [pc, #560]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 8004310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004314:	4a8a      	ldr	r2, [pc, #552]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 8004316:	f043 0301 	orr.w	r3, r3, #1
 800431a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800431e:	e00f      	b.n	8004340 <HAL_RCC_OscConfig+0x378>
 8004320:	4b87      	ldr	r3, [pc, #540]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 8004322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004326:	4a86      	ldr	r2, [pc, #536]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 8004328:	f023 0301 	bic.w	r3, r3, #1
 800432c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004330:	4b83      	ldr	r3, [pc, #524]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 8004332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004336:	4a82      	ldr	r2, [pc, #520]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 8004338:	f023 0304 	bic.w	r3, r3, #4
 800433c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d016      	beq.n	8004376 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004348:	f7fd f8d4 	bl	80014f4 <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800434e:	e00a      	b.n	8004366 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004350:	f7fd f8d0 	bl	80014f4 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	f241 3288 	movw	r2, #5000	; 0x1388
 800435e:	4293      	cmp	r3, r2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e142      	b.n	80045ec <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004366:	4b76      	ldr	r3, [pc, #472]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 8004368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0ed      	beq.n	8004350 <HAL_RCC_OscConfig+0x388>
 8004374:	e015      	b.n	80043a2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004376:	f7fd f8bd 	bl	80014f4 <HAL_GetTick>
 800437a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800437c:	e00a      	b.n	8004394 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800437e:	f7fd f8b9 	bl	80014f4 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	f241 3288 	movw	r2, #5000	; 0x1388
 800438c:	4293      	cmp	r3, r2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e12b      	b.n	80045ec <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004394:	4b6a      	ldr	r3, [pc, #424]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 8004396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1ed      	bne.n	800437e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043a2:	7ffb      	ldrb	r3, [r7, #31]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d105      	bne.n	80043b4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043a8:	4b65      	ldr	r3, [pc, #404]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 80043aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ac:	4a64      	ldr	r2, [pc, #400]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 80043ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043b2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0320 	and.w	r3, r3, #32
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d03c      	beq.n	800443a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d01c      	beq.n	8004402 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80043c8:	4b5d      	ldr	r3, [pc, #372]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 80043ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043ce:	4a5c      	ldr	r2, [pc, #368]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 80043d0:	f043 0301 	orr.w	r3, r3, #1
 80043d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d8:	f7fd f88c 	bl	80014f4 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043e0:	f7fd f888 	bl	80014f4 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e0fc      	b.n	80045ec <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043f2:	4b53      	ldr	r3, [pc, #332]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 80043f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0ef      	beq.n	80043e0 <HAL_RCC_OscConfig+0x418>
 8004400:	e01b      	b.n	800443a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004402:	4b4f      	ldr	r3, [pc, #316]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 8004404:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004408:	4a4d      	ldr	r2, [pc, #308]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 800440a:	f023 0301 	bic.w	r3, r3, #1
 800440e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004412:	f7fd f86f 	bl	80014f4 <HAL_GetTick>
 8004416:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004418:	e008      	b.n	800442c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800441a:	f7fd f86b 	bl	80014f4 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d901      	bls.n	800442c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e0df      	b.n	80045ec <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800442c:	4b44      	ldr	r3, [pc, #272]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 800442e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1ef      	bne.n	800441a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 80d3 	beq.w	80045ea <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004444:	4b3e      	ldr	r3, [pc, #248]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 030c 	and.w	r3, r3, #12
 800444c:	2b0c      	cmp	r3, #12
 800444e:	f000 808d 	beq.w	800456c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	2b02      	cmp	r3, #2
 8004458:	d15a      	bne.n	8004510 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800445a:	4b39      	ldr	r3, [pc, #228]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a38      	ldr	r2, [pc, #224]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 8004460:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004464:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004466:	f7fd f845 	bl	80014f4 <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800446c:	e008      	b.n	8004480 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800446e:	f7fd f841 	bl	80014f4 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e0b5      	b.n	80045ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004480:	4b2f      	ldr	r3, [pc, #188]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1f0      	bne.n	800446e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800448c:	4b2c      	ldr	r3, [pc, #176]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	4b2d      	ldr	r3, [pc, #180]	; (8004548 <HAL_RCC_OscConfig+0x580>)
 8004492:	4013      	ands	r3, r2
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6a11      	ldr	r1, [r2, #32]
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800449c:	3a01      	subs	r2, #1
 800449e:	0112      	lsls	r2, r2, #4
 80044a0:	4311      	orrs	r1, r2
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80044a6:	0212      	lsls	r2, r2, #8
 80044a8:	4311      	orrs	r1, r2
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80044ae:	0852      	lsrs	r2, r2, #1
 80044b0:	3a01      	subs	r2, #1
 80044b2:	0552      	lsls	r2, r2, #21
 80044b4:	4311      	orrs	r1, r2
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044ba:	0852      	lsrs	r2, r2, #1
 80044bc:	3a01      	subs	r2, #1
 80044be:	0652      	lsls	r2, r2, #25
 80044c0:	4311      	orrs	r1, r2
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80044c6:	06d2      	lsls	r2, r2, #27
 80044c8:	430a      	orrs	r2, r1
 80044ca:	491d      	ldr	r1, [pc, #116]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044d0:	4b1b      	ldr	r3, [pc, #108]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a1a      	ldr	r2, [pc, #104]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 80044d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044da:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044dc:	4b18      	ldr	r3, [pc, #96]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	4a17      	ldr	r2, [pc, #92]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 80044e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e8:	f7fd f804 	bl	80014f4 <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f0:	f7fd f800 	bl	80014f4 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e074      	b.n	80045ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004502:	4b0f      	ldr	r3, [pc, #60]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0f0      	beq.n	80044f0 <HAL_RCC_OscConfig+0x528>
 800450e:	e06c      	b.n	80045ea <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004510:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a0a      	ldr	r2, [pc, #40]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 8004516:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800451a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800451c:	4b08      	ldr	r3, [pc, #32]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	4a07      	ldr	r2, [pc, #28]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 8004522:	f023 0303 	bic.w	r3, r3, #3
 8004526:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004528:	4b05      	ldr	r3, [pc, #20]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	4a04      	ldr	r2, [pc, #16]	; (8004540 <HAL_RCC_OscConfig+0x578>)
 800452e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004536:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004538:	f7fc ffdc 	bl	80014f4 <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800453e:	e00e      	b.n	800455e <HAL_RCC_OscConfig+0x596>
 8004540:	40021000 	.word	0x40021000
 8004544:	40007000 	.word	0x40007000
 8004548:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800454c:	f7fc ffd2 	bl	80014f4 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e046      	b.n	80045ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800455e:	4b25      	ldr	r3, [pc, #148]	; (80045f4 <HAL_RCC_OscConfig+0x62c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1f0      	bne.n	800454c <HAL_RCC_OscConfig+0x584>
 800456a:	e03e      	b.n	80045ea <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	69db      	ldr	r3, [r3, #28]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e039      	b.n	80045ec <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004578:	4b1e      	ldr	r3, [pc, #120]	; (80045f4 <HAL_RCC_OscConfig+0x62c>)
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f003 0203 	and.w	r2, r3, #3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	429a      	cmp	r2, r3
 800458a:	d12c      	bne.n	80045e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	3b01      	subs	r3, #1
 8004598:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800459a:	429a      	cmp	r2, r3
 800459c:	d123      	bne.n	80045e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d11b      	bne.n	80045e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d113      	bne.n	80045e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	085b      	lsrs	r3, r3, #1
 80045ca:	3b01      	subs	r3, #1
 80045cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d109      	bne.n	80045e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045dc:	085b      	lsrs	r3, r3, #1
 80045de:	3b01      	subs	r3, #1
 80045e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d001      	beq.n	80045ea <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e000      	b.n	80045ec <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3720      	adds	r7, #32
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40021000 	.word	0x40021000

080045f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004602:	2300      	movs	r3, #0
 8004604:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e11e      	b.n	800484e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004610:	4b91      	ldr	r3, [pc, #580]	; (8004858 <HAL_RCC_ClockConfig+0x260>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 030f 	and.w	r3, r3, #15
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	429a      	cmp	r2, r3
 800461c:	d910      	bls.n	8004640 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800461e:	4b8e      	ldr	r3, [pc, #568]	; (8004858 <HAL_RCC_ClockConfig+0x260>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f023 020f 	bic.w	r2, r3, #15
 8004626:	498c      	ldr	r1, [pc, #560]	; (8004858 <HAL_RCC_ClockConfig+0x260>)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	4313      	orrs	r3, r2
 800462c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800462e:	4b8a      	ldr	r3, [pc, #552]	; (8004858 <HAL_RCC_ClockConfig+0x260>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 030f 	and.w	r3, r3, #15
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	429a      	cmp	r2, r3
 800463a:	d001      	beq.n	8004640 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e106      	b.n	800484e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	d073      	beq.n	8004734 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	2b03      	cmp	r3, #3
 8004652:	d129      	bne.n	80046a8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004654:	4b81      	ldr	r3, [pc, #516]	; (800485c <HAL_RCC_ClockConfig+0x264>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e0f4      	b.n	800484e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004664:	f000 f972 	bl	800494c <RCC_GetSysClockFreqFromPLLSource>
 8004668:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	4a7c      	ldr	r2, [pc, #496]	; (8004860 <HAL_RCC_ClockConfig+0x268>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d93f      	bls.n	80046f2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004672:	4b7a      	ldr	r3, [pc, #488]	; (800485c <HAL_RCC_ClockConfig+0x264>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d009      	beq.n	8004692 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004686:	2b00      	cmp	r3, #0
 8004688:	d033      	beq.n	80046f2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800468e:	2b00      	cmp	r3, #0
 8004690:	d12f      	bne.n	80046f2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004692:	4b72      	ldr	r3, [pc, #456]	; (800485c <HAL_RCC_ClockConfig+0x264>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800469a:	4a70      	ldr	r2, [pc, #448]	; (800485c <HAL_RCC_ClockConfig+0x264>)
 800469c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80046a2:	2380      	movs	r3, #128	; 0x80
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	e024      	b.n	80046f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d107      	bne.n	80046c0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046b0:	4b6a      	ldr	r3, [pc, #424]	; (800485c <HAL_RCC_ClockConfig+0x264>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d109      	bne.n	80046d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e0c6      	b.n	800484e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046c0:	4b66      	ldr	r3, [pc, #408]	; (800485c <HAL_RCC_ClockConfig+0x264>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e0be      	b.n	800484e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80046d0:	f000 f8ce 	bl	8004870 <HAL_RCC_GetSysClockFreq>
 80046d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	4a61      	ldr	r2, [pc, #388]	; (8004860 <HAL_RCC_ClockConfig+0x268>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d909      	bls.n	80046f2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80046de:	4b5f      	ldr	r3, [pc, #380]	; (800485c <HAL_RCC_ClockConfig+0x264>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046e6:	4a5d      	ldr	r2, [pc, #372]	; (800485c <HAL_RCC_ClockConfig+0x264>)
 80046e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80046ee:	2380      	movs	r3, #128	; 0x80
 80046f0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046f2:	4b5a      	ldr	r3, [pc, #360]	; (800485c <HAL_RCC_ClockConfig+0x264>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f023 0203 	bic.w	r2, r3, #3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	4957      	ldr	r1, [pc, #348]	; (800485c <HAL_RCC_ClockConfig+0x264>)
 8004700:	4313      	orrs	r3, r2
 8004702:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004704:	f7fc fef6 	bl	80014f4 <HAL_GetTick>
 8004708:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800470a:	e00a      	b.n	8004722 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800470c:	f7fc fef2 	bl	80014f4 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	f241 3288 	movw	r2, #5000	; 0x1388
 800471a:	4293      	cmp	r3, r2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e095      	b.n	800484e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004722:	4b4e      	ldr	r3, [pc, #312]	; (800485c <HAL_RCC_ClockConfig+0x264>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f003 020c 	and.w	r2, r3, #12
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	429a      	cmp	r2, r3
 8004732:	d1eb      	bne.n	800470c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d023      	beq.n	8004788 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b00      	cmp	r3, #0
 800474a:	d005      	beq.n	8004758 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800474c:	4b43      	ldr	r3, [pc, #268]	; (800485c <HAL_RCC_ClockConfig+0x264>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	4a42      	ldr	r2, [pc, #264]	; (800485c <HAL_RCC_ClockConfig+0x264>)
 8004752:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004756:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0308 	and.w	r3, r3, #8
 8004760:	2b00      	cmp	r3, #0
 8004762:	d007      	beq.n	8004774 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004764:	4b3d      	ldr	r3, [pc, #244]	; (800485c <HAL_RCC_ClockConfig+0x264>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800476c:	4a3b      	ldr	r2, [pc, #236]	; (800485c <HAL_RCC_ClockConfig+0x264>)
 800476e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004772:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004774:	4b39      	ldr	r3, [pc, #228]	; (800485c <HAL_RCC_ClockConfig+0x264>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	4936      	ldr	r1, [pc, #216]	; (800485c <HAL_RCC_ClockConfig+0x264>)
 8004782:	4313      	orrs	r3, r2
 8004784:	608b      	str	r3, [r1, #8]
 8004786:	e008      	b.n	800479a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	2b80      	cmp	r3, #128	; 0x80
 800478c:	d105      	bne.n	800479a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800478e:	4b33      	ldr	r3, [pc, #204]	; (800485c <HAL_RCC_ClockConfig+0x264>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	4a32      	ldr	r2, [pc, #200]	; (800485c <HAL_RCC_ClockConfig+0x264>)
 8004794:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004798:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800479a:	4b2f      	ldr	r3, [pc, #188]	; (8004858 <HAL_RCC_ClockConfig+0x260>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 030f 	and.w	r3, r3, #15
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d21d      	bcs.n	80047e4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047a8:	4b2b      	ldr	r3, [pc, #172]	; (8004858 <HAL_RCC_ClockConfig+0x260>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f023 020f 	bic.w	r2, r3, #15
 80047b0:	4929      	ldr	r1, [pc, #164]	; (8004858 <HAL_RCC_ClockConfig+0x260>)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80047b8:	f7fc fe9c 	bl	80014f4 <HAL_GetTick>
 80047bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047be:	e00a      	b.n	80047d6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047c0:	f7fc fe98 	bl	80014f4 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e03b      	b.n	800484e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d6:	4b20      	ldr	r3, [pc, #128]	; (8004858 <HAL_RCC_ClockConfig+0x260>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d1ed      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d008      	beq.n	8004802 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047f0:	4b1a      	ldr	r3, [pc, #104]	; (800485c <HAL_RCC_ClockConfig+0x264>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	4917      	ldr	r1, [pc, #92]	; (800485c <HAL_RCC_ClockConfig+0x264>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	2b00      	cmp	r3, #0
 800480c:	d009      	beq.n	8004822 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800480e:	4b13      	ldr	r3, [pc, #76]	; (800485c <HAL_RCC_ClockConfig+0x264>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	00db      	lsls	r3, r3, #3
 800481c:	490f      	ldr	r1, [pc, #60]	; (800485c <HAL_RCC_ClockConfig+0x264>)
 800481e:	4313      	orrs	r3, r2
 8004820:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004822:	f000 f825 	bl	8004870 <HAL_RCC_GetSysClockFreq>
 8004826:	4602      	mov	r2, r0
 8004828:	4b0c      	ldr	r3, [pc, #48]	; (800485c <HAL_RCC_ClockConfig+0x264>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	091b      	lsrs	r3, r3, #4
 800482e:	f003 030f 	and.w	r3, r3, #15
 8004832:	490c      	ldr	r1, [pc, #48]	; (8004864 <HAL_RCC_ClockConfig+0x26c>)
 8004834:	5ccb      	ldrb	r3, [r1, r3]
 8004836:	f003 031f 	and.w	r3, r3, #31
 800483a:	fa22 f303 	lsr.w	r3, r2, r3
 800483e:	4a0a      	ldr	r2, [pc, #40]	; (8004868 <HAL_RCC_ClockConfig+0x270>)
 8004840:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004842:	4b0a      	ldr	r3, [pc, #40]	; (800486c <HAL_RCC_ClockConfig+0x274>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4618      	mov	r0, r3
 8004848:	f7fc fe08 	bl	800145c <HAL_InitTick>
 800484c:	4603      	mov	r3, r0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	40022000 	.word	0x40022000
 800485c:	40021000 	.word	0x40021000
 8004860:	04c4b400 	.word	0x04c4b400
 8004864:	08006e0c 	.word	0x08006e0c
 8004868:	2000000c 	.word	0x2000000c
 800486c:	20000010 	.word	0x20000010

08004870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004870:	b480      	push	{r7}
 8004872:	b087      	sub	sp, #28
 8004874:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004876:	4b2c      	ldr	r3, [pc, #176]	; (8004928 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 030c 	and.w	r3, r3, #12
 800487e:	2b04      	cmp	r3, #4
 8004880:	d102      	bne.n	8004888 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004882:	4b2a      	ldr	r3, [pc, #168]	; (800492c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004884:	613b      	str	r3, [r7, #16]
 8004886:	e047      	b.n	8004918 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004888:	4b27      	ldr	r3, [pc, #156]	; (8004928 <HAL_RCC_GetSysClockFreq+0xb8>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f003 030c 	and.w	r3, r3, #12
 8004890:	2b08      	cmp	r3, #8
 8004892:	d102      	bne.n	800489a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004894:	4b26      	ldr	r3, [pc, #152]	; (8004930 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004896:	613b      	str	r3, [r7, #16]
 8004898:	e03e      	b.n	8004918 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800489a:	4b23      	ldr	r3, [pc, #140]	; (8004928 <HAL_RCC_GetSysClockFreq+0xb8>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f003 030c 	and.w	r3, r3, #12
 80048a2:	2b0c      	cmp	r3, #12
 80048a4:	d136      	bne.n	8004914 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048a6:	4b20      	ldr	r3, [pc, #128]	; (8004928 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048b0:	4b1d      	ldr	r3, [pc, #116]	; (8004928 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	091b      	lsrs	r3, r3, #4
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	3301      	adds	r3, #1
 80048bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2b03      	cmp	r3, #3
 80048c2:	d10c      	bne.n	80048de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048c4:	4a1a      	ldr	r2, [pc, #104]	; (8004930 <HAL_RCC_GetSysClockFreq+0xc0>)
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048cc:	4a16      	ldr	r2, [pc, #88]	; (8004928 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048ce:	68d2      	ldr	r2, [r2, #12]
 80048d0:	0a12      	lsrs	r2, r2, #8
 80048d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048d6:	fb02 f303 	mul.w	r3, r2, r3
 80048da:	617b      	str	r3, [r7, #20]
      break;
 80048dc:	e00c      	b.n	80048f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048de:	4a13      	ldr	r2, [pc, #76]	; (800492c <HAL_RCC_GetSysClockFreq+0xbc>)
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e6:	4a10      	ldr	r2, [pc, #64]	; (8004928 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048e8:	68d2      	ldr	r2, [r2, #12]
 80048ea:	0a12      	lsrs	r2, r2, #8
 80048ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048f0:	fb02 f303 	mul.w	r3, r2, r3
 80048f4:	617b      	str	r3, [r7, #20]
      break;
 80048f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048f8:	4b0b      	ldr	r3, [pc, #44]	; (8004928 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	0e5b      	lsrs	r3, r3, #25
 80048fe:	f003 0303 	and.w	r3, r3, #3
 8004902:	3301      	adds	r3, #1
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004910:	613b      	str	r3, [r7, #16]
 8004912:	e001      	b.n	8004918 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004918:	693b      	ldr	r3, [r7, #16]
}
 800491a:	4618      	mov	r0, r3
 800491c:	371c      	adds	r7, #28
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	40021000 	.word	0x40021000
 800492c:	00f42400 	.word	0x00f42400
 8004930:	007a1200 	.word	0x007a1200

08004934 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004938:	4b03      	ldr	r3, [pc, #12]	; (8004948 <HAL_RCC_GetHCLKFreq+0x14>)
 800493a:	681b      	ldr	r3, [r3, #0]
}
 800493c:	4618      	mov	r0, r3
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	2000000c 	.word	0x2000000c

0800494c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800494c:	b480      	push	{r7}
 800494e:	b087      	sub	sp, #28
 8004950:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004952:	4b1e      	ldr	r3, [pc, #120]	; (80049cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800495c:	4b1b      	ldr	r3, [pc, #108]	; (80049cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	091b      	lsrs	r3, r3, #4
 8004962:	f003 030f 	and.w	r3, r3, #15
 8004966:	3301      	adds	r3, #1
 8004968:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	2b03      	cmp	r3, #3
 800496e:	d10c      	bne.n	800498a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004970:	4a17      	ldr	r2, [pc, #92]	; (80049d0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	fbb2 f3f3 	udiv	r3, r2, r3
 8004978:	4a14      	ldr	r2, [pc, #80]	; (80049cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800497a:	68d2      	ldr	r2, [r2, #12]
 800497c:	0a12      	lsrs	r2, r2, #8
 800497e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004982:	fb02 f303 	mul.w	r3, r2, r3
 8004986:	617b      	str	r3, [r7, #20]
    break;
 8004988:	e00c      	b.n	80049a4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800498a:	4a12      	ldr	r2, [pc, #72]	; (80049d4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004992:	4a0e      	ldr	r2, [pc, #56]	; (80049cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004994:	68d2      	ldr	r2, [r2, #12]
 8004996:	0a12      	lsrs	r2, r2, #8
 8004998:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800499c:	fb02 f303 	mul.w	r3, r2, r3
 80049a0:	617b      	str	r3, [r7, #20]
    break;
 80049a2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049a4:	4b09      	ldr	r3, [pc, #36]	; (80049cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	0e5b      	lsrs	r3, r3, #25
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	3301      	adds	r3, #1
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049bc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80049be:	687b      	ldr	r3, [r7, #4]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	371c      	adds	r7, #28
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	40021000 	.word	0x40021000
 80049d0:	007a1200 	.word	0x007a1200
 80049d4:	00f42400 	.word	0x00f42400

080049d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049e0:	2300      	movs	r3, #0
 80049e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049e4:	2300      	movs	r3, #0
 80049e6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 8098 	beq.w	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049f6:	2300      	movs	r3, #0
 80049f8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049fa:	4b43      	ldr	r3, [pc, #268]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10d      	bne.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a06:	4b40      	ldr	r3, [pc, #256]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a0a:	4a3f      	ldr	r2, [pc, #252]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a10:	6593      	str	r3, [r2, #88]	; 0x58
 8004a12:	4b3d      	ldr	r3, [pc, #244]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a1a:	60bb      	str	r3, [r7, #8]
 8004a1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a22:	4b3a      	ldr	r3, [pc, #232]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a39      	ldr	r2, [pc, #228]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a2e:	f7fc fd61 	bl	80014f4 <HAL_GetTick>
 8004a32:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a34:	e009      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a36:	f7fc fd5d 	bl	80014f4 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d902      	bls.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	74fb      	strb	r3, [r7, #19]
        break;
 8004a48:	e005      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a4a:	4b30      	ldr	r3, [pc, #192]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0ef      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004a56:	7cfb      	ldrb	r3, [r7, #19]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d159      	bne.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a5c:	4b2a      	ldr	r3, [pc, #168]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a66:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d01e      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d019      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a78:	4b23      	ldr	r3, [pc, #140]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a84:	4b20      	ldr	r3, [pc, #128]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a8a:	4a1f      	ldr	r2, [pc, #124]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a94:	4b1c      	ldr	r3, [pc, #112]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a9a:	4a1b      	ldr	r2, [pc, #108]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004aa4:	4a18      	ldr	r2, [pc, #96]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d016      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab6:	f7fc fd1d 	bl	80014f4 <HAL_GetTick>
 8004aba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004abc:	e00b      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004abe:	f7fc fd19 	bl	80014f4 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d902      	bls.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	74fb      	strb	r3, [r7, #19]
            break;
 8004ad4:	e006      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ad6:	4b0c      	ldr	r3, [pc, #48]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d0ec      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004ae4:	7cfb      	ldrb	r3, [r7, #19]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10b      	bne.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004aea:	4b07      	ldr	r3, [pc, #28]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af8:	4903      	ldr	r1, [pc, #12]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004b00:	e008      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b02:	7cfb      	ldrb	r3, [r7, #19]
 8004b04:	74bb      	strb	r3, [r7, #18]
 8004b06:	e005      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004b08:	40021000 	.word	0x40021000
 8004b0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b10:	7cfb      	ldrb	r3, [r7, #19]
 8004b12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b14:	7c7b      	ldrb	r3, [r7, #17]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d105      	bne.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b1a:	4ba6      	ldr	r3, [pc, #664]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1e:	4aa5      	ldr	r2, [pc, #660]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00a      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b32:	4ba0      	ldr	r3, [pc, #640]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b38:	f023 0203 	bic.w	r2, r3, #3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	499c      	ldr	r1, [pc, #624]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00a      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b54:	4b97      	ldr	r3, [pc, #604]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5a:	f023 020c 	bic.w	r2, r3, #12
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	4994      	ldr	r1, [pc, #592]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0304 	and.w	r3, r3, #4
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b76:	4b8f      	ldr	r3, [pc, #572]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	498b      	ldr	r1, [pc, #556]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0308 	and.w	r3, r3, #8
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00a      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b98:	4b86      	ldr	r3, [pc, #536]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	4983      	ldr	r1, [pc, #524]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0320 	and.w	r3, r3, #32
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bba:	4b7e      	ldr	r3, [pc, #504]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	497a      	ldr	r1, [pc, #488]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00a      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bdc:	4b75      	ldr	r3, [pc, #468]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	4972      	ldr	r1, [pc, #456]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00a      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bfe:	4b6d      	ldr	r3, [pc, #436]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	69db      	ldr	r3, [r3, #28]
 8004c0c:	4969      	ldr	r1, [pc, #420]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00a      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c20:	4b64      	ldr	r3, [pc, #400]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	4961      	ldr	r1, [pc, #388]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00a      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c42:	4b5c      	ldr	r3, [pc, #368]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	4958      	ldr	r1, [pc, #352]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d015      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c64:	4b53      	ldr	r3, [pc, #332]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c72:	4950      	ldr	r1, [pc, #320]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c82:	d105      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c84:	4b4b      	ldr	r3, [pc, #300]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	4a4a      	ldr	r2, [pc, #296]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c8e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d015      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c9c:	4b45      	ldr	r3, [pc, #276]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004caa:	4942      	ldr	r1, [pc, #264]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cba:	d105      	bne.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cbc:	4b3d      	ldr	r3, [pc, #244]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	4a3c      	ldr	r2, [pc, #240]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cc6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d015      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004cd4:	4b37      	ldr	r3, [pc, #220]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cda:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce2:	4934      	ldr	r1, [pc, #208]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cf2:	d105      	bne.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cf4:	4b2f      	ldr	r3, [pc, #188]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	4a2e      	ldr	r2, [pc, #184]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cfe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d015      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d0c:	4b29      	ldr	r3, [pc, #164]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1a:	4926      	ldr	r1, [pc, #152]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d2a:	d105      	bne.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d2c:	4b21      	ldr	r3, [pc, #132]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	4a20      	ldr	r2, [pc, #128]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d36:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d015      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d44:	4b1b      	ldr	r3, [pc, #108]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d52:	4918      	ldr	r1, [pc, #96]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d62:	d105      	bne.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d64:	4b13      	ldr	r3, [pc, #76]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	4a12      	ldr	r2, [pc, #72]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d6e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d015      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004d7c:	4b0d      	ldr	r3, [pc, #52]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d82:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8a:	490a      	ldr	r1, [pc, #40]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d9a:	d105      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d9c:	4b05      	ldr	r3, [pc, #20]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	4a04      	ldr	r2, [pc, #16]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004da6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004da8:	7cbb      	ldrb	r3, [r7, #18]
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3718      	adds	r7, #24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	40021000 	.word	0x40021000

08004db8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e049      	b.n	8004e5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d106      	bne.n	8004de4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7fc f996 	bl	8001110 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	3304      	adds	r3, #4
 8004df4:	4619      	mov	r1, r3
 8004df6:	4610      	mov	r0, r2
 8004df8:	f001 f874 	bl	8005ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
	...

08004e68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d001      	beq.n	8004e80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e042      	b.n	8004f06 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2202      	movs	r2, #2
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a21      	ldr	r2, [pc, #132]	; (8004f14 <HAL_TIM_Base_Start+0xac>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d018      	beq.n	8004ec4 <HAL_TIM_Base_Start+0x5c>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e9a:	d013      	beq.n	8004ec4 <HAL_TIM_Base_Start+0x5c>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a1d      	ldr	r2, [pc, #116]	; (8004f18 <HAL_TIM_Base_Start+0xb0>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d00e      	beq.n	8004ec4 <HAL_TIM_Base_Start+0x5c>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a1c      	ldr	r2, [pc, #112]	; (8004f1c <HAL_TIM_Base_Start+0xb4>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d009      	beq.n	8004ec4 <HAL_TIM_Base_Start+0x5c>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a1a      	ldr	r2, [pc, #104]	; (8004f20 <HAL_TIM_Base_Start+0xb8>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d004      	beq.n	8004ec4 <HAL_TIM_Base_Start+0x5c>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a19      	ldr	r2, [pc, #100]	; (8004f24 <HAL_TIM_Base_Start+0xbc>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d115      	bne.n	8004ef0 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	689a      	ldr	r2, [r3, #8]
 8004eca:	4b17      	ldr	r3, [pc, #92]	; (8004f28 <HAL_TIM_Base_Start+0xc0>)
 8004ecc:	4013      	ands	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2b06      	cmp	r3, #6
 8004ed4:	d015      	beq.n	8004f02 <HAL_TIM_Base_Start+0x9a>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004edc:	d011      	beq.n	8004f02 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f042 0201 	orr.w	r2, r2, #1
 8004eec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eee:	e008      	b.n	8004f02 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f042 0201 	orr.w	r2, r2, #1
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	e000      	b.n	8004f04 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	40012c00 	.word	0x40012c00
 8004f18:	40000400 	.word	0x40000400
 8004f1c:	40000800 	.word	0x40000800
 8004f20:	40013400 	.word	0x40013400
 8004f24:	40014000 	.word	0x40014000
 8004f28:	00010007 	.word	0x00010007

08004f2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d001      	beq.n	8004f44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e04a      	b.n	8004fda <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68da      	ldr	r2, [r3, #12]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f042 0201 	orr.w	r2, r2, #1
 8004f5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a21      	ldr	r2, [pc, #132]	; (8004fe8 <HAL_TIM_Base_Start_IT+0xbc>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d018      	beq.n	8004f98 <HAL_TIM_Base_Start_IT+0x6c>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f6e:	d013      	beq.n	8004f98 <HAL_TIM_Base_Start_IT+0x6c>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a1d      	ldr	r2, [pc, #116]	; (8004fec <HAL_TIM_Base_Start_IT+0xc0>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d00e      	beq.n	8004f98 <HAL_TIM_Base_Start_IT+0x6c>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a1c      	ldr	r2, [pc, #112]	; (8004ff0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d009      	beq.n	8004f98 <HAL_TIM_Base_Start_IT+0x6c>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a1a      	ldr	r2, [pc, #104]	; (8004ff4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d004      	beq.n	8004f98 <HAL_TIM_Base_Start_IT+0x6c>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a19      	ldr	r2, [pc, #100]	; (8004ff8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d115      	bne.n	8004fc4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689a      	ldr	r2, [r3, #8]
 8004f9e:	4b17      	ldr	r3, [pc, #92]	; (8004ffc <HAL_TIM_Base_Start_IT+0xd0>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2b06      	cmp	r3, #6
 8004fa8:	d015      	beq.n	8004fd6 <HAL_TIM_Base_Start_IT+0xaa>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fb0:	d011      	beq.n	8004fd6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f042 0201 	orr.w	r2, r2, #1
 8004fc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc2:	e008      	b.n	8004fd6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0201 	orr.w	r2, r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	e000      	b.n	8004fd8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	40012c00 	.word	0x40012c00
 8004fec:	40000400 	.word	0x40000400
 8004ff0:	40000800 	.word	0x40000800
 8004ff4:	40013400 	.word	0x40013400
 8004ff8:	40014000 	.word	0x40014000
 8004ffc:	00010007 	.word	0x00010007

08005000 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e049      	b.n	80050a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d106      	bne.n	800502c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f841 	bl	80050ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2202      	movs	r2, #2
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	3304      	adds	r3, #4
 800503c:	4619      	mov	r1, r3
 800503e:	4610      	mov	r0, r2
 8005040:	f000 ff50 	bl	8005ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b083      	sub	sp, #12
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80050b6:	bf00      	nop
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
	...

080050c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d109      	bne.n	80050e8 <HAL_TIM_PWM_Start+0x24>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	2b01      	cmp	r3, #1
 80050de:	bf14      	ite	ne
 80050e0:	2301      	movne	r3, #1
 80050e2:	2300      	moveq	r3, #0
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	e03c      	b.n	8005162 <HAL_TIM_PWM_Start+0x9e>
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d109      	bne.n	8005102 <HAL_TIM_PWM_Start+0x3e>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	bf14      	ite	ne
 80050fa:	2301      	movne	r3, #1
 80050fc:	2300      	moveq	r3, #0
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	e02f      	b.n	8005162 <HAL_TIM_PWM_Start+0x9e>
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2b08      	cmp	r3, #8
 8005106:	d109      	bne.n	800511c <HAL_TIM_PWM_Start+0x58>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b01      	cmp	r3, #1
 8005112:	bf14      	ite	ne
 8005114:	2301      	movne	r3, #1
 8005116:	2300      	moveq	r3, #0
 8005118:	b2db      	uxtb	r3, r3
 800511a:	e022      	b.n	8005162 <HAL_TIM_PWM_Start+0x9e>
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	2b0c      	cmp	r3, #12
 8005120:	d109      	bne.n	8005136 <HAL_TIM_PWM_Start+0x72>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b01      	cmp	r3, #1
 800512c:	bf14      	ite	ne
 800512e:	2301      	movne	r3, #1
 8005130:	2300      	moveq	r3, #0
 8005132:	b2db      	uxtb	r3, r3
 8005134:	e015      	b.n	8005162 <HAL_TIM_PWM_Start+0x9e>
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b10      	cmp	r3, #16
 800513a:	d109      	bne.n	8005150 <HAL_TIM_PWM_Start+0x8c>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b01      	cmp	r3, #1
 8005146:	bf14      	ite	ne
 8005148:	2301      	movne	r3, #1
 800514a:	2300      	moveq	r3, #0
 800514c:	b2db      	uxtb	r3, r3
 800514e:	e008      	b.n	8005162 <HAL_TIM_PWM_Start+0x9e>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b01      	cmp	r3, #1
 800515a:	bf14      	ite	ne
 800515c:	2301      	movne	r3, #1
 800515e:	2300      	moveq	r3, #0
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e097      	b.n	800529a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d104      	bne.n	800517a <HAL_TIM_PWM_Start+0xb6>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005178:	e023      	b.n	80051c2 <HAL_TIM_PWM_Start+0xfe>
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b04      	cmp	r3, #4
 800517e:	d104      	bne.n	800518a <HAL_TIM_PWM_Start+0xc6>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005188:	e01b      	b.n	80051c2 <HAL_TIM_PWM_Start+0xfe>
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b08      	cmp	r3, #8
 800518e:	d104      	bne.n	800519a <HAL_TIM_PWM_Start+0xd6>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005198:	e013      	b.n	80051c2 <HAL_TIM_PWM_Start+0xfe>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b0c      	cmp	r3, #12
 800519e:	d104      	bne.n	80051aa <HAL_TIM_PWM_Start+0xe6>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2202      	movs	r2, #2
 80051a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051a8:	e00b      	b.n	80051c2 <HAL_TIM_PWM_Start+0xfe>
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	2b10      	cmp	r3, #16
 80051ae:	d104      	bne.n	80051ba <HAL_TIM_PWM_Start+0xf6>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2202      	movs	r2, #2
 80051b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051b8:	e003      	b.n	80051c2 <HAL_TIM_PWM_Start+0xfe>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2202      	movs	r2, #2
 80051be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2201      	movs	r2, #1
 80051c8:	6839      	ldr	r1, [r7, #0]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f001 fbca 	bl	8006964 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a33      	ldr	r2, [pc, #204]	; (80052a4 <HAL_TIM_PWM_Start+0x1e0>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d013      	beq.n	8005202 <HAL_TIM_PWM_Start+0x13e>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a32      	ldr	r2, [pc, #200]	; (80052a8 <HAL_TIM_PWM_Start+0x1e4>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d00e      	beq.n	8005202 <HAL_TIM_PWM_Start+0x13e>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a30      	ldr	r2, [pc, #192]	; (80052ac <HAL_TIM_PWM_Start+0x1e8>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d009      	beq.n	8005202 <HAL_TIM_PWM_Start+0x13e>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a2f      	ldr	r2, [pc, #188]	; (80052b0 <HAL_TIM_PWM_Start+0x1ec>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d004      	beq.n	8005202 <HAL_TIM_PWM_Start+0x13e>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a2d      	ldr	r2, [pc, #180]	; (80052b4 <HAL_TIM_PWM_Start+0x1f0>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d101      	bne.n	8005206 <HAL_TIM_PWM_Start+0x142>
 8005202:	2301      	movs	r3, #1
 8005204:	e000      	b.n	8005208 <HAL_TIM_PWM_Start+0x144>
 8005206:	2300      	movs	r3, #0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d007      	beq.n	800521c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800521a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a20      	ldr	r2, [pc, #128]	; (80052a4 <HAL_TIM_PWM_Start+0x1e0>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d018      	beq.n	8005258 <HAL_TIM_PWM_Start+0x194>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800522e:	d013      	beq.n	8005258 <HAL_TIM_PWM_Start+0x194>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a20      	ldr	r2, [pc, #128]	; (80052b8 <HAL_TIM_PWM_Start+0x1f4>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d00e      	beq.n	8005258 <HAL_TIM_PWM_Start+0x194>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a1f      	ldr	r2, [pc, #124]	; (80052bc <HAL_TIM_PWM_Start+0x1f8>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d009      	beq.n	8005258 <HAL_TIM_PWM_Start+0x194>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a17      	ldr	r2, [pc, #92]	; (80052a8 <HAL_TIM_PWM_Start+0x1e4>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d004      	beq.n	8005258 <HAL_TIM_PWM_Start+0x194>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a16      	ldr	r2, [pc, #88]	; (80052ac <HAL_TIM_PWM_Start+0x1e8>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d115      	bne.n	8005284 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689a      	ldr	r2, [r3, #8]
 800525e:	4b18      	ldr	r3, [pc, #96]	; (80052c0 <HAL_TIM_PWM_Start+0x1fc>)
 8005260:	4013      	ands	r3, r2
 8005262:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2b06      	cmp	r3, #6
 8005268:	d015      	beq.n	8005296 <HAL_TIM_PWM_Start+0x1d2>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005270:	d011      	beq.n	8005296 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f042 0201 	orr.w	r2, r2, #1
 8005280:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005282:	e008      	b.n	8005296 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f042 0201 	orr.w	r2, r2, #1
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	e000      	b.n	8005298 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005296:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	40012c00 	.word	0x40012c00
 80052a8:	40013400 	.word	0x40013400
 80052ac:	40014000 	.word	0x40014000
 80052b0:	40014400 	.word	0x40014400
 80052b4:	40014800 	.word	0x40014800
 80052b8:	40000400 	.word	0x40000400
 80052bc:	40000800 	.word	0x40000800
 80052c0:	00010007 	.word	0x00010007

080052c4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e049      	b.n	800536a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d106      	bne.n	80052f0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7fb ff80 	bl	80011f0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3304      	adds	r3, #4
 8005300:	4619      	mov	r1, r3
 8005302:	4610      	mov	r0, r2
 8005304:	f000 fdee 	bl	8005ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
	...

08005374 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d104      	bne.n	800538e <HAL_TIM_IC_Start_IT+0x1a>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800538a:	b2db      	uxtb	r3, r3
 800538c:	e023      	b.n	80053d6 <HAL_TIM_IC_Start_IT+0x62>
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2b04      	cmp	r3, #4
 8005392:	d104      	bne.n	800539e <HAL_TIM_IC_Start_IT+0x2a>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800539a:	b2db      	uxtb	r3, r3
 800539c:	e01b      	b.n	80053d6 <HAL_TIM_IC_Start_IT+0x62>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b08      	cmp	r3, #8
 80053a2:	d104      	bne.n	80053ae <HAL_TIM_IC_Start_IT+0x3a>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	e013      	b.n	80053d6 <HAL_TIM_IC_Start_IT+0x62>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b0c      	cmp	r3, #12
 80053b2:	d104      	bne.n	80053be <HAL_TIM_IC_Start_IT+0x4a>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	e00b      	b.n	80053d6 <HAL_TIM_IC_Start_IT+0x62>
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b10      	cmp	r3, #16
 80053c2:	d104      	bne.n	80053ce <HAL_TIM_IC_Start_IT+0x5a>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	e003      	b.n	80053d6 <HAL_TIM_IC_Start_IT+0x62>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d104      	bne.n	80053e8 <HAL_TIM_IC_Start_IT+0x74>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	e013      	b.n	8005410 <HAL_TIM_IC_Start_IT+0x9c>
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	2b04      	cmp	r3, #4
 80053ec:	d104      	bne.n	80053f8 <HAL_TIM_IC_Start_IT+0x84>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	e00b      	b.n	8005410 <HAL_TIM_IC_Start_IT+0x9c>
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	2b08      	cmp	r3, #8
 80053fc:	d104      	bne.n	8005408 <HAL_TIM_IC_Start_IT+0x94>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005404:	b2db      	uxtb	r3, r3
 8005406:	e003      	b.n	8005410 <HAL_TIM_IC_Start_IT+0x9c>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800540e:	b2db      	uxtb	r3, r3
 8005410:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005412:	7bfb      	ldrb	r3, [r7, #15]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d102      	bne.n	800541e <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005418:	7bbb      	ldrb	r3, [r7, #14]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d001      	beq.n	8005422 <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e0d3      	b.n	80055ca <HAL_TIM_IC_Start_IT+0x256>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d104      	bne.n	8005432 <HAL_TIM_IC_Start_IT+0xbe>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005430:	e023      	b.n	800547a <HAL_TIM_IC_Start_IT+0x106>
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2b04      	cmp	r3, #4
 8005436:	d104      	bne.n	8005442 <HAL_TIM_IC_Start_IT+0xce>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005440:	e01b      	b.n	800547a <HAL_TIM_IC_Start_IT+0x106>
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	2b08      	cmp	r3, #8
 8005446:	d104      	bne.n	8005452 <HAL_TIM_IC_Start_IT+0xde>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2202      	movs	r2, #2
 800544c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005450:	e013      	b.n	800547a <HAL_TIM_IC_Start_IT+0x106>
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b0c      	cmp	r3, #12
 8005456:	d104      	bne.n	8005462 <HAL_TIM_IC_Start_IT+0xee>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005460:	e00b      	b.n	800547a <HAL_TIM_IC_Start_IT+0x106>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b10      	cmp	r3, #16
 8005466:	d104      	bne.n	8005472 <HAL_TIM_IC_Start_IT+0xfe>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005470:	e003      	b.n	800547a <HAL_TIM_IC_Start_IT+0x106>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2202      	movs	r2, #2
 8005476:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d104      	bne.n	800548a <HAL_TIM_IC_Start_IT+0x116>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2202      	movs	r2, #2
 8005484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005488:	e013      	b.n	80054b2 <HAL_TIM_IC_Start_IT+0x13e>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2b04      	cmp	r3, #4
 800548e:	d104      	bne.n	800549a <HAL_TIM_IC_Start_IT+0x126>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005498:	e00b      	b.n	80054b2 <HAL_TIM_IC_Start_IT+0x13e>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b08      	cmp	r3, #8
 800549e:	d104      	bne.n	80054aa <HAL_TIM_IC_Start_IT+0x136>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054a8:	e003      	b.n	80054b2 <HAL_TIM_IC_Start_IT+0x13e>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2202      	movs	r2, #2
 80054ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2b0c      	cmp	r3, #12
 80054b6:	d841      	bhi.n	800553c <HAL_TIM_IC_Start_IT+0x1c8>
 80054b8:	a201      	add	r2, pc, #4	; (adr r2, 80054c0 <HAL_TIM_IC_Start_IT+0x14c>)
 80054ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054be:	bf00      	nop
 80054c0:	080054f5 	.word	0x080054f5
 80054c4:	0800553d 	.word	0x0800553d
 80054c8:	0800553d 	.word	0x0800553d
 80054cc:	0800553d 	.word	0x0800553d
 80054d0:	08005507 	.word	0x08005507
 80054d4:	0800553d 	.word	0x0800553d
 80054d8:	0800553d 	.word	0x0800553d
 80054dc:	0800553d 	.word	0x0800553d
 80054e0:	08005519 	.word	0x08005519
 80054e4:	0800553d 	.word	0x0800553d
 80054e8:	0800553d 	.word	0x0800553d
 80054ec:	0800553d 	.word	0x0800553d
 80054f0:	0800552b 	.word	0x0800552b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68da      	ldr	r2, [r3, #12]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f042 0202 	orr.w	r2, r2, #2
 8005502:	60da      	str	r2, [r3, #12]
      break;
 8005504:	e01b      	b.n	800553e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68da      	ldr	r2, [r3, #12]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f042 0204 	orr.w	r2, r2, #4
 8005514:	60da      	str	r2, [r3, #12]
      break;
 8005516:	e012      	b.n	800553e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68da      	ldr	r2, [r3, #12]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f042 0208 	orr.w	r2, r2, #8
 8005526:	60da      	str	r2, [r3, #12]
      break;
 8005528:	e009      	b.n	800553e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68da      	ldr	r2, [r3, #12]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f042 0210 	orr.w	r2, r2, #16
 8005538:	60da      	str	r2, [r3, #12]
      break;
 800553a:	e000      	b.n	800553e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 800553c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2201      	movs	r2, #1
 8005544:	6839      	ldr	r1, [r7, #0]
 8005546:	4618      	mov	r0, r3
 8005548:	f001 fa0c 	bl	8006964 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a20      	ldr	r2, [pc, #128]	; (80055d4 <HAL_TIM_IC_Start_IT+0x260>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d018      	beq.n	8005588 <HAL_TIM_IC_Start_IT+0x214>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800555e:	d013      	beq.n	8005588 <HAL_TIM_IC_Start_IT+0x214>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a1c      	ldr	r2, [pc, #112]	; (80055d8 <HAL_TIM_IC_Start_IT+0x264>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d00e      	beq.n	8005588 <HAL_TIM_IC_Start_IT+0x214>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a1b      	ldr	r2, [pc, #108]	; (80055dc <HAL_TIM_IC_Start_IT+0x268>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d009      	beq.n	8005588 <HAL_TIM_IC_Start_IT+0x214>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a19      	ldr	r2, [pc, #100]	; (80055e0 <HAL_TIM_IC_Start_IT+0x26c>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d004      	beq.n	8005588 <HAL_TIM_IC_Start_IT+0x214>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a18      	ldr	r2, [pc, #96]	; (80055e4 <HAL_TIM_IC_Start_IT+0x270>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d115      	bne.n	80055b4 <HAL_TIM_IC_Start_IT+0x240>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689a      	ldr	r2, [r3, #8]
 800558e:	4b16      	ldr	r3, [pc, #88]	; (80055e8 <HAL_TIM_IC_Start_IT+0x274>)
 8005590:	4013      	ands	r3, r2
 8005592:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2b06      	cmp	r3, #6
 8005598:	d015      	beq.n	80055c6 <HAL_TIM_IC_Start_IT+0x252>
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055a0:	d011      	beq.n	80055c6 <HAL_TIM_IC_Start_IT+0x252>
    {
      __HAL_TIM_ENABLE(htim);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f042 0201 	orr.w	r2, r2, #1
 80055b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b2:	e008      	b.n	80055c6 <HAL_TIM_IC_Start_IT+0x252>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f042 0201 	orr.w	r2, r2, #1
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	e000      	b.n	80055c8 <HAL_TIM_IC_Start_IT+0x254>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	40012c00 	.word	0x40012c00
 80055d8:	40000400 	.word	0x40000400
 80055dc:	40000800 	.word	0x40000800
 80055e0:	40013400 	.word	0x40013400
 80055e4:	40014000 	.word	0x40014000
 80055e8:	00010007 	.word	0x00010007

080055ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d122      	bne.n	8005648 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b02      	cmp	r3, #2
 800560e:	d11b      	bne.n	8005648 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f06f 0202 	mvn.w	r2, #2
 8005618:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	f003 0303 	and.w	r3, r3, #3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d003      	beq.n	8005636 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7fb fa62 	bl	8000af8 <HAL_TIM_IC_CaptureCallback>
 8005634:	e005      	b.n	8005642 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 fc36 	bl	8005ea8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 fc3d 	bl	8005ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	f003 0304 	and.w	r3, r3, #4
 8005652:	2b04      	cmp	r3, #4
 8005654:	d122      	bne.n	800569c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	2b04      	cmp	r3, #4
 8005662:	d11b      	bne.n	800569c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f06f 0204 	mvn.w	r2, #4
 800566c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2202      	movs	r2, #2
 8005672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800567e:	2b00      	cmp	r3, #0
 8005680:	d003      	beq.n	800568a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7fb fa38 	bl	8000af8 <HAL_TIM_IC_CaptureCallback>
 8005688:	e005      	b.n	8005696 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fc0c 	bl	8005ea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 fc13 	bl	8005ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	f003 0308 	and.w	r3, r3, #8
 80056a6:	2b08      	cmp	r3, #8
 80056a8:	d122      	bne.n	80056f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f003 0308 	and.w	r3, r3, #8
 80056b4:	2b08      	cmp	r3, #8
 80056b6:	d11b      	bne.n	80056f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f06f 0208 	mvn.w	r2, #8
 80056c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2204      	movs	r2, #4
 80056c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	f003 0303 	and.w	r3, r3, #3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d003      	beq.n	80056de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7fb fa0e 	bl	8000af8 <HAL_TIM_IC_CaptureCallback>
 80056dc:	e005      	b.n	80056ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 fbe2 	bl	8005ea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 fbe9 	bl	8005ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	f003 0310 	and.w	r3, r3, #16
 80056fa:	2b10      	cmp	r3, #16
 80056fc:	d122      	bne.n	8005744 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	f003 0310 	and.w	r3, r3, #16
 8005708:	2b10      	cmp	r3, #16
 800570a:	d11b      	bne.n	8005744 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f06f 0210 	mvn.w	r2, #16
 8005714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2208      	movs	r2, #8
 800571a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	69db      	ldr	r3, [r3, #28]
 8005722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7fb f9e4 	bl	8000af8 <HAL_TIM_IC_CaptureCallback>
 8005730:	e005      	b.n	800573e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 fbb8 	bl	8005ea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 fbbf 	bl	8005ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b01      	cmp	r3, #1
 8005750:	d10e      	bne.n	8005770 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	2b01      	cmp	r3, #1
 800575e:	d107      	bne.n	8005770 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f06f 0201 	mvn.w	r2, #1
 8005768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7fa fd54 	bl	8000218 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800577a:	2b80      	cmp	r3, #128	; 0x80
 800577c:	d10e      	bne.n	800579c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005788:	2b80      	cmp	r3, #128	; 0x80
 800578a:	d107      	bne.n	800579c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f001 fac4 	bl	8006d24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057aa:	d10e      	bne.n	80057ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b6:	2b80      	cmp	r3, #128	; 0x80
 80057b8:	d107      	bne.n	80057ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80057c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f001 fab7 	bl	8006d38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d4:	2b40      	cmp	r3, #64	; 0x40
 80057d6:	d10e      	bne.n	80057f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e2:	2b40      	cmp	r3, #64	; 0x40
 80057e4:	d107      	bne.n	80057f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 fb6d 	bl	8005ed0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	f003 0320 	and.w	r3, r3, #32
 8005800:	2b20      	cmp	r3, #32
 8005802:	d10e      	bne.n	8005822 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	f003 0320 	and.w	r3, r3, #32
 800580e:	2b20      	cmp	r3, #32
 8005810:	d107      	bne.n	8005822 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f06f 0220 	mvn.w	r2, #32
 800581a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f001 fa77 	bl	8006d10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800582c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005830:	d10f      	bne.n	8005852 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800583c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005840:	d107      	bne.n	8005852 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800584a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f001 fa7d 	bl	8006d4c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800585c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005860:	d10f      	bne.n	8005882 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800586c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005870:	d107      	bne.n	8005882 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800587a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f001 fa6f 	bl	8006d60 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800588c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005890:	d10f      	bne.n	80058b2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800589c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058a0:	d107      	bne.n	80058b2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80058aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f001 fa61 	bl	8006d74 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058c0:	d10f      	bne.n	80058e2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058d0:	d107      	bne.n	80058e2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80058da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f001 fa53 	bl	8006d88 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058e2:	bf00      	nop
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b084      	sub	sp, #16
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	60f8      	str	r0, [r7, #12]
 80058f2:	60b9      	str	r1, [r7, #8]
 80058f4:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005900:	2302      	movs	r3, #2
 8005902:	e082      	b.n	8005a0a <HAL_TIM_IC_ConfigChannel+0x120>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d11b      	bne.n	800594a <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6818      	ldr	r0, [r3, #0]
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	6819      	ldr	r1, [r3, #0]
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f000 fe65 	bl	80065f0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	699a      	ldr	r2, [r3, #24]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 020c 	bic.w	r2, r2, #12
 8005934:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	6999      	ldr	r1, [r3, #24]
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	619a      	str	r2, [r3, #24]
 8005948:	e05a      	b.n	8005a00 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2b04      	cmp	r3, #4
 800594e:	d11c      	bne.n	800598a <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6818      	ldr	r0, [r3, #0]
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	6819      	ldr	r1, [r3, #0]
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	f000 fedd 	bl	800671e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	699a      	ldr	r2, [r3, #24]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005972:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6999      	ldr	r1, [r3, #24]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	021a      	lsls	r2, r3, #8
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	430a      	orrs	r2, r1
 8005986:	619a      	str	r2, [r3, #24]
 8005988:	e03a      	b.n	8005a00 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2b08      	cmp	r3, #8
 800598e:	d11b      	bne.n	80059c8 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6818      	ldr	r0, [r3, #0]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	6819      	ldr	r1, [r3, #0]
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	f000 ff2a 	bl	80067f8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	69da      	ldr	r2, [r3, #28]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 020c 	bic.w	r2, r2, #12
 80059b2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	69d9      	ldr	r1, [r3, #28]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	689a      	ldr	r2, [r3, #8]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	61da      	str	r2, [r3, #28]
 80059c6:	e01b      	b.n	8005a00 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6818      	ldr	r0, [r3, #0]
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	6819      	ldr	r1, [r3, #0]
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f000 ff4a 	bl	8006870 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	69da      	ldr	r2, [r3, #28]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80059ea:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	69d9      	ldr	r1, [r3, #28]
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	021a      	lsls	r2, r3, #8
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
	...

08005a14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d101      	bne.n	8005a2e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005a2a:	2302      	movs	r3, #2
 8005a2c:	e0fd      	b.n	8005c2a <HAL_TIM_PWM_ConfigChannel+0x216>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2b14      	cmp	r3, #20
 8005a3a:	f200 80f0 	bhi.w	8005c1e <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005a3e:	a201      	add	r2, pc, #4	; (adr r2, 8005a44 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a44:	08005a99 	.word	0x08005a99
 8005a48:	08005c1f 	.word	0x08005c1f
 8005a4c:	08005c1f 	.word	0x08005c1f
 8005a50:	08005c1f 	.word	0x08005c1f
 8005a54:	08005ad9 	.word	0x08005ad9
 8005a58:	08005c1f 	.word	0x08005c1f
 8005a5c:	08005c1f 	.word	0x08005c1f
 8005a60:	08005c1f 	.word	0x08005c1f
 8005a64:	08005b1b 	.word	0x08005b1b
 8005a68:	08005c1f 	.word	0x08005c1f
 8005a6c:	08005c1f 	.word	0x08005c1f
 8005a70:	08005c1f 	.word	0x08005c1f
 8005a74:	08005b5b 	.word	0x08005b5b
 8005a78:	08005c1f 	.word	0x08005c1f
 8005a7c:	08005c1f 	.word	0x08005c1f
 8005a80:	08005c1f 	.word	0x08005c1f
 8005a84:	08005b9d 	.word	0x08005b9d
 8005a88:	08005c1f 	.word	0x08005c1f
 8005a8c:	08005c1f 	.word	0x08005c1f
 8005a90:	08005c1f 	.word	0x08005c1f
 8005a94:	08005bdd 	.word	0x08005bdd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68b9      	ldr	r1, [r7, #8]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f000 fab0 	bl	8006004 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	699a      	ldr	r2, [r3, #24]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f042 0208 	orr.w	r2, r2, #8
 8005ab2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	699a      	ldr	r2, [r3, #24]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 0204 	bic.w	r2, r2, #4
 8005ac2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6999      	ldr	r1, [r3, #24]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	691a      	ldr	r2, [r3, #16]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	619a      	str	r2, [r3, #24]
      break;
 8005ad6:	e0a3      	b.n	8005c20 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68b9      	ldr	r1, [r7, #8]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 fb20 	bl	8006124 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	699a      	ldr	r2, [r3, #24]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005af2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	699a      	ldr	r2, [r3, #24]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6999      	ldr	r1, [r3, #24]
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	021a      	lsls	r2, r3, #8
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	430a      	orrs	r2, r1
 8005b16:	619a      	str	r2, [r3, #24]
      break;
 8005b18:	e082      	b.n	8005c20 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68b9      	ldr	r1, [r7, #8]
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 fb89 	bl	8006238 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69da      	ldr	r2, [r3, #28]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f042 0208 	orr.w	r2, r2, #8
 8005b34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	69da      	ldr	r2, [r3, #28]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f022 0204 	bic.w	r2, r2, #4
 8005b44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	69d9      	ldr	r1, [r3, #28]
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	691a      	ldr	r2, [r3, #16]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	430a      	orrs	r2, r1
 8005b56:	61da      	str	r2, [r3, #28]
      break;
 8005b58:	e062      	b.n	8005c20 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68b9      	ldr	r1, [r7, #8]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 fbf1 	bl	8006348 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	69da      	ldr	r2, [r3, #28]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	69da      	ldr	r2, [r3, #28]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	69d9      	ldr	r1, [r3, #28]
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	021a      	lsls	r2, r3, #8
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	61da      	str	r2, [r3, #28]
      break;
 8005b9a:	e041      	b.n	8005c20 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68b9      	ldr	r1, [r7, #8]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 fc5a 	bl	800645c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f042 0208 	orr.w	r2, r2, #8
 8005bb6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 0204 	bic.w	r2, r2, #4
 8005bc6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	691a      	ldr	r2, [r3, #16]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005bda:	e021      	b.n	8005c20 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68b9      	ldr	r1, [r7, #8]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f000 fc9e 	bl	8006524 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bf6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c06:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	021a      	lsls	r2, r3, #8
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005c1c:	e000      	b.n	8005c20 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005c1e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop

08005c34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d101      	bne.n	8005c4c <HAL_TIM_ConfigClockSource+0x18>
 8005c48:	2302      	movs	r3, #2
 8005c4a:	e0dd      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x1d4>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2202      	movs	r2, #2
 8005c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005c6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c76:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a62      	ldr	r2, [pc, #392]	; (8005e10 <HAL_TIM_ConfigClockSource+0x1dc>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	f000 80a9 	beq.w	8005dde <HAL_TIM_ConfigClockSource+0x1aa>
 8005c8c:	4a60      	ldr	r2, [pc, #384]	; (8005e10 <HAL_TIM_ConfigClockSource+0x1dc>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	f200 80ae 	bhi.w	8005df0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005c94:	4a5f      	ldr	r2, [pc, #380]	; (8005e14 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	f000 80a1 	beq.w	8005dde <HAL_TIM_ConfigClockSource+0x1aa>
 8005c9c:	4a5d      	ldr	r2, [pc, #372]	; (8005e14 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	f200 80a6 	bhi.w	8005df0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ca4:	4a5c      	ldr	r2, [pc, #368]	; (8005e18 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	f000 8099 	beq.w	8005dde <HAL_TIM_ConfigClockSource+0x1aa>
 8005cac:	4a5a      	ldr	r2, [pc, #360]	; (8005e18 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	f200 809e 	bhi.w	8005df0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005cb4:	4a59      	ldr	r2, [pc, #356]	; (8005e1c <HAL_TIM_ConfigClockSource+0x1e8>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	f000 8091 	beq.w	8005dde <HAL_TIM_ConfigClockSource+0x1aa>
 8005cbc:	4a57      	ldr	r2, [pc, #348]	; (8005e1c <HAL_TIM_ConfigClockSource+0x1e8>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	f200 8096 	bhi.w	8005df0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005cc4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005cc8:	f000 8089 	beq.w	8005dde <HAL_TIM_ConfigClockSource+0x1aa>
 8005ccc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005cd0:	f200 808e 	bhi.w	8005df0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005cd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cd8:	d03e      	beq.n	8005d58 <HAL_TIM_ConfigClockSource+0x124>
 8005cda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cde:	f200 8087 	bhi.w	8005df0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ce6:	f000 8085 	beq.w	8005df4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cee:	d87f      	bhi.n	8005df0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005cf0:	2b70      	cmp	r3, #112	; 0x70
 8005cf2:	d01a      	beq.n	8005d2a <HAL_TIM_ConfigClockSource+0xf6>
 8005cf4:	2b70      	cmp	r3, #112	; 0x70
 8005cf6:	d87b      	bhi.n	8005df0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005cf8:	2b60      	cmp	r3, #96	; 0x60
 8005cfa:	d050      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0x16a>
 8005cfc:	2b60      	cmp	r3, #96	; 0x60
 8005cfe:	d877      	bhi.n	8005df0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d00:	2b50      	cmp	r3, #80	; 0x50
 8005d02:	d03c      	beq.n	8005d7e <HAL_TIM_ConfigClockSource+0x14a>
 8005d04:	2b50      	cmp	r3, #80	; 0x50
 8005d06:	d873      	bhi.n	8005df0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d08:	2b40      	cmp	r3, #64	; 0x40
 8005d0a:	d058      	beq.n	8005dbe <HAL_TIM_ConfigClockSource+0x18a>
 8005d0c:	2b40      	cmp	r3, #64	; 0x40
 8005d0e:	d86f      	bhi.n	8005df0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d10:	2b30      	cmp	r3, #48	; 0x30
 8005d12:	d064      	beq.n	8005dde <HAL_TIM_ConfigClockSource+0x1aa>
 8005d14:	2b30      	cmp	r3, #48	; 0x30
 8005d16:	d86b      	bhi.n	8005df0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d18:	2b20      	cmp	r3, #32
 8005d1a:	d060      	beq.n	8005dde <HAL_TIM_ConfigClockSource+0x1aa>
 8005d1c:	2b20      	cmp	r3, #32
 8005d1e:	d867      	bhi.n	8005df0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d05c      	beq.n	8005dde <HAL_TIM_ConfigClockSource+0x1aa>
 8005d24:	2b10      	cmp	r3, #16
 8005d26:	d05a      	beq.n	8005dde <HAL_TIM_ConfigClockSource+0x1aa>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005d28:	e062      	b.n	8005df0 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6818      	ldr	r0, [r3, #0]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	6899      	ldr	r1, [r3, #8]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	685a      	ldr	r2, [r3, #4]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	f000 fdf3 	bl	8006924 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d4c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	609a      	str	r2, [r3, #8]
      break;
 8005d56:	e04e      	b.n	8005df6 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_ETR_SetConfig(htim->Instance,
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6818      	ldr	r0, [r3, #0]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	6899      	ldr	r1, [r3, #8]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f000 fddc 	bl	8006924 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689a      	ldr	r2, [r3, #8]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d7a:	609a      	str	r2, [r3, #8]
      break;
 8005d7c:	e03b      	b.n	8005df6 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6818      	ldr	r0, [r3, #0]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	6859      	ldr	r1, [r3, #4]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	f000 fc98 	bl	80066c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2150      	movs	r1, #80	; 0x50
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 fda7 	bl	80068ea <TIM_ITRx_SetConfig>
      break;
 8005d9c:	e02b      	b.n	8005df6 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6818      	ldr	r0, [r3, #0]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	6859      	ldr	r1, [r3, #4]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	461a      	mov	r2, r3
 8005dac:	f000 fcf4 	bl	8006798 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2160      	movs	r1, #96	; 0x60
 8005db6:	4618      	mov	r0, r3
 8005db8:	f000 fd97 	bl	80068ea <TIM_ITRx_SetConfig>
      break;
 8005dbc:	e01b      	b.n	8005df6 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6818      	ldr	r0, [r3, #0]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	6859      	ldr	r1, [r3, #4]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	f000 fc78 	bl	80066c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2140      	movs	r1, #64	; 0x40
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 fd87 	bl	80068ea <TIM_ITRx_SetConfig>
      break;
 8005ddc:	e00b      	b.n	8005df6 <HAL_TIM_ConfigClockSource+0x1c2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4619      	mov	r1, r3
 8005de8:	4610      	mov	r0, r2
 8005dea:	f000 fd7e 	bl	80068ea <TIM_ITRx_SetConfig>
        break;
 8005dee:	e002      	b.n	8005df6 <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 8005df0:	bf00      	nop
 8005df2:	e000      	b.n	8005df6 <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 8005df4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	00100070 	.word	0x00100070
 8005e14:	00100040 	.word	0x00100040
 8005e18:	00100030 	.word	0x00100030
 8005e1c:	00100020 	.word	0x00100020

08005e20 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	60fb      	str	r3, [r7, #12]
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	2b0c      	cmp	r3, #12
 8005e32:	d831      	bhi.n	8005e98 <HAL_TIM_ReadCapturedValue+0x78>
 8005e34:	a201      	add	r2, pc, #4	; (adr r2, 8005e3c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3a:	bf00      	nop
 8005e3c:	08005e71 	.word	0x08005e71
 8005e40:	08005e99 	.word	0x08005e99
 8005e44:	08005e99 	.word	0x08005e99
 8005e48:	08005e99 	.word	0x08005e99
 8005e4c:	08005e7b 	.word	0x08005e7b
 8005e50:	08005e99 	.word	0x08005e99
 8005e54:	08005e99 	.word	0x08005e99
 8005e58:	08005e99 	.word	0x08005e99
 8005e5c:	08005e85 	.word	0x08005e85
 8005e60:	08005e99 	.word	0x08005e99
 8005e64:	08005e99 	.word	0x08005e99
 8005e68:	08005e99 	.word	0x08005e99
 8005e6c:	08005e8f 	.word	0x08005e8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e76:	60fb      	str	r3, [r7, #12]

      break;
 8005e78:	e00f      	b.n	8005e9a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e80:	60fb      	str	r3, [r7, #12]

      break;
 8005e82:	e00a      	b.n	8005e9a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e8a:	60fb      	str	r3, [r7, #12]

      break;
 8005e8c:	e005      	b.n	8005e9a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e94:	60fb      	str	r3, [r7, #12]

      break;
 8005e96:	e000      	b.n	8005e9a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005e98:	bf00      	nop
  }

  return tmpreg;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3714      	adds	r7, #20
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ec4:	bf00      	nop
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a3c      	ldr	r2, [pc, #240]	; (8005fe8 <TIM_Base_SetConfig+0x104>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d00f      	beq.n	8005f1c <TIM_Base_SetConfig+0x38>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f02:	d00b      	beq.n	8005f1c <TIM_Base_SetConfig+0x38>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a39      	ldr	r2, [pc, #228]	; (8005fec <TIM_Base_SetConfig+0x108>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d007      	beq.n	8005f1c <TIM_Base_SetConfig+0x38>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a38      	ldr	r2, [pc, #224]	; (8005ff0 <TIM_Base_SetConfig+0x10c>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d003      	beq.n	8005f1c <TIM_Base_SetConfig+0x38>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a37      	ldr	r2, [pc, #220]	; (8005ff4 <TIM_Base_SetConfig+0x110>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d108      	bne.n	8005f2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a2d      	ldr	r2, [pc, #180]	; (8005fe8 <TIM_Base_SetConfig+0x104>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d01b      	beq.n	8005f6e <TIM_Base_SetConfig+0x8a>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f3c:	d017      	beq.n	8005f6e <TIM_Base_SetConfig+0x8a>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a2a      	ldr	r2, [pc, #168]	; (8005fec <TIM_Base_SetConfig+0x108>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d013      	beq.n	8005f6e <TIM_Base_SetConfig+0x8a>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a29      	ldr	r2, [pc, #164]	; (8005ff0 <TIM_Base_SetConfig+0x10c>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d00f      	beq.n	8005f6e <TIM_Base_SetConfig+0x8a>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a28      	ldr	r2, [pc, #160]	; (8005ff4 <TIM_Base_SetConfig+0x110>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d00b      	beq.n	8005f6e <TIM_Base_SetConfig+0x8a>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a27      	ldr	r2, [pc, #156]	; (8005ff8 <TIM_Base_SetConfig+0x114>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d007      	beq.n	8005f6e <TIM_Base_SetConfig+0x8a>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a26      	ldr	r2, [pc, #152]	; (8005ffc <TIM_Base_SetConfig+0x118>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d003      	beq.n	8005f6e <TIM_Base_SetConfig+0x8a>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a25      	ldr	r2, [pc, #148]	; (8006000 <TIM_Base_SetConfig+0x11c>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d108      	bne.n	8005f80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	689a      	ldr	r2, [r3, #8]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a10      	ldr	r2, [pc, #64]	; (8005fe8 <TIM_Base_SetConfig+0x104>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d00f      	beq.n	8005fcc <TIM_Base_SetConfig+0xe8>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a11      	ldr	r2, [pc, #68]	; (8005ff4 <TIM_Base_SetConfig+0x110>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d00b      	beq.n	8005fcc <TIM_Base_SetConfig+0xe8>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a10      	ldr	r2, [pc, #64]	; (8005ff8 <TIM_Base_SetConfig+0x114>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d007      	beq.n	8005fcc <TIM_Base_SetConfig+0xe8>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a0f      	ldr	r2, [pc, #60]	; (8005ffc <TIM_Base_SetConfig+0x118>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d003      	beq.n	8005fcc <TIM_Base_SetConfig+0xe8>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a0e      	ldr	r2, [pc, #56]	; (8006000 <TIM_Base_SetConfig+0x11c>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d103      	bne.n	8005fd4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	691a      	ldr	r2, [r3, #16]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	615a      	str	r2, [r3, #20]
}
 8005fda:	bf00      	nop
 8005fdc:	3714      	adds	r7, #20
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	40012c00 	.word	0x40012c00
 8005fec:	40000400 	.word	0x40000400
 8005ff0:	40000800 	.word	0x40000800
 8005ff4:	40013400 	.word	0x40013400
 8005ff8:	40014000 	.word	0x40014000
 8005ffc:	40014400 	.word	0x40014400
 8006000:	40014800 	.word	0x40014800

08006004 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	f023 0201 	bic.w	r2, r3, #1
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f023 0303 	bic.w	r3, r3, #3
 800603e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	4313      	orrs	r3, r2
 8006048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f023 0302 	bic.w	r3, r3, #2
 8006050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	4313      	orrs	r3, r2
 800605a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a2c      	ldr	r2, [pc, #176]	; (8006110 <TIM_OC1_SetConfig+0x10c>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d00f      	beq.n	8006084 <TIM_OC1_SetConfig+0x80>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a2b      	ldr	r2, [pc, #172]	; (8006114 <TIM_OC1_SetConfig+0x110>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d00b      	beq.n	8006084 <TIM_OC1_SetConfig+0x80>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a2a      	ldr	r2, [pc, #168]	; (8006118 <TIM_OC1_SetConfig+0x114>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d007      	beq.n	8006084 <TIM_OC1_SetConfig+0x80>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a29      	ldr	r2, [pc, #164]	; (800611c <TIM_OC1_SetConfig+0x118>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d003      	beq.n	8006084 <TIM_OC1_SetConfig+0x80>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a28      	ldr	r2, [pc, #160]	; (8006120 <TIM_OC1_SetConfig+0x11c>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d10c      	bne.n	800609e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f023 0308 	bic.w	r3, r3, #8
 800608a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	4313      	orrs	r3, r2
 8006094:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f023 0304 	bic.w	r3, r3, #4
 800609c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a1b      	ldr	r2, [pc, #108]	; (8006110 <TIM_OC1_SetConfig+0x10c>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d00f      	beq.n	80060c6 <TIM_OC1_SetConfig+0xc2>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a1a      	ldr	r2, [pc, #104]	; (8006114 <TIM_OC1_SetConfig+0x110>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d00b      	beq.n	80060c6 <TIM_OC1_SetConfig+0xc2>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a19      	ldr	r2, [pc, #100]	; (8006118 <TIM_OC1_SetConfig+0x114>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d007      	beq.n	80060c6 <TIM_OC1_SetConfig+0xc2>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a18      	ldr	r2, [pc, #96]	; (800611c <TIM_OC1_SetConfig+0x118>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d003      	beq.n	80060c6 <TIM_OC1_SetConfig+0xc2>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a17      	ldr	r2, [pc, #92]	; (8006120 <TIM_OC1_SetConfig+0x11c>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d111      	bne.n	80060ea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	4313      	orrs	r3, r2
 80060de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	685a      	ldr	r2, [r3, #4]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	621a      	str	r2, [r3, #32]
}
 8006104:	bf00      	nop
 8006106:	371c      	adds	r7, #28
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	40012c00 	.word	0x40012c00
 8006114:	40013400 	.word	0x40013400
 8006118:	40014000 	.word	0x40014000
 800611c:	40014400 	.word	0x40014400
 8006120:	40014800 	.word	0x40014800

08006124 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	f023 0210 	bic.w	r2, r3, #16
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800615e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	021b      	lsls	r3, r3, #8
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	4313      	orrs	r3, r2
 800616a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f023 0320 	bic.w	r3, r3, #32
 8006172:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	011b      	lsls	r3, r3, #4
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	4313      	orrs	r3, r2
 800617e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a28      	ldr	r2, [pc, #160]	; (8006224 <TIM_OC2_SetConfig+0x100>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d003      	beq.n	8006190 <TIM_OC2_SetConfig+0x6c>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a27      	ldr	r2, [pc, #156]	; (8006228 <TIM_OC2_SetConfig+0x104>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d10d      	bne.n	80061ac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	011b      	lsls	r3, r3, #4
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a1d      	ldr	r2, [pc, #116]	; (8006224 <TIM_OC2_SetConfig+0x100>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d00f      	beq.n	80061d4 <TIM_OC2_SetConfig+0xb0>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a1c      	ldr	r2, [pc, #112]	; (8006228 <TIM_OC2_SetConfig+0x104>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d00b      	beq.n	80061d4 <TIM_OC2_SetConfig+0xb0>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a1b      	ldr	r2, [pc, #108]	; (800622c <TIM_OC2_SetConfig+0x108>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d007      	beq.n	80061d4 <TIM_OC2_SetConfig+0xb0>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a1a      	ldr	r2, [pc, #104]	; (8006230 <TIM_OC2_SetConfig+0x10c>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d003      	beq.n	80061d4 <TIM_OC2_SetConfig+0xb0>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a19      	ldr	r2, [pc, #100]	; (8006234 <TIM_OC2_SetConfig+0x110>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d113      	bne.n	80061fc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	621a      	str	r2, [r3, #32]
}
 8006216:	bf00      	nop
 8006218:	371c      	adds	r7, #28
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	40012c00 	.word	0x40012c00
 8006228:	40013400 	.word	0x40013400
 800622c:	40014000 	.word	0x40014000
 8006230:	40014400 	.word	0x40014400
 8006234:	40014800 	.word	0x40014800

08006238 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006238:	b480      	push	{r7}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f023 0303 	bic.w	r3, r3, #3
 8006272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	4313      	orrs	r3, r2
 800627c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	021b      	lsls	r3, r3, #8
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	4313      	orrs	r3, r2
 8006290:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a27      	ldr	r2, [pc, #156]	; (8006334 <TIM_OC3_SetConfig+0xfc>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d003      	beq.n	80062a2 <TIM_OC3_SetConfig+0x6a>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a26      	ldr	r2, [pc, #152]	; (8006338 <TIM_OC3_SetConfig+0x100>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d10d      	bne.n	80062be <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	021b      	lsls	r3, r3, #8
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a1c      	ldr	r2, [pc, #112]	; (8006334 <TIM_OC3_SetConfig+0xfc>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d00f      	beq.n	80062e6 <TIM_OC3_SetConfig+0xae>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a1b      	ldr	r2, [pc, #108]	; (8006338 <TIM_OC3_SetConfig+0x100>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d00b      	beq.n	80062e6 <TIM_OC3_SetConfig+0xae>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a1a      	ldr	r2, [pc, #104]	; (800633c <TIM_OC3_SetConfig+0x104>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d007      	beq.n	80062e6 <TIM_OC3_SetConfig+0xae>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a19      	ldr	r2, [pc, #100]	; (8006340 <TIM_OC3_SetConfig+0x108>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d003      	beq.n	80062e6 <TIM_OC3_SetConfig+0xae>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a18      	ldr	r2, [pc, #96]	; (8006344 <TIM_OC3_SetConfig+0x10c>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d113      	bne.n	800630e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	011b      	lsls	r3, r3, #4
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	4313      	orrs	r3, r2
 8006300:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	011b      	lsls	r3, r3, #4
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	4313      	orrs	r3, r2
 800630c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	685a      	ldr	r2, [r3, #4]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	621a      	str	r2, [r3, #32]
}
 8006328:	bf00      	nop
 800632a:	371c      	adds	r7, #28
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	40012c00 	.word	0x40012c00
 8006338:	40013400 	.word	0x40013400
 800633c:	40014000 	.word	0x40014000
 8006340:	40014400 	.word	0x40014400
 8006344:	40014800 	.word	0x40014800

08006348 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006348:	b480      	push	{r7}
 800634a:	b087      	sub	sp, #28
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	69db      	ldr	r3, [r3, #28]
 800636e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800637a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	021b      	lsls	r3, r3, #8
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	4313      	orrs	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006396:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	031b      	lsls	r3, r3, #12
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a28      	ldr	r2, [pc, #160]	; (8006448 <TIM_OC4_SetConfig+0x100>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d003      	beq.n	80063b4 <TIM_OC4_SetConfig+0x6c>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a27      	ldr	r2, [pc, #156]	; (800644c <TIM_OC4_SetConfig+0x104>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d10d      	bne.n	80063d0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	031b      	lsls	r3, r3, #12
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a1d      	ldr	r2, [pc, #116]	; (8006448 <TIM_OC4_SetConfig+0x100>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d00f      	beq.n	80063f8 <TIM_OC4_SetConfig+0xb0>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a1c      	ldr	r2, [pc, #112]	; (800644c <TIM_OC4_SetConfig+0x104>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d00b      	beq.n	80063f8 <TIM_OC4_SetConfig+0xb0>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a1b      	ldr	r2, [pc, #108]	; (8006450 <TIM_OC4_SetConfig+0x108>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d007      	beq.n	80063f8 <TIM_OC4_SetConfig+0xb0>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a1a      	ldr	r2, [pc, #104]	; (8006454 <TIM_OC4_SetConfig+0x10c>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d003      	beq.n	80063f8 <TIM_OC4_SetConfig+0xb0>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a19      	ldr	r2, [pc, #100]	; (8006458 <TIM_OC4_SetConfig+0x110>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d113      	bne.n	8006420 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063fe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006406:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	019b      	lsls	r3, r3, #6
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	4313      	orrs	r3, r2
 8006412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	019b      	lsls	r3, r3, #6
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	4313      	orrs	r3, r2
 800641e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	685a      	ldr	r2, [r3, #4]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	621a      	str	r2, [r3, #32]
}
 800643a:	bf00      	nop
 800643c:	371c      	adds	r7, #28
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	40012c00 	.word	0x40012c00
 800644c:	40013400 	.word	0x40013400
 8006450:	40014000 	.word	0x40014000
 8006454:	40014400 	.word	0x40014400
 8006458:	40014800 	.word	0x40014800

0800645c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800645c:	b480      	push	{r7}
 800645e:	b087      	sub	sp, #28
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800648a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800648e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	4313      	orrs	r3, r2
 8006498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80064a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	041b      	lsls	r3, r3, #16
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a17      	ldr	r2, [pc, #92]	; (8006510 <TIM_OC5_SetConfig+0xb4>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d00f      	beq.n	80064d6 <TIM_OC5_SetConfig+0x7a>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a16      	ldr	r2, [pc, #88]	; (8006514 <TIM_OC5_SetConfig+0xb8>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d00b      	beq.n	80064d6 <TIM_OC5_SetConfig+0x7a>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a15      	ldr	r2, [pc, #84]	; (8006518 <TIM_OC5_SetConfig+0xbc>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d007      	beq.n	80064d6 <TIM_OC5_SetConfig+0x7a>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a14      	ldr	r2, [pc, #80]	; (800651c <TIM_OC5_SetConfig+0xc0>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d003      	beq.n	80064d6 <TIM_OC5_SetConfig+0x7a>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a13      	ldr	r2, [pc, #76]	; (8006520 <TIM_OC5_SetConfig+0xc4>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d109      	bne.n	80064ea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	021b      	lsls	r3, r3, #8
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	685a      	ldr	r2, [r3, #4]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	621a      	str	r2, [r3, #32]
}
 8006504:	bf00      	nop
 8006506:	371c      	adds	r7, #28
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr
 8006510:	40012c00 	.word	0x40012c00
 8006514:	40013400 	.word	0x40013400
 8006518:	40014000 	.word	0x40014000
 800651c:	40014400 	.word	0x40014400
 8006520:	40014800 	.word	0x40014800

08006524 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006524:	b480      	push	{r7}
 8006526:	b087      	sub	sp, #28
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800654a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	021b      	lsls	r3, r3, #8
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	4313      	orrs	r3, r2
 8006562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800656a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	051b      	lsls	r3, r3, #20
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	4313      	orrs	r3, r2
 8006576:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a18      	ldr	r2, [pc, #96]	; (80065dc <TIM_OC6_SetConfig+0xb8>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d00f      	beq.n	80065a0 <TIM_OC6_SetConfig+0x7c>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a17      	ldr	r2, [pc, #92]	; (80065e0 <TIM_OC6_SetConfig+0xbc>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d00b      	beq.n	80065a0 <TIM_OC6_SetConfig+0x7c>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a16      	ldr	r2, [pc, #88]	; (80065e4 <TIM_OC6_SetConfig+0xc0>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d007      	beq.n	80065a0 <TIM_OC6_SetConfig+0x7c>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a15      	ldr	r2, [pc, #84]	; (80065e8 <TIM_OC6_SetConfig+0xc4>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d003      	beq.n	80065a0 <TIM_OC6_SetConfig+0x7c>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a14      	ldr	r2, [pc, #80]	; (80065ec <TIM_OC6_SetConfig+0xc8>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d109      	bne.n	80065b4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	695b      	ldr	r3, [r3, #20]
 80065ac:	029b      	lsls	r3, r3, #10
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	621a      	str	r2, [r3, #32]
}
 80065ce:	bf00      	nop
 80065d0:	371c      	adds	r7, #28
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	40012c00 	.word	0x40012c00
 80065e0:	40013400 	.word	0x40013400
 80065e4:	40014000 	.word	0x40014000
 80065e8:	40014400 	.word	0x40014400
 80065ec:	40014800 	.word	0x40014800

080065f0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b087      	sub	sp, #28
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
 80065fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	f023 0201 	bic.w	r2, r3, #1
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6a1b      	ldr	r3, [r3, #32]
 8006614:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	4a24      	ldr	r2, [pc, #144]	; (80066ac <TIM_TI1_SetConfig+0xbc>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d013      	beq.n	8006646 <TIM_TI1_SetConfig+0x56>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006624:	d00f      	beq.n	8006646 <TIM_TI1_SetConfig+0x56>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	4a21      	ldr	r2, [pc, #132]	; (80066b0 <TIM_TI1_SetConfig+0xc0>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d00b      	beq.n	8006646 <TIM_TI1_SetConfig+0x56>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	4a20      	ldr	r2, [pc, #128]	; (80066b4 <TIM_TI1_SetConfig+0xc4>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d007      	beq.n	8006646 <TIM_TI1_SetConfig+0x56>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	4a1f      	ldr	r2, [pc, #124]	; (80066b8 <TIM_TI1_SetConfig+0xc8>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d003      	beq.n	8006646 <TIM_TI1_SetConfig+0x56>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	4a1e      	ldr	r2, [pc, #120]	; (80066bc <TIM_TI1_SetConfig+0xcc>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d101      	bne.n	800664a <TIM_TI1_SetConfig+0x5a>
 8006646:	2301      	movs	r3, #1
 8006648:	e000      	b.n	800664c <TIM_TI1_SetConfig+0x5c>
 800664a:	2300      	movs	r3, #0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d008      	beq.n	8006662 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f023 0303 	bic.w	r3, r3, #3
 8006656:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4313      	orrs	r3, r2
 800665e:	617b      	str	r3, [r7, #20]
 8006660:	e003      	b.n	800666a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f043 0301 	orr.w	r3, r3, #1
 8006668:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006670:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	011b      	lsls	r3, r3, #4
 8006676:	b2db      	uxtb	r3, r3
 8006678:	697a      	ldr	r2, [r7, #20]
 800667a:	4313      	orrs	r3, r2
 800667c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	f023 030a 	bic.w	r3, r3, #10
 8006684:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	f003 030a 	and.w	r3, r3, #10
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	4313      	orrs	r3, r2
 8006690:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	621a      	str	r2, [r3, #32]
}
 800669e:	bf00      	nop
 80066a0:	371c      	adds	r7, #28
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	40012c00 	.word	0x40012c00
 80066b0:	40000400 	.word	0x40000400
 80066b4:	40000800 	.word	0x40000800
 80066b8:	40013400 	.word	0x40013400
 80066bc:	40014000 	.word	0x40014000

080066c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b087      	sub	sp, #28
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6a1b      	ldr	r3, [r3, #32]
 80066d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	f023 0201 	bic.w	r2, r3, #1
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	011b      	lsls	r3, r3, #4
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f023 030a 	bic.w	r3, r3, #10
 80066fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	4313      	orrs	r3, r2
 8006704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	621a      	str	r2, [r3, #32]
}
 8006712:	bf00      	nop
 8006714:	371c      	adds	r7, #28
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800671e:	b480      	push	{r7}
 8006720:	b087      	sub	sp, #28
 8006722:	af00      	add	r7, sp, #0
 8006724:	60f8      	str	r0, [r7, #12]
 8006726:	60b9      	str	r1, [r7, #8]
 8006728:	607a      	str	r2, [r7, #4]
 800672a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6a1b      	ldr	r3, [r3, #32]
 8006730:	f023 0210 	bic.w	r2, r3, #16
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6a1b      	ldr	r3, [r3, #32]
 8006742:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800674a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	021b      	lsls	r3, r3, #8
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	4313      	orrs	r3, r2
 8006754:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800675c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	031b      	lsls	r3, r3, #12
 8006762:	b29b      	uxth	r3, r3
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	4313      	orrs	r3, r2
 8006768:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006770:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	011b      	lsls	r3, r3, #4
 8006776:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800677a:	693a      	ldr	r2, [r7, #16]
 800677c:	4313      	orrs	r3, r2
 800677e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	621a      	str	r2, [r3, #32]
}
 800678c:	bf00      	nop
 800678e:	371c      	adds	r7, #28
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006798:	b480      	push	{r7}
 800679a:	b087      	sub	sp, #28
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	f023 0210 	bic.w	r2, r3, #16
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	031b      	lsls	r3, r3, #12
 80067c8:	697a      	ldr	r2, [r7, #20]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	011b      	lsls	r3, r3, #4
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	4313      	orrs	r3, r2
 80067de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	621a      	str	r2, [r3, #32]
}
 80067ec:	bf00      	nop
 80067ee:	371c      	adds	r7, #28
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b087      	sub	sp, #28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
 8006804:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	69db      	ldr	r3, [r3, #28]
 8006816:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6a1b      	ldr	r3, [r3, #32]
 800681c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	f023 0303 	bic.w	r3, r3, #3
 8006824:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4313      	orrs	r3, r2
 800682c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006834:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	011b      	lsls	r3, r3, #4
 800683a:	b2db      	uxtb	r3, r3
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	4313      	orrs	r3, r2
 8006840:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006848:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	021b      	lsls	r3, r3, #8
 800684e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	4313      	orrs	r3, r2
 8006856:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	621a      	str	r2, [r3, #32]
}
 8006864:	bf00      	nop
 8006866:	371c      	adds	r7, #28
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006870:	b480      	push	{r7}
 8006872:	b087      	sub	sp, #28
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
 800687c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	69db      	ldr	r3, [r3, #28]
 800688e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6a1b      	ldr	r3, [r3, #32]
 8006894:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800689c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	021b      	lsls	r3, r3, #8
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068ae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	031b      	lsls	r3, r3, #12
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80068c2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	031b      	lsls	r3, r3, #12
 80068c8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	621a      	str	r2, [r3, #32]
}
 80068de:	bf00      	nop
 80068e0:	371c      	adds	r7, #28
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b085      	sub	sp, #20
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
 80068f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006904:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	4313      	orrs	r3, r2
 800690c:	f043 0307 	orr.w	r3, r3, #7
 8006910:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	609a      	str	r2, [r3, #8]
}
 8006918:	bf00      	nop
 800691a:	3714      	adds	r7, #20
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006924:	b480      	push	{r7}
 8006926:	b087      	sub	sp, #28
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
 8006930:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800693e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	021a      	lsls	r2, r3, #8
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	431a      	orrs	r2, r3
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	4313      	orrs	r3, r2
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	4313      	orrs	r3, r2
 8006950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	609a      	str	r2, [r3, #8]
}
 8006958:	bf00      	nop
 800695a:	371c      	adds	r7, #28
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006964:	b480      	push	{r7}
 8006966:	b087      	sub	sp, #28
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	f003 031f 	and.w	r3, r3, #31
 8006976:	2201      	movs	r2, #1
 8006978:	fa02 f303 	lsl.w	r3, r2, r3
 800697c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6a1a      	ldr	r2, [r3, #32]
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	43db      	mvns	r3, r3
 8006986:	401a      	ands	r2, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6a1a      	ldr	r2, [r3, #32]
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	f003 031f 	and.w	r3, r3, #31
 8006996:	6879      	ldr	r1, [r7, #4]
 8006998:	fa01 f303 	lsl.w	r3, r1, r3
 800699c:	431a      	orrs	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	621a      	str	r2, [r3, #32]
}
 80069a2:	bf00      	nop
 80069a4:	371c      	adds	r7, #28
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
	...

080069b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d101      	bne.n	80069c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069c4:	2302      	movs	r3, #2
 80069c6:	e065      	b.n	8006a94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2202      	movs	r2, #2
 80069d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a2c      	ldr	r2, [pc, #176]	; (8006aa0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d004      	beq.n	80069fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a2b      	ldr	r2, [pc, #172]	; (8006aa4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d108      	bne.n	8006a0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a1b      	ldr	r2, [pc, #108]	; (8006aa0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d018      	beq.n	8006a68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a3e:	d013      	beq.n	8006a68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a18      	ldr	r2, [pc, #96]	; (8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d00e      	beq.n	8006a68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a17      	ldr	r2, [pc, #92]	; (8006aac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d009      	beq.n	8006a68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a12      	ldr	r2, [pc, #72]	; (8006aa4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d004      	beq.n	8006a68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a13      	ldr	r2, [pc, #76]	; (8006ab0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d10c      	bne.n	8006a82 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	68ba      	ldr	r2, [r7, #8]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3714      	adds	r7, #20
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr
 8006aa0:	40012c00 	.word	0x40012c00
 8006aa4:	40013400 	.word	0x40013400
 8006aa8:	40000400 	.word	0x40000400
 8006aac:	40000800 	.word	0x40000800
 8006ab0:	40014000 	.word	0x40014000

08006ab4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d101      	bne.n	8006ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006acc:	2302      	movs	r3, #2
 8006ace:	e087      	b.n	8006be0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	695b      	ldr	r3, [r3, #20]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b36:	4313      	orrs	r3, r2
 8006b38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	041b      	lsls	r3, r3, #16
 8006b46:	4313      	orrs	r3, r2
 8006b48:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a27      	ldr	r2, [pc, #156]	; (8006bec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d004      	beq.n	8006b5e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a25      	ldr	r2, [pc, #148]	; (8006bf0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d106      	bne.n	8006b6c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	69db      	ldr	r3, [r3, #28]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a1e      	ldr	r2, [pc, #120]	; (8006bec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d004      	beq.n	8006b80 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a1d      	ldr	r2, [pc, #116]	; (8006bf0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d126      	bne.n	8006bce <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8a:	051b      	lsls	r3, r3, #20
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a0e      	ldr	r2, [pc, #56]	; (8006bec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d004      	beq.n	8006bc0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a0d      	ldr	r2, [pc, #52]	; (8006bf0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d106      	bne.n	8006bce <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bde:	2300      	movs	r3, #0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3714      	adds	r7, #20
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr
 8006bec:	40012c00 	.word	0x40012c00
 8006bf0:	40013400 	.word	0x40013400

08006bf4 <HAL_TIMEx_TISelection>:
  *         (**) Register not available in all devices.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_TIMEx_TISelection(TIM_HandleTypeDef *htim, uint32_t TISelection, uint32_t Channel)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b087      	sub	sp, #28
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c00:	2300      	movs	r3, #0
 8006c02:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_TIM_TISEL_TIX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_TISEL(TISelection));

  __HAL_LOCK(htim);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d101      	bne.n	8006c12 <HAL_TIMEx_TISelection+0x1e>
 8006c0e:	2302      	movs	r3, #2
 8006c10:	e073      	b.n	8006cfa <HAL_TIMEx_TISelection+0x106>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b0c      	cmp	r3, #12
 8006c1e:	d864      	bhi.n	8006cea <HAL_TIMEx_TISelection+0xf6>
 8006c20:	a201      	add	r2, pc, #4	; (adr r2, 8006c28 <HAL_TIMEx_TISelection+0x34>)
 8006c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c26:	bf00      	nop
 8006c28:	08006c5d 	.word	0x08006c5d
 8006c2c:	08006ceb 	.word	0x08006ceb
 8006c30:	08006ceb 	.word	0x08006ceb
 8006c34:	08006ceb 	.word	0x08006ceb
 8006c38:	08006ca9 	.word	0x08006ca9
 8006c3c:	08006ceb 	.word	0x08006ceb
 8006c40:	08006ceb 	.word	0x08006ceb
 8006c44:	08006ceb 	.word	0x08006ceb
 8006c48:	08006cbf 	.word	0x08006cbf
 8006c4c:	08006ceb 	.word	0x08006ceb
 8006c50:	08006ceb 	.word	0x08006ceb
 8006c54:	08006ceb 	.word	0x08006ceb
 8006c58:	08006cd5 	.word	0x08006cd5

  switch (Channel)
  {
    case TIM_CHANNEL_1:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI1SEL, TISelection);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c62:	f023 010f 	bic.w	r1, r3, #15
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68ba      	ldr	r2, [r7, #8]
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* If required, set OR bit to request HSE/32 clock */
      if (IS_TIM_HSE32_INSTANCE(htim->Instance))
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a24      	ldr	r2, [pc, #144]	; (8006d08 <HAL_TIMEx_TISelection+0x114>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d004      	beq.n	8006c84 <HAL_TIMEx_TISelection+0x90>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a23      	ldr	r2, [pc, #140]	; (8006d0c <HAL_TIMEx_TISelection+0x118>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d108      	bne.n	8006c96 <HAL_TIMEx_TISelection+0xa2>
      {
        SET_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f042 0201 	orr.w	r2, r2, #1
 8006c92:	669a      	str	r2, [r3, #104]	; 0x68
      }
      else
      {
        CLEAR_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
      }
      break;
 8006c94:	e02c      	b.n	8006cf0 <HAL_TIMEx_TISelection+0xfc>
        CLEAR_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f022 0201 	bic.w	r2, r2, #1
 8006ca4:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006ca6:	e023      	b.n	8006cf0 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_2:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI2SEL, TISelection);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cae:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68ba      	ldr	r2, [r7, #8]
 8006cb8:	430a      	orrs	r2, r1
 8006cba:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8006cbc:	e018      	b.n	8006cf0 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_3:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI3SEL, TISelection);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cc4:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8006cd2:	e00d      	b.n	8006cf0 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_4:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI4SEL, TISelection);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cda:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	430a      	orrs	r2, r1
 8006ce6:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8006ce8:	e002      	b.n	8006cf0 <HAL_TIMEx_TISelection+0xfc>
    default:
      status = HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	75fb      	strb	r3, [r7, #23]
      break;
 8006cee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	371c      	adds	r7, #28
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	40014400 	.word	0x40014400
 8006d0c:	40014800 	.word	0x40014800

08006d10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006d68:	bf00      	nop
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006d90:	bf00      	nop
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <__libc_init_array>:
 8006d9c:	b570      	push	{r4, r5, r6, lr}
 8006d9e:	4d0d      	ldr	r5, [pc, #52]	; (8006dd4 <__libc_init_array+0x38>)
 8006da0:	4c0d      	ldr	r4, [pc, #52]	; (8006dd8 <__libc_init_array+0x3c>)
 8006da2:	1b64      	subs	r4, r4, r5
 8006da4:	10a4      	asrs	r4, r4, #2
 8006da6:	2600      	movs	r6, #0
 8006da8:	42a6      	cmp	r6, r4
 8006daa:	d109      	bne.n	8006dc0 <__libc_init_array+0x24>
 8006dac:	4d0b      	ldr	r5, [pc, #44]	; (8006ddc <__libc_init_array+0x40>)
 8006dae:	4c0c      	ldr	r4, [pc, #48]	; (8006de0 <__libc_init_array+0x44>)
 8006db0:	f000 f820 	bl	8006df4 <_init>
 8006db4:	1b64      	subs	r4, r4, r5
 8006db6:	10a4      	asrs	r4, r4, #2
 8006db8:	2600      	movs	r6, #0
 8006dba:	42a6      	cmp	r6, r4
 8006dbc:	d105      	bne.n	8006dca <__libc_init_array+0x2e>
 8006dbe:	bd70      	pop	{r4, r5, r6, pc}
 8006dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dc4:	4798      	blx	r3
 8006dc6:	3601      	adds	r6, #1
 8006dc8:	e7ee      	b.n	8006da8 <__libc_init_array+0xc>
 8006dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dce:	4798      	blx	r3
 8006dd0:	3601      	adds	r6, #1
 8006dd2:	e7f2      	b.n	8006dba <__libc_init_array+0x1e>
 8006dd4:	08006e1c 	.word	0x08006e1c
 8006dd8:	08006e1c 	.word	0x08006e1c
 8006ddc:	08006e1c 	.word	0x08006e1c
 8006de0:	08006e20 	.word	0x08006e20

08006de4 <memset>:
 8006de4:	4402      	add	r2, r0
 8006de6:	4603      	mov	r3, r0
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d100      	bne.n	8006dee <memset+0xa>
 8006dec:	4770      	bx	lr
 8006dee:	f803 1b01 	strb.w	r1, [r3], #1
 8006df2:	e7f9      	b.n	8006de8 <memset+0x4>

08006df4 <_init>:
 8006df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006df6:	bf00      	nop
 8006df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dfa:	bc08      	pop	{r3}
 8006dfc:	469e      	mov	lr, r3
 8006dfe:	4770      	bx	lr

08006e00 <_fini>:
 8006e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e02:	bf00      	nop
 8006e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e06:	bc08      	pop	{r3}
 8006e08:	469e      	mov	lr, r3
 8006e0a:	4770      	bx	lr
