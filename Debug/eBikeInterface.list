
eBikeInterface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c6c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08006e44  08006e44  00016e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e54  08006e54  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08006e54  08006e54  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e54  08006e54  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e54  08006e54  00016e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e58  08006e58  00016e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  20000014  08006e70  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08006e70  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015493  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002714  00000000  00000000  000354d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  00037bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001280  00000000  00000000  00038f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fa99  00000000  00000000  0003a208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013432  00000000  00000000  00059ca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7e8b  00000000  00000000  0006d0d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00144f5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000545c  00000000  00000000  00144fb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000014 	.word	0x20000014
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006e2c 	.word	0x08006e2c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000018 	.word	0x20000018
 8000214:	08006e2c 	.word	0x08006e2c

08000218 <HAL_TIM_PeriodElapsedCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc);
void init_ADC_Channel(ADC_ChannelConfTypeDef* ADCChannel);
uint8_t refreshPPM(uint16_t value);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	if (htim == &htim6)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	4a10      	ldr	r2, [pc, #64]	; (8000264 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000224:	4293      	cmp	r3, r2
 8000226:	d105      	bne.n	8000234 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		refreshPPM(AnalogThrottleValue);
 8000228:	4b0f      	ldr	r3, [pc, #60]	; (8000268 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800022a:	881b      	ldrh	r3, [r3, #0]
 800022c:	4618      	mov	r0, r3
 800022e:	f000 fe29 	bl	8000e84 <refreshPPM>
			PAS_Detected = 0;
		}
		else if (PASGotCapture!=2) PASGotCapture = 0;

	}
}
 8000232:	e012      	b.n	800025a <HAL_TIM_PeriodElapsedCallback+0x42>
	else if (htim == &htim15)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	4a0d      	ldr	r2, [pc, #52]	; (800026c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000238:	4293      	cmp	r3, r2
 800023a:	d10e      	bne.n	800025a <HAL_TIM_PeriodElapsedCallback+0x42>
		if (PASGotCapture == 0)	//Check if capture has been detected. If not stop PAS, if detected then reset it until next timeout check.
 800023c:	4b0c      	ldr	r3, [pc, #48]	; (8000270 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d103      	bne.n	800024c <HAL_TIM_PeriodElapsedCallback+0x34>
			PAS_Detected = 0;
 8000244:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000246:	2200      	movs	r2, #0
 8000248:	701a      	strb	r2, [r3, #0]
}
 800024a:	e006      	b.n	800025a <HAL_TIM_PeriodElapsedCallback+0x42>
		else if (PASGotCapture!=2) PASGotCapture = 0;
 800024c:	4b08      	ldr	r3, [pc, #32]	; (8000270 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	2b02      	cmp	r3, #2
 8000252:	d002      	beq.n	800025a <HAL_TIM_PeriodElapsedCallback+0x42>
 8000254:	4b06      	ldr	r3, [pc, #24]	; (8000270 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000256:	2200      	movs	r2, #0
 8000258:	701a      	strb	r2, [r3, #0]
}
 800025a:	bf00      	nop
 800025c:	3708      	adds	r7, #8
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	200001c4 	.word	0x200001c4
 8000268:	20000072 	.word	0x20000072
 800026c:	20000154 	.word	0x20000154
 8000270:	20000000 	.word	0x20000000
 8000274:	20000040 	.word	0x20000040

08000278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800027c:	f001 f8f1 	bl	8001462 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000280:	f000 f854 	bl	800032c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000284:	f000 fbb6 	bl	80009f4 <MX_GPIO_Init>
  MX_ADC2_Init();
 8000288:	f000 f8a8 	bl	80003dc <MX_ADC2_Init>
  MX_DAC1_Init();
 800028c:	f000 f936 	bl	80004fc <MX_DAC1_Init>
  MX_TIM2_Init();
 8000290:	f000 fa58 	bl	8000744 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000294:	f000 f9a6 	bl	80005e4 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000298:	f000 fad0 	bl	800083c <MX_TIM4_Init>
  MX_COMP1_Init();
 800029c:	f000 f906 	bl	80004ac <MX_COMP1_Init>
  MX_DAC3_Init();
 80002a0:	f000 f966 	bl	8000570 <MX_DAC3_Init>
  MX_TIM6_Init();
 80002a4:	f000 fb18 	bl	80008d8 <MX_TIM6_Init>
  MX_TIM15_Init();
 80002a8:	f000 fb4c 	bl	8000944 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  // Wheel speed detection
  HAL_COMP_Start(&hcomp1);
 80002ac:	4816      	ldr	r0, [pc, #88]	; (8000308 <main+0x90>)
 80002ae:	f003 f84f 	bl	8003350 <HAL_COMP_Start>
  HAL_TIM_Base_Start(&htim2);
 80002b2:	4816      	ldr	r0, [pc, #88]	; (800030c <main+0x94>)
 80002b4:	f004 fdf4 	bl	8004ea0 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 80002b8:	2104      	movs	r1, #4
 80002ba:	4814      	ldr	r0, [pc, #80]	; (800030c <main+0x94>)
 80002bc:	f005 f876 	bl	80053ac <HAL_TIM_IC_Start_IT>

  //Pedal Sensing input capture and timeout start
  HAL_TIM_Base_Start_IT(&htim15);
 80002c0:	4813      	ldr	r0, [pc, #76]	; (8000310 <main+0x98>)
 80002c2:	f004 fe4f 	bl	8004f64 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 80002c6:	2100      	movs	r1, #0
 80002c8:	4811      	ldr	r0, [pc, #68]	; (8000310 <main+0x98>)
 80002ca:	f005 f86f 	bl	80053ac <HAL_TIM_IC_Start_IT>

  //output PPM start. No valid signal until throttle detected.(PWM with 5ms period. Valid tHigh 500 / 2500Âµs)
  htim1.Instance->CCR1 = 0;
 80002ce:	4b11      	ldr	r3, [pc, #68]	; (8000314 <main+0x9c>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	2200      	movs	r2, #0
 80002d4:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_Base_Start(&htim1);
 80002d6:	480f      	ldr	r0, [pc, #60]	; (8000314 <main+0x9c>)
 80002d8:	f004 fde2 	bl	8004ea0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80002dc:	2100      	movs	r1, #0
 80002de:	480d      	ldr	r0, [pc, #52]	; (8000314 <main+0x9c>)
 80002e0:	f004 ff0c 	bl	80050fc <HAL_TIM_PWM_Start>

  // Throttle and Temperature measurement init (Select correct first channel)
  init_ADC_Channel(&ADC2ChannelConfig);
 80002e4:	480c      	ldr	r0, [pc, #48]	; (8000318 <main+0xa0>)
 80002e6:	f000 fd81 	bl	8000dec <init_ADC_Channel>
  HAL_ADC_Start_IT(&hadc2);
 80002ea:	480c      	ldr	r0, [pc, #48]	; (800031c <main+0xa4>)
 80002ec:	f001 fd64 	bl	8001db8 <HAL_ADC_Start_IT>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 80002f0:	2110      	movs	r1, #16
 80002f2:	480b      	ldr	r0, [pc, #44]	; (8000320 <main+0xa8>)
 80002f4:	f003 f9a5 	bl	8003642 <HAL_DAC_Start>
  HAL_TIM_Base_Start(&htim4);
 80002f8:	480a      	ldr	r0, [pc, #40]	; (8000324 <main+0xac>)
 80002fa:	f004 fdd1 	bl	8004ea0 <HAL_TIM_Base_Start>

  // Start task management timer (10ms period, to refresh output value)
  HAL_TIM_Base_Start_IT(&htim6);
 80002fe:	480a      	ldr	r0, [pc, #40]	; (8000328 <main+0xb0>)
 8000300:	f004 fe30 	bl	8004f64 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000304:	e7fe      	b.n	8000304 <main+0x8c>
 8000306:	bf00      	nop
 8000308:	200001a0 	.word	0x200001a0
 800030c:	2000025c 	.word	0x2000025c
 8000310:	20000154 	.word	0x20000154
 8000314:	20000210 	.word	0x20000210
 8000318:	20000050 	.word	0x20000050
 800031c:	200000e8 	.word	0x200000e8
 8000320:	200000d4 	.word	0x200000d4
 8000324:	20000088 	.word	0x20000088
 8000328:	200001c4 	.word	0x200001c4

0800032c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b0a4      	sub	sp, #144	; 0x90
 8000330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000332:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000336:	2238      	movs	r2, #56	; 0x38
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f006 fd6e 	bl	8006e1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000340:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000344:	2200      	movs	r2, #0
 8000346:	601a      	str	r2, [r3, #0]
 8000348:	605a      	str	r2, [r3, #4]
 800034a:	609a      	str	r2, [r3, #8]
 800034c:	60da      	str	r2, [r3, #12]
 800034e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000350:	463b      	mov	r3, r7
 8000352:	2244      	movs	r2, #68	; 0x44
 8000354:	2100      	movs	r1, #0
 8000356:	4618      	mov	r0, r3
 8000358:	f006 fd60 	bl	8006e1c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800035c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000360:	f003 fd9a 	bl	8003e98 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000364:	2302      	movs	r3, #2
 8000366:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000368:	f44f 7380 	mov.w	r3, #256	; 0x100
 800036c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800036e:	2340      	movs	r3, #64	; 0x40
 8000370:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000372:	2300      	movs	r3, #0
 8000374:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000376:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800037a:	4618      	mov	r0, r3
 800037c:	f003 fe40 	bl	8004000 <HAL_RCC_OscConfig>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000386:	f000 fddb 	bl	8000f40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038a:	230f      	movs	r3, #15
 800038c:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800038e:	2301      	movs	r3, #1
 8000390:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039a:	2300      	movs	r3, #0
 800039c:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800039e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003a2:	2100      	movs	r1, #0
 80003a4:	4618      	mov	r0, r3
 80003a6:	f004 f943 	bl	8004630 <HAL_RCC_ClockConfig>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80003b0:	f000 fdc6 	bl	8000f40 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80003b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003b8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80003ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80003be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003c0:	463b      	mov	r3, r7
 80003c2:	4618      	mov	r0, r3
 80003c4:	f004 fb24 	bl	8004a10 <HAL_RCCEx_PeriphCLKConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80003ce:	f000 fdb7 	bl	8000f40 <Error_Handler>
  }
}
 80003d2:	bf00      	nop
 80003d4:	3790      	adds	r7, #144	; 0x90
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
	...

080003dc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b088      	sub	sp, #32
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003e2:	463b      	mov	r3, r7
 80003e4:	2220      	movs	r2, #32
 80003e6:	2100      	movs	r1, #0
 80003e8:	4618      	mov	r0, r3
 80003ea:	f006 fd17 	bl	8006e1c <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80003ee:	4b2c      	ldr	r3, [pc, #176]	; (80004a0 <MX_ADC2_Init+0xc4>)
 80003f0:	4a2c      	ldr	r2, [pc, #176]	; (80004a4 <MX_ADC2_Init+0xc8>)
 80003f2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80003f4:	4b2a      	ldr	r3, [pc, #168]	; (80004a0 <MX_ADC2_Init+0xc4>)
 80003f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80003fa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80003fc:	4b28      	ldr	r3, [pc, #160]	; (80004a0 <MX_ADC2_Init+0xc4>)
 80003fe:	2200      	movs	r2, #0
 8000400:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000402:	4b27      	ldr	r3, [pc, #156]	; (80004a0 <MX_ADC2_Init+0xc4>)
 8000404:	2200      	movs	r2, #0
 8000406:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000408:	4b25      	ldr	r3, [pc, #148]	; (80004a0 <MX_ADC2_Init+0xc4>)
 800040a:	2200      	movs	r2, #0
 800040c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800040e:	4b24      	ldr	r3, [pc, #144]	; (80004a0 <MX_ADC2_Init+0xc4>)
 8000410:	2200      	movs	r2, #0
 8000412:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000414:	4b22      	ldr	r3, [pc, #136]	; (80004a0 <MX_ADC2_Init+0xc4>)
 8000416:	2204      	movs	r2, #4
 8000418:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800041a:	4b21      	ldr	r3, [pc, #132]	; (80004a0 <MX_ADC2_Init+0xc4>)
 800041c:	2200      	movs	r2, #0
 800041e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000420:	4b1f      	ldr	r3, [pc, #124]	; (80004a0 <MX_ADC2_Init+0xc4>)
 8000422:	2200      	movs	r2, #0
 8000424:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000426:	4b1e      	ldr	r3, [pc, #120]	; (80004a0 <MX_ADC2_Init+0xc4>)
 8000428:	2201      	movs	r2, #1
 800042a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800042c:	4b1c      	ldr	r3, [pc, #112]	; (80004a0 <MX_ADC2_Init+0xc4>)
 800042e:	2200      	movs	r2, #0
 8000430:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8000434:	4b1a      	ldr	r3, [pc, #104]	; (80004a0 <MX_ADC2_Init+0xc4>)
 8000436:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 800043a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800043c:	4b18      	ldr	r3, [pc, #96]	; (80004a0 <MX_ADC2_Init+0xc4>)
 800043e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000442:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000444:	4b16      	ldr	r3, [pc, #88]	; (80004a0 <MX_ADC2_Init+0xc4>)
 8000446:	2200      	movs	r2, #0
 8000448:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800044c:	4b14      	ldr	r3, [pc, #80]	; (80004a0 <MX_ADC2_Init+0xc4>)
 800044e:	2200      	movs	r2, #0
 8000450:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000452:	4b13      	ldr	r3, [pc, #76]	; (80004a0 <MX_ADC2_Init+0xc4>)
 8000454:	2200      	movs	r2, #0
 8000456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800045a:	4811      	ldr	r0, [pc, #68]	; (80004a0 <MX_ADC2_Init+0xc4>)
 800045c:	f001 fb22 	bl	8001aa4 <HAL_ADC_Init>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000466:	f000 fd6b 	bl	8000f40 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800046a:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <MX_ADC2_Init+0xcc>)
 800046c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800046e:	2306      	movs	r3, #6
 8000470:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000472:	2302      	movs	r3, #2
 8000474:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000476:	237f      	movs	r3, #127	; 0x7f
 8000478:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800047a:	2304      	movs	r3, #4
 800047c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800047e:	2300      	movs	r3, #0
 8000480:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000482:	463b      	mov	r3, r7
 8000484:	4619      	mov	r1, r3
 8000486:	4806      	ldr	r0, [pc, #24]	; (80004a0 <MX_ADC2_Init+0xc4>)
 8000488:	f002 f83e 	bl	8002508 <HAL_ADC_ConfigChannel>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000492:	f000 fd55 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000496:	bf00      	nop
 8000498:	3720      	adds	r7, #32
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	200000e8 	.word	0x200000e8
 80004a4:	50000100 	.word	0x50000100
 80004a8:	04300002 	.word	0x04300002

080004ac <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 80004b0:	4b10      	ldr	r3, [pc, #64]	; (80004f4 <MX_COMP1_Init+0x48>)
 80004b2:	4a11      	ldr	r2, [pc, #68]	; (80004f8 <MX_COMP1_Init+0x4c>)
 80004b4:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80004b6:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <MX_COMP1_Init+0x48>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_1_4VREFINT;
 80004bc:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <MX_COMP1_Init+0x48>)
 80004be:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80004c2:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80004c4:	4b0b      	ldr	r3, [pc, #44]	; (80004f4 <MX_COMP1_Init+0x48>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_50MV;
 80004ca:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <MX_COMP1_Init+0x48>)
 80004cc:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80004d0:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80004d2:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <MX_COMP1_Init+0x48>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <MX_COMP1_Init+0x48>)
 80004da:	2212      	movs	r2, #18
 80004dc:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80004de:	4805      	ldr	r0, [pc, #20]	; (80004f4 <MX_COMP1_Init+0x48>)
 80004e0:	f002 fe5a 	bl	8003198 <HAL_COMP_Init>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_COMP1_Init+0x42>
  {
    Error_Handler();
 80004ea:	f000 fd29 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	200001a0 	.word	0x200001a0
 80004f8:	40010200 	.word	0x40010200

080004fc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08c      	sub	sp, #48	; 0x30
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000502:	463b      	mov	r3, r7
 8000504:	2230      	movs	r2, #48	; 0x30
 8000506:	2100      	movs	r1, #0
 8000508:	4618      	mov	r0, r3
 800050a:	f006 fc87 	bl	8006e1c <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800050e:	4b16      	ldr	r3, [pc, #88]	; (8000568 <MX_DAC1_Init+0x6c>)
 8000510:	4a16      	ldr	r2, [pc, #88]	; (800056c <MX_DAC1_Init+0x70>)
 8000512:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000514:	4814      	ldr	r0, [pc, #80]	; (8000568 <MX_DAC1_Init+0x6c>)
 8000516:	f003 f872 	bl	80035fe <HAL_DAC_Init>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000520:	f000 fd0e 	bl	8000f40 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000524:	2302      	movs	r3, #2
 8000526:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000528:	2300      	movs	r3, #0
 800052a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800052c:	2300      	movs	r3, #0
 800052e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000530:	2300      	movs	r3, #0
 8000532:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 8000534:	2316      	movs	r3, #22
 8000536:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000538:	2300      	movs	r3, #0
 800053a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800053c:	2300      	movs	r3, #0
 800053e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000540:	2301      	movs	r3, #1
 8000542:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000544:	2300      	movs	r3, #0
 8000546:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000548:	463b      	mov	r3, r7
 800054a:	2210      	movs	r2, #16
 800054c:	4619      	mov	r1, r3
 800054e:	4806      	ldr	r0, [pc, #24]	; (8000568 <MX_DAC1_Init+0x6c>)
 8000550:	f003 f956 	bl	8003800 <HAL_DAC_ConfigChannel>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800055a:	f000 fcf1 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800055e:	bf00      	nop
 8000560:	3730      	adds	r7, #48	; 0x30
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	200000d4 	.word	0x200000d4
 800056c:	50000800 	.word	0x50000800

08000570 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08c      	sub	sp, #48	; 0x30
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000576:	463b      	mov	r3, r7
 8000578:	2230      	movs	r2, #48	; 0x30
 800057a:	2100      	movs	r1, #0
 800057c:	4618      	mov	r0, r3
 800057e:	f006 fc4d 	bl	8006e1c <memset>
  /* USER CODE BEGIN DAC3_Init 1 */

  /* USER CODE END DAC3_Init 1 */
  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8000582:	4b16      	ldr	r3, [pc, #88]	; (80005dc <MX_DAC3_Init+0x6c>)
 8000584:	4a16      	ldr	r2, [pc, #88]	; (80005e0 <MX_DAC3_Init+0x70>)
 8000586:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8000588:	4814      	ldr	r0, [pc, #80]	; (80005dc <MX_DAC3_Init+0x6c>)
 800058a:	f003 f838 	bl	80035fe <HAL_DAC_Init>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8000594:	f000 fcd4 	bl	8000f40 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000598:	2302      	movs	r3, #2
 800059a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800059c:	2300      	movs	r3, #0
 800059e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80005a0:	2300      	movs	r3, #0
 80005a2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80005b0:	2302      	movs	r3, #2
 80005b2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80005b4:	2302      	movs	r3, #2
 80005b6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80005bc:	463b      	mov	r3, r7
 80005be:	2200      	movs	r2, #0
 80005c0:	4619      	mov	r1, r3
 80005c2:	4806      	ldr	r0, [pc, #24]	; (80005dc <MX_DAC3_Init+0x6c>)
 80005c4:	f003 f91c 	bl	8003800 <HAL_DAC_ConfigChannel>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 80005ce:	f000 fcb7 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 80005d2:	bf00      	nop
 80005d4:	3730      	adds	r7, #48	; 0x30
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000074 	.word	0x20000074
 80005e0:	50001000 	.word	0x50001000

080005e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b09c      	sub	sp, #112	; 0x70
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000604:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
 8000614:	615a      	str	r2, [r3, #20]
 8000616:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	2234      	movs	r2, #52	; 0x34
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f006 fbfc 	bl	8006e1c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000624:	4b45      	ldr	r3, [pc, #276]	; (800073c <MX_TIM1_Init+0x158>)
 8000626:	4a46      	ldr	r2, [pc, #280]	; (8000740 <MX_TIM1_Init+0x15c>)
 8000628:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 800062a:	4b44      	ldr	r3, [pc, #272]	; (800073c <MX_TIM1_Init+0x158>)
 800062c:	220f      	movs	r2, #15
 800062e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000630:	4b42      	ldr	r3, [pc, #264]	; (800073c <MX_TIM1_Init+0x158>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 8000636:	4b41      	ldr	r3, [pc, #260]	; (800073c <MX_TIM1_Init+0x158>)
 8000638:	f241 3288 	movw	r2, #5000	; 0x1388
 800063c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800063e:	4b3f      	ldr	r3, [pc, #252]	; (800073c <MX_TIM1_Init+0x158>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000644:	4b3d      	ldr	r3, [pc, #244]	; (800073c <MX_TIM1_Init+0x158>)
 8000646:	2200      	movs	r2, #0
 8000648:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800064a:	4b3c      	ldr	r3, [pc, #240]	; (800073c <MX_TIM1_Init+0x158>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000650:	483a      	ldr	r0, [pc, #232]	; (800073c <MX_TIM1_Init+0x158>)
 8000652:	f004 fbcd 	bl	8004df0 <HAL_TIM_Base_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800065c:	f000 fc70 	bl	8000f40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000664:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000666:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800066a:	4619      	mov	r1, r3
 800066c:	4833      	ldr	r0, [pc, #204]	; (800073c <MX_TIM1_Init+0x158>)
 800066e:	f005 fafd 	bl	8005c6c <HAL_TIM_ConfigClockSource>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000678:	f000 fc62 	bl	8000f40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800067c:	482f      	ldr	r0, [pc, #188]	; (800073c <MX_TIM1_Init+0x158>)
 800067e:	f004 fcdb 	bl	8005038 <HAL_TIM_PWM_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000688:	f000 fc5a 	bl	8000f40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800068c:	2300      	movs	r3, #0
 800068e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000690:	2300      	movs	r3, #0
 8000692:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000694:	2300      	movs	r3, #0
 8000696:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000698:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800069c:	4619      	mov	r1, r3
 800069e:	4827      	ldr	r0, [pc, #156]	; (800073c <MX_TIM1_Init+0x158>)
 80006a0:	f006 f9a2 	bl	80069e8 <HAL_TIMEx_MasterConfigSynchronization>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80006aa:	f000 fc49 	bl	8000f40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ae:	2360      	movs	r3, #96	; 0x60
 80006b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006b6:	2300      	movs	r3, #0
 80006b8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006ba:	2300      	movs	r3, #0
 80006bc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006be:	2300      	movs	r3, #0
 80006c0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006c2:	2300      	movs	r3, #0
 80006c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006c6:	2300      	movs	r3, #0
 80006c8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006ce:	2200      	movs	r2, #0
 80006d0:	4619      	mov	r1, r3
 80006d2:	481a      	ldr	r0, [pc, #104]	; (800073c <MX_TIM1_Init+0x158>)
 80006d4:	f005 f9ba 	bl	8005a4c <HAL_TIM_PWM_ConfigChannel>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80006de:	f000 fc2f 	bl	8000f40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000700:	2300      	movs	r3, #0
 8000702:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000704:	2300      	movs	r3, #0
 8000706:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000708:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800070c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000712:	2300      	movs	r3, #0
 8000714:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000716:	2300      	movs	r3, #0
 8000718:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	4619      	mov	r1, r3
 800071e:	4807      	ldr	r0, [pc, #28]	; (800073c <MX_TIM1_Init+0x158>)
 8000720:	f006 f9e4 	bl	8006aec <HAL_TIMEx_ConfigBreakDeadTime>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800072a:	f000 fc09 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800072e:	4803      	ldr	r0, [pc, #12]	; (800073c <MX_TIM1_Init+0x158>)
 8000730:	f000 fdc4 	bl	80012bc <HAL_TIM_MspPostInit>

}
 8000734:	bf00      	nop
 8000736:	3770      	adds	r7, #112	; 0x70
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000210 	.word	0x20000210
 8000740:	40012c00 	.word	0x40012c00

08000744 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08c      	sub	sp, #48	; 0x30
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800074a:	f107 0320 	add.w	r3, r7, #32
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000770:	4b30      	ldr	r3, [pc, #192]	; (8000834 <MX_TIM2_Init+0xf0>)
 8000772:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000776:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8000778:	4b2e      	ldr	r3, [pc, #184]	; (8000834 <MX_TIM2_Init+0xf0>)
 800077a:	220f      	movs	r2, #15
 800077c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077e:	4b2d      	ldr	r3, [pc, #180]	; (8000834 <MX_TIM2_Init+0xf0>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3.2E7;
 8000784:	4b2b      	ldr	r3, [pc, #172]	; (8000834 <MX_TIM2_Init+0xf0>)
 8000786:	4a2c      	ldr	r2, [pc, #176]	; (8000838 <MX_TIM2_Init+0xf4>)
 8000788:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800078a:	4b2a      	ldr	r3, [pc, #168]	; (8000834 <MX_TIM2_Init+0xf0>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000790:	4b28      	ldr	r3, [pc, #160]	; (8000834 <MX_TIM2_Init+0xf0>)
 8000792:	2200      	movs	r2, #0
 8000794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000796:	4827      	ldr	r0, [pc, #156]	; (8000834 <MX_TIM2_Init+0xf0>)
 8000798:	f004 fb2a 	bl	8004df0 <HAL_TIM_Base_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80007a2:	f000 fbcd 	bl	8000f40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007aa:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007ac:	f107 0320 	add.w	r3, r7, #32
 80007b0:	4619      	mov	r1, r3
 80007b2:	4820      	ldr	r0, [pc, #128]	; (8000834 <MX_TIM2_Init+0xf0>)
 80007b4:	f005 fa5a 	bl	8005c6c <HAL_TIM_ConfigClockSource>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80007be:	f000 fbbf 	bl	8000f40 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80007c2:	481c      	ldr	r0, [pc, #112]	; (8000834 <MX_TIM2_Init+0xf0>)
 80007c4:	f004 fd9a 	bl	80052fc <HAL_TIM_IC_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80007ce:	f000 fbb7 	bl	8000f40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	4619      	mov	r1, r3
 80007e0:	4814      	ldr	r0, [pc, #80]	; (8000834 <MX_TIM2_Init+0xf0>)
 80007e2:	f006 f901 	bl	80069e8 <HAL_TIMEx_MasterConfigSynchronization>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80007ec:	f000 fba8 	bl	8000f40 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007f0:	2300      	movs	r3, #0
 80007f2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80007f4:	2301      	movs	r3, #1
 80007f6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 4;
 80007fc:	2304      	movs	r3, #4
 80007fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2204      	movs	r2, #4
 8000804:	4619      	mov	r1, r3
 8000806:	480b      	ldr	r0, [pc, #44]	; (8000834 <MX_TIM2_Init+0xf0>)
 8000808:	f005 f88b 	bl	8005922 <HAL_TIM_IC_ConfigChannel>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000812:	f000 fb95 	bl	8000f40 <Error_Handler>
  }
  if (HAL_TIMEx_TISelection(&htim2, TIM_TIM2_TI2_COMP1, TIM_CHANNEL_2) != HAL_OK)
 8000816:	2204      	movs	r2, #4
 8000818:	f44f 7180 	mov.w	r1, #256	; 0x100
 800081c:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_TIM2_Init+0xf0>)
 800081e:	f006 fa05 	bl	8006c2c <HAL_TIMEx_TISelection>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000828:	f000 fb8a 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	3730      	adds	r7, #48	; 0x30
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	2000025c 	.word	0x2000025c
 8000838:	01e84800 	.word	0x01e84800

0800083c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000842:	f107 0310 	add.w	r3, r7, #16
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800085a:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <MX_TIM4_Init+0x94>)
 800085c:	4a1d      	ldr	r2, [pc, #116]	; (80008d4 <MX_TIM4_Init+0x98>)
 800085e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15;
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <MX_TIM4_Init+0x94>)
 8000862:	220f      	movs	r2, #15
 8000864:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_TIM4_Init+0x94>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 800086c:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <MX_TIM4_Init+0x94>)
 800086e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000872:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000874:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <MX_TIM4_Init+0x94>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087a:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <MX_TIM4_Init+0x94>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000880:	4813      	ldr	r0, [pc, #76]	; (80008d0 <MX_TIM4_Init+0x94>)
 8000882:	f004 fab5 	bl	8004df0 <HAL_TIM_Base_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800088c:	f000 fb58 	bl	8000f40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000894:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000896:	f107 0310 	add.w	r3, r7, #16
 800089a:	4619      	mov	r1, r3
 800089c:	480c      	ldr	r0, [pc, #48]	; (80008d0 <MX_TIM4_Init+0x94>)
 800089e:	f005 f9e5 	bl	8005c6c <HAL_TIM_ConfigClockSource>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80008a8:	f000 fb4a 	bl	8000f40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008ac:	2320      	movs	r3, #32
 80008ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	4619      	mov	r1, r3
 80008b8:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_TIM4_Init+0x94>)
 80008ba:	f006 f895 	bl	80069e8 <HAL_TIMEx_MasterConfigSynchronization>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80008c4:	f000 fb3c 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	3720      	adds	r7, #32
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000088 	.word	0x20000088
 80008d4:	40000800 	.word	0x40000800

080008d8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_TIM6_Init+0x64>)
 80008ea:	4a15      	ldr	r2, [pc, #84]	; (8000940 <MX_TIM6_Init+0x68>)
 80008ec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 159;
 80008ee:	4b13      	ldr	r3, [pc, #76]	; (800093c <MX_TIM6_Init+0x64>)
 80008f0:	229f      	movs	r2, #159	; 0x9f
 80008f2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_TIM6_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <MX_TIM6_Init+0x64>)
 80008fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000900:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_TIM6_Init+0x64>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000908:	480c      	ldr	r0, [pc, #48]	; (800093c <MX_TIM6_Init+0x64>)
 800090a:	f004 fa71 	bl	8004df0 <HAL_TIM_Base_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000914:	f000 fb14 	bl	8000f40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000918:	2300      	movs	r3, #0
 800091a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	4619      	mov	r1, r3
 8000924:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_TIM6_Init+0x64>)
 8000926:	f006 f85f 	bl	80069e8 <HAL_TIMEx_MasterConfigSynchronization>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000930:	f000 fb06 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	200001c4 	.word	0x200001c4
 8000940:	40001000 	.word	0x40001000

08000944 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000962:	4b22      	ldr	r3, [pc, #136]	; (80009ec <MX_TIM15_Init+0xa8>)
 8000964:	4a22      	ldr	r2, [pc, #136]	; (80009f0 <MX_TIM15_Init+0xac>)
 8000966:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 159;
 8000968:	4b20      	ldr	r3, [pc, #128]	; (80009ec <MX_TIM15_Init+0xa8>)
 800096a:	229f      	movs	r2, #159	; 0x9f
 800096c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096e:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <MX_TIM15_Init+0xa8>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 41000;
 8000974:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <MX_TIM15_Init+0xa8>)
 8000976:	f24a 0228 	movw	r2, #41000	; 0xa028
 800097a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <MX_TIM15_Init+0xa8>)
 800097e:	2200      	movs	r2, #0
 8000980:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <MX_TIM15_Init+0xa8>)
 8000984:	2200      	movs	r2, #0
 8000986:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000988:	4b18      	ldr	r3, [pc, #96]	; (80009ec <MX_TIM15_Init+0xa8>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 800098e:	4817      	ldr	r0, [pc, #92]	; (80009ec <MX_TIM15_Init+0xa8>)
 8000990:	f004 fcb4 	bl	80052fc <HAL_TIM_IC_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800099a:	f000 fad1 	bl	8000f40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	4619      	mov	r1, r3
 80009ac:	480f      	ldr	r0, [pc, #60]	; (80009ec <MX_TIM15_Init+0xa8>)
 80009ae:	f006 f81b 	bl	80069e8 <HAL_TIMEx_MasterConfigSynchronization>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 80009b8:	f000 fac2 	bl	8000f40 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80009bc:	2300      	movs	r3, #0
 80009be:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80009c0:	2301      	movs	r3, #1
 80009c2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 4;
 80009c8:	2304      	movs	r3, #4
 80009ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	2200      	movs	r2, #0
 80009d0:	4619      	mov	r1, r3
 80009d2:	4806      	ldr	r0, [pc, #24]	; (80009ec <MX_TIM15_Init+0xa8>)
 80009d4:	f004 ffa5 	bl	8005922 <HAL_TIM_IC_ConfigChannel>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM15_Init+0x9e>
  {
    Error_Handler();
 80009de:	f000 faaf 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	3720      	adds	r7, #32
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000154 	.word	0x20000154
 80009f0:	40014000 	.word	0x40014000

080009f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <MX_GPIO_Init+0x60>)
 8000a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0c:	4a11      	ldr	r2, [pc, #68]	; (8000a54 <MX_GPIO_Init+0x60>)
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_GPIO_Init+0x60>)
 8000a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, GPIO_PIN_RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2a:	f003 fa1d 	bl	8003e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Status_LED_Pin */
  GPIO_InitStruct.Pin = Status_LED_Pin;
 8000a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Status_LED_GPIO_Port, &GPIO_InitStruct);
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	4619      	mov	r1, r3
 8000a44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a48:	f003 f88c 	bl	8003b64 <HAL_GPIO_Init>

}
 8000a4c:	bf00      	nop
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40021000 	.word	0x40021000

08000a58 <NormalizeChannel>:

/* USER CODE BEGIN 4 */

int32_t NormalizeChannel(uint16_t ChannelValue, int32_t InMin, int32_t InMax, int32_t OutMin, int32_t OutMax)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b087      	sub	sp, #28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60b9      	str	r1, [r7, #8]
 8000a60:	607a      	str	r2, [r7, #4]
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	4603      	mov	r3, r0
 8000a66:	81fb      	strh	r3, [r7, #14]
	if ( ChannelValue <= InMin) return OutMin;
 8000a68:	89fb      	ldrh	r3, [r7, #14]
 8000a6a:	68ba      	ldr	r2, [r7, #8]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	db01      	blt.n	8000a74 <NormalizeChannel+0x1c>
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	e03a      	b.n	8000aea <NormalizeChannel+0x92>
	if ( ChannelValue >= InMax) return OutMax;
 8000a74:	89fb      	ldrh	r3, [r7, #14]
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	dc01      	bgt.n	8000a80 <NormalizeChannel+0x28>
 8000a7c:	6a3b      	ldr	r3, [r7, #32]
 8000a7e:	e034      	b.n	8000aea <NormalizeChannel+0x92>

	float ScaleA = ((float)(OutMax - OutMin))/(float)(InMax - InMin);
 8000a80:	6a3a      	ldr	r2, [r7, #32]
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	ee07 3a90 	vmov	s15, r3
 8000a8a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	ee07 3a90 	vmov	s15, r3
 8000a98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000aa0:	edc7 7a05 	vstr	s15, [r7, #20]
	float ScaleB = (float)OutMin-((float)InMin * ScaleA);
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	ee07 3a90 	vmov	s15, r3
 8000aaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	ee07 3a90 	vmov	s15, r3
 8000ab4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ab8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000abc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ac0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ac4:	edc7 7a04 	vstr	s15, [r7, #16]
	return (int32_t)(ChannelValue * ScaleA + ScaleB);
 8000ac8:	89fb      	ldrh	r3, [r7, #14]
 8000aca:	ee07 3a90 	vmov	s15, r3
 8000ace:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ad2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ad6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ada:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ade:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ae2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ae6:	ee17 3a90 	vmov	r3, s15
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	371c      	adds	r7, #28
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
	...

08000af8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
  {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a49      	ldr	r2, [pc, #292]	; (8000c28 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d15c      	bne.n	8000bc2 <HAL_TIM_IC_CaptureCallback+0xca>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)	//Input capture source is from COMP1 with a 1/4*VREF threshold
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	7f1b      	ldrb	r3, [r3, #28]
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	f040 8087 	bne.w	8000c20 <HAL_TIM_IC_CaptureCallback+0x128>
		{
			if (!ICSpeedIsFirstCapt)
 8000b12:	4b46      	ldr	r3, [pc, #280]	; (8000c2c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d10a      	bne.n	8000b30 <HAL_TIM_IC_CaptureCallback+0x38>
			{
				ICSpeedVal1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000b1a:	2104      	movs	r1, #4
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f005 f99b 	bl	8005e58 <HAL_TIM_ReadCapturedValue>
 8000b22:	4603      	mov	r3, r0
 8000b24:	4a42      	ldr	r2, [pc, #264]	; (8000c30 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000b26:	6013      	str	r3, [r2, #0]
				ICSpeedIsFirstCapt = 1;
 8000b28:	4b40      	ldr	r3, [pc, #256]	; (8000c2c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	701a      	strb	r2, [r3, #0]
			PASGotCapture = 1;

		}
	}

  }
 8000b2e:	e077      	b.n	8000c20 <HAL_TIM_IC_CaptureCallback+0x128>
				ICSpeedVal2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000b30:	2104      	movs	r1, #4
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f005 f990 	bl	8005e58 <HAL_TIM_ReadCapturedValue>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	4a3e      	ldr	r2, [pc, #248]	; (8000c34 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b3c:	6013      	str	r3, [r2, #0]
				if ( counter !=0)
 8000b3e:	4b3e      	ldr	r3, [pc, #248]	; (8000c38 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000b40:	881b      	ldrh	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d01f      	beq.n	8000b86 <HAL_TIM_IC_CaptureCallback+0x8e>
					if (ICSpeedVal1 < ICSpeedVal2) // Overflowed ?
 8000b46:	4b3a      	ldr	r3, [pc, #232]	; (8000c30 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	4b3a      	ldr	r3, [pc, #232]	; (8000c34 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d20a      	bcs.n	8000b68 <HAL_TIM_IC_CaptureCallback+0x70>
						ICSpeedDiff += ICSpeedVal2-ICSpeedVal1;
 8000b52:	4b38      	ldr	r3, [pc, #224]	; (8000c34 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	4b36      	ldr	r3, [pc, #216]	; (8000c30 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	1ad2      	subs	r2, r2, r3
 8000b5c:	4b37      	ldr	r3, [pc, #220]	; (8000c3c <HAL_TIM_IC_CaptureCallback+0x144>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4413      	add	r3, r2
 8000b62:	4a36      	ldr	r2, [pc, #216]	; (8000c3c <HAL_TIM_IC_CaptureCallback+0x144>)
 8000b64:	6013      	str	r3, [r2, #0]
 8000b66:	e00e      	b.n	8000b86 <HAL_TIM_IC_CaptureCallback+0x8e>
						ICSpeedDiff += ((htim->Instance->ARR-ICSpeedVal1)+ICSpeedVal2)+1;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b6e:	4b30      	ldr	r3, [pc, #192]	; (8000c30 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	1ad2      	subs	r2, r2, r3
 8000b74:	4b2f      	ldr	r3, [pc, #188]	; (8000c34 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4413      	add	r3, r2
 8000b7a:	1c5a      	adds	r2, r3, #1
 8000b7c:	4b2f      	ldr	r3, [pc, #188]	; (8000c3c <HAL_TIM_IC_CaptureCallback+0x144>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4413      	add	r3, r2
 8000b82:	4a2e      	ldr	r2, [pc, #184]	; (8000c3c <HAL_TIM_IC_CaptureCallback+0x144>)
 8000b84:	6013      	str	r3, [r2, #0]
				ICSpeedVal1 = ICSpeedVal2;
 8000b86:	4b2b      	ldr	r3, [pc, #172]	; (8000c34 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a29      	ldr	r2, [pc, #164]	; (8000c30 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000b8c:	6013      	str	r3, [r2, #0]
				counter++;
 8000b8e:	4b2a      	ldr	r3, [pc, #168]	; (8000c38 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000b90:	881b      	ldrh	r3, [r3, #0]
 8000b92:	3301      	adds	r3, #1
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	4b28      	ldr	r3, [pc, #160]	; (8000c38 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000b98:	801a      	strh	r2, [r3, #0]
				if (counter>=50)
 8000b9a:	4b27      	ldr	r3, [pc, #156]	; (8000c38 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	2b31      	cmp	r3, #49	; 0x31
 8000ba0:	d93e      	bls.n	8000c20 <HAL_TIM_IC_CaptureCallback+0x128>
					ICSpeedDiff /= counter-1;
 8000ba2:	4b26      	ldr	r3, [pc, #152]	; (8000c3c <HAL_TIM_IC_CaptureCallback+0x144>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a24      	ldr	r2, [pc, #144]	; (8000c38 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000ba8:	8812      	ldrh	r2, [r2, #0]
 8000baa:	3a01      	subs	r2, #1
 8000bac:	fbb3 f3f2 	udiv	r3, r3, r2
 8000bb0:	4a22      	ldr	r2, [pc, #136]	; (8000c3c <HAL_TIM_IC_CaptureCallback+0x144>)
 8000bb2:	6013      	str	r3, [r2, #0]
					counter = 0;
 8000bb4:	4b20      	ldr	r3, [pc, #128]	; (8000c38 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	801a      	strh	r2, [r3, #0]
					ICSpeedDiff = 0;
 8000bba:	4b20      	ldr	r3, [pc, #128]	; (8000c3c <HAL_TIM_IC_CaptureCallback+0x144>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
  }
 8000bc0:	e02e      	b.n	8000c20 <HAL_TIM_IC_CaptureCallback+0x128>
	else if (htim == &htim15)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a1e      	ldr	r2, [pc, #120]	; (8000c40 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d12a      	bne.n	8000c20 <HAL_TIM_IC_CaptureCallback+0x128>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)	//Input capture from PAS on channel 1
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	7f1b      	ldrb	r3, [r3, #28]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d126      	bne.n	8000c20 <HAL_TIM_IC_CaptureCallback+0x128>
			__HAL_TIM_SET_COUNTER(&htim15, 0); //Reset timeout counter
 8000bd2:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	625a      	str	r2, [r3, #36]	; 0x24
			PASSpeedDiff = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000bda:	2100      	movs	r1, #0
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f005 f93b 	bl	8005e58 <HAL_TIM_ReadCapturedValue>
 8000be2:	4603      	mov	r3, r0
 8000be4:	4a17      	ldr	r2, [pc, #92]	; (8000c44 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000be6:	6013      	str	r3, [r2, #0]
			if (PASSpeedDiff < (PAS_ACTIVE_THRESHOLD + PAS_Detected * 100))
 8000be8:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	2364      	movs	r3, #100	; 0x64
 8000bf0:	fb03 f302 	mul.w	r3, r3, r2
 8000bf4:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8000bf8:	3320      	adds	r3, #32
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d907      	bls.n	8000c14 <HAL_TIM_IC_CaptureCallback+0x11c>
				if (PASGotCapture == 1) PAS_Detected = 1;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <HAL_TIM_IC_CaptureCallback+0x154>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d106      	bne.n	8000c1a <HAL_TIM_IC_CaptureCallback+0x122>
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	e002      	b.n	8000c1a <HAL_TIM_IC_CaptureCallback+0x122>
				PAS_Detected = 0;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]
			PASGotCapture = 1;
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <HAL_TIM_IC_CaptureCallback+0x154>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	701a      	strb	r2, [r3, #0]
  }
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	2000025c 	.word	0x2000025c
 8000c2c:	2000003c 	.word	0x2000003c
 8000c30:	20000030 	.word	0x20000030
 8000c34:	20000034 	.word	0x20000034
 8000c38:	2000003e 	.word	0x2000003e
 8000c3c:	20000038 	.word	0x20000038
 8000c40:	20000154 	.word	0x20000154
 8000c44:	20000044 	.word	0x20000044
 8000c48:	20000040 	.word	0x20000040
 8000c4c:	20000000 	.word	0x20000000

08000c50 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc2)	//Do a lot of things inside the interruption because it's trigged by Timer 4 not so often (few ms)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a58      	ldr	r2, [pc, #352]	; (8000dbc <HAL_ADC_ConvCpltCallback+0x16c>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	f040 80a8 	bne.w	8000db2 <HAL_ADC_ConvCpltCallback+0x162>
	{
		uint16_t value = HAL_ADC_GetValue(hadc);
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f001 fa15 	bl	8002092 <HAL_ADC_GetValue>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	81fb      	strh	r3, [r7, #14]
		switch(ADC2ChannelConfig.Channel)
 8000c6c:	4b54      	ldr	r3, [pc, #336]	; (8000dc0 <HAL_ADC_ConvCpltCallback+0x170>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a54      	ldr	r2, [pc, #336]	; (8000dc4 <HAL_ADC_ConvCpltCallback+0x174>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d003      	beq.n	8000c7e <HAL_ADC_ConvCpltCallback+0x2e>
 8000c76:	4a54      	ldr	r2, [pc, #336]	; (8000dc8 <HAL_ADC_ConvCpltCallback+0x178>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d031      	beq.n	8000ce0 <HAL_ADC_ConvCpltCallback+0x90>
 8000c7c:	e08c      	b.n	8000d98 <HAL_ADC_ConvCpltCallback+0x148>
		{
		case ADC_CHANNEL_1:;	//Channel 1 is mixed temperature/speed reading. Concentrate on the high level and ignore signal when it is low. We can concentrate on
			uint32_t reg = hcomp1.Instance->CSR;	//Does not work in one line....
 8000c7e:	4b53      	ldr	r3, [pc, #332]	; (8000dcc <HAL_ADC_ConvCpltCallback+0x17c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	60bb      	str	r3, [r7, #8]
			if (( reg & 0x40000000) != 0)
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	f000 8086 	beq.w	8000d9e <HAL_ADC_ConvCpltCallback+0x14e>
			{
				TempAccumulator += value;
 8000c92:	89fa      	ldrh	r2, [r7, #14]
 8000c94:	4b4e      	ldr	r3, [pc, #312]	; (8000dd0 <HAL_ADC_ConvCpltCallback+0x180>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4413      	add	r3, r2
 8000c9a:	4a4d      	ldr	r2, [pc, #308]	; (8000dd0 <HAL_ADC_ConvCpltCallback+0x180>)
 8000c9c:	6013      	str	r3, [r2, #0]
				if (TempCounter >= TEMP_COUNTER_MAX)
 8000c9e:	4b4d      	ldr	r3, [pc, #308]	; (8000dd4 <HAL_ADC_ConvCpltCallback+0x184>)
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ca6:	d314      	bcc.n	8000cd2 <HAL_ADC_ConvCpltCallback+0x82>
				{
					TempAccumulator /= TempCounter;
 8000ca8:	4b49      	ldr	r3, [pc, #292]	; (8000dd0 <HAL_ADC_ConvCpltCallback+0x180>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a49      	ldr	r2, [pc, #292]	; (8000dd4 <HAL_ADC_ConvCpltCallback+0x184>)
 8000cae:	8812      	ldrh	r2, [r2, #0]
 8000cb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8000cb4:	4a46      	ldr	r2, [pc, #280]	; (8000dd0 <HAL_ADC_ConvCpltCallback+0x180>)
 8000cb6:	6013      	str	r3, [r2, #0]
					TempCounter = 0;
 8000cb8:	4b46      	ldr	r3, [pc, #280]	; (8000dd4 <HAL_ADC_ConvCpltCallback+0x184>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	801a      	strh	r2, [r3, #0]
					HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, TempAccumulator);
 8000cbe:	4b44      	ldr	r3, [pc, #272]	; (8000dd0 <HAL_ADC_ConvCpltCallback+0x180>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2110      	movs	r1, #16
 8000cc6:	4844      	ldr	r0, [pc, #272]	; (8000dd8 <HAL_ADC_ConvCpltCallback+0x188>)
 8000cc8:	f002 fd68 	bl	800379c <HAL_DAC_SetValue>
					TempAccumulator = 0;
 8000ccc:	4b40      	ldr	r3, [pc, #256]	; (8000dd0 <HAL_ADC_ConvCpltCallback+0x180>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
				}
				TempCounter++;
 8000cd2:	4b40      	ldr	r3, [pc, #256]	; (8000dd4 <HAL_ADC_ConvCpltCallback+0x184>)
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	4b3e      	ldr	r3, [pc, #248]	; (8000dd4 <HAL_ADC_ConvCpltCallback+0x184>)
 8000cdc:	801a      	strh	r2, [r3, #0]
			}
			break;
 8000cde:	e05e      	b.n	8000d9e <HAL_ADC_ConvCpltCallback+0x14e>

		case ADC_CHANNEL_17:	//Channel 17 is throttle input. Just copy its value after PPM conversion
			if (ThrottleStartup!=0)
 8000ce0:	4b3e      	ldr	r3, [pc, #248]	; (8000ddc <HAL_ADC_ConvCpltCallback+0x18c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d04f      	beq.n	8000d88 <HAL_ADC_ConvCpltCallback+0x138>
			{
				if (value > 2048 && ThrottleStartup == 1)	//Throttle is maintained high during startup ==> Start calibration sequence
 8000ce8:	89fb      	ldrh	r3, [r7, #14]
 8000cea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cee:	d90a      	bls.n	8000d06 <HAL_ADC_ConvCpltCallback+0xb6>
 8000cf0:	4b3a      	ldr	r3, [pc, #232]	; (8000ddc <HAL_ADC_ConvCpltCallback+0x18c>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d106      	bne.n	8000d06 <HAL_ADC_ConvCpltCallback+0xb6>
				{
					ThrottleStartup = 2;
 8000cf8:	4b38      	ldr	r3, [pc, #224]	; (8000ddc <HAL_ADC_ConvCpltCallback+0x18c>)
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	701a      	strb	r2, [r3, #0]
					MaxAnalogThrottleValue = value;
 8000cfe:	4a38      	ldr	r2, [pc, #224]	; (8000de0 <HAL_ADC_ConvCpltCallback+0x190>)
 8000d00:	89fb      	ldrh	r3, [r7, #14]
 8000d02:	8013      	strh	r3, [r2, #0]
 8000d04:	e047      	b.n	8000d96 <HAL_ADC_ConvCpltCallback+0x146>
				}
				else if (value > 2048 && ThrottleStartup == 2 && value>MaxAnalogThrottleValue)	//Capture max value while throttle is higher than 2048
 8000d06:	89fb      	ldrh	r3, [r7, #14]
 8000d08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d0c:	d90c      	bls.n	8000d28 <HAL_ADC_ConvCpltCallback+0xd8>
 8000d0e:	4b33      	ldr	r3, [pc, #204]	; (8000ddc <HAL_ADC_ConvCpltCallback+0x18c>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d108      	bne.n	8000d28 <HAL_ADC_ConvCpltCallback+0xd8>
 8000d16:	4b32      	ldr	r3, [pc, #200]	; (8000de0 <HAL_ADC_ConvCpltCallback+0x190>)
 8000d18:	881b      	ldrh	r3, [r3, #0]
 8000d1a:	89fa      	ldrh	r2, [r7, #14]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d903      	bls.n	8000d28 <HAL_ADC_ConvCpltCallback+0xd8>
				{
					MaxAnalogThrottleValue = value;
 8000d20:	4a2f      	ldr	r2, [pc, #188]	; (8000de0 <HAL_ADC_ConvCpltCallback+0x190>)
 8000d22:	89fb      	ldrh	r3, [r7, #14]
 8000d24:	8013      	strh	r3, [r2, #0]
 8000d26:	e036      	b.n	8000d96 <HAL_ADC_ConvCpltCallback+0x146>
				}
				else if (value <= 2048 && ThrottleStartup == 2)	//When throttle has gone below mid value launch min calibration step
 8000d28:	89fb      	ldrh	r3, [r7, #14]
 8000d2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d2e:	d80a      	bhi.n	8000d46 <HAL_ADC_ConvCpltCallback+0xf6>
 8000d30:	4b2a      	ldr	r3, [pc, #168]	; (8000ddc <HAL_ADC_ConvCpltCallback+0x18c>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d106      	bne.n	8000d46 <HAL_ADC_ConvCpltCallback+0xf6>
				{
					ThrottleStartup = 3;
 8000d38:	4b28      	ldr	r3, [pc, #160]	; (8000ddc <HAL_ADC_ConvCpltCallback+0x18c>)
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	701a      	strb	r2, [r3, #0]
					MinAnalogThrottleValue = value;
 8000d3e:	4a29      	ldr	r2, [pc, #164]	; (8000de4 <HAL_ADC_ConvCpltCallback+0x194>)
 8000d40:	89fb      	ldrh	r3, [r7, #14]
 8000d42:	8013      	strh	r3, [r2, #0]
 8000d44:	e027      	b.n	8000d96 <HAL_ADC_ConvCpltCallback+0x146>
				}
				else if (value <= 2048 && ThrottleStartup == 3 && value<MinAnalogThrottleValue)	//capture min value while throttle is kept below 2048
 8000d46:	89fb      	ldrh	r3, [r7, #14]
 8000d48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d4c:	d80c      	bhi.n	8000d68 <HAL_ADC_ConvCpltCallback+0x118>
 8000d4e:	4b23      	ldr	r3, [pc, #140]	; (8000ddc <HAL_ADC_ConvCpltCallback+0x18c>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b03      	cmp	r3, #3
 8000d54:	d108      	bne.n	8000d68 <HAL_ADC_ConvCpltCallback+0x118>
 8000d56:	4b23      	ldr	r3, [pc, #140]	; (8000de4 <HAL_ADC_ConvCpltCallback+0x194>)
 8000d58:	881b      	ldrh	r3, [r3, #0]
 8000d5a:	89fa      	ldrh	r2, [r7, #14]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d203      	bcs.n	8000d68 <HAL_ADC_ConvCpltCallback+0x118>
				{
					MinAnalogThrottleValue = value;
 8000d60:	4a20      	ldr	r2, [pc, #128]	; (8000de4 <HAL_ADC_ConvCpltCallback+0x194>)
 8000d62:	89fb      	ldrh	r3, [r7, #14]
 8000d64:	8013      	strh	r3, [r2, #0]
 8000d66:	e016      	b.n	8000d96 <HAL_ADC_ConvCpltCallback+0x146>
				}
				else if (value > 2048 && ThrottleStartup == 3) 	//Exit calibration procedure when throttle is back above mid value
 8000d68:	89fb      	ldrh	r3, [r7, #14]
 8000d6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d6e:	d907      	bls.n	8000d80 <HAL_ADC_ConvCpltCallback+0x130>
 8000d70:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <HAL_ADC_ConvCpltCallback+0x18c>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	d103      	bne.n	8000d80 <HAL_ADC_ConvCpltCallback+0x130>
				{
					ThrottleStartup = 0;
 8000d78:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <HAL_ADC_ConvCpltCallback+0x18c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
 8000d7e:	e00a      	b.n	8000d96 <HAL_ADC_ConvCpltCallback+0x146>
					//Add step to store new calibrated values to EEPROM
				}
				else ThrottleStartup = 0;
 8000d80:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <HAL_ADC_ConvCpltCallback+0x18c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]
			else
			{
				ThrottleStartup = 0;
				AnalogThrottleValue = value;
			}
			break;
 8000d86:	e00b      	b.n	8000da0 <HAL_ADC_ConvCpltCallback+0x150>
				ThrottleStartup = 0;
 8000d88:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <HAL_ADC_ConvCpltCallback+0x18c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
				AnalogThrottleValue = value;
 8000d8e:	4a16      	ldr	r2, [pc, #88]	; (8000de8 <HAL_ADC_ConvCpltCallback+0x198>)
 8000d90:	89fb      	ldrh	r3, [r7, #14]
 8000d92:	8013      	strh	r3, [r2, #0]
			break;
 8000d94:	e004      	b.n	8000da0 <HAL_ADC_ConvCpltCallback+0x150>
 8000d96:	e003      	b.n	8000da0 <HAL_ADC_ConvCpltCallback+0x150>

		default:
			Error_Handler();
 8000d98:	f000 f8d2 	bl	8000f40 <Error_Handler>
			break;
 8000d9c:	e000      	b.n	8000da0 <HAL_ADC_ConvCpltCallback+0x150>
			break;
 8000d9e:	bf00      	nop
		}
		HAL_ADC_Stop_IT(&hadc2);	//Stop ADC Because we are going to change channel
 8000da0:	4806      	ldr	r0, [pc, #24]	; (8000dbc <HAL_ADC_ConvCpltCallback+0x16c>)
 8000da2:	f001 f93b 	bl	800201c <HAL_ADC_Stop_IT>
		toogle_ADC_Channel(&ADC2ChannelConfig);	//Switch adc channel for next conversion
 8000da6:	4806      	ldr	r0, [pc, #24]	; (8000dc0 <HAL_ADC_ConvCpltCallback+0x170>)
 8000da8:	f000 f848 	bl	8000e3c <toogle_ADC_Channel>
		HAL_ADC_Start_IT(&hadc2);	//Restart ADC Waiting for next conversion (after Timer 4 Trigger)
 8000dac:	4803      	ldr	r0, [pc, #12]	; (8000dbc <HAL_ADC_ConvCpltCallback+0x16c>)
 8000dae:	f001 f803 	bl	8001db8 <HAL_ADC_Start_IT>
	}
}
 8000db2:	bf00      	nop
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200000e8 	.word	0x200000e8
 8000dc0:	20000050 	.word	0x20000050
 8000dc4:	04300002 	.word	0x04300002
 8000dc8:	47520000 	.word	0x47520000
 8000dcc:	200001a0 	.word	0x200001a0
 8000dd0:	2000004c 	.word	0x2000004c
 8000dd4:	20000048 	.word	0x20000048
 8000dd8:	200000d4 	.word	0x200000d4
 8000ddc:	20000004 	.word	0x20000004
 8000de0:	20000002 	.word	0x20000002
 8000de4:	20000070 	.word	0x20000070
 8000de8:	20000072 	.word	0x20000072

08000dec <init_ADC_Channel>:

void init_ADC_Channel(ADC_ChannelConfTypeDef* ADCChannel)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	ADCChannel->Channel = ADC_CHANNEL_1;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a0f      	ldr	r2, [pc, #60]	; (8000e34 <init_ADC_Channel+0x48>)
 8000df8:	601a      	str	r2, [r3, #0]
	ADCChannel->Rank = ADC_REGULAR_RANK_1;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2206      	movs	r2, #6
 8000dfe:	605a      	str	r2, [r3, #4]
	ADCChannel->SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2202      	movs	r2, #2
 8000e04:	609a      	str	r2, [r3, #8]
	ADCChannel->SingleDiff = ADC_SINGLE_ENDED;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	227f      	movs	r2, #127	; 0x7f
 8000e0a:	60da      	str	r2, [r3, #12]
	ADCChannel->OffsetNumber = ADC_OFFSET_NONE;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2204      	movs	r2, #4
 8000e10:	611a      	str	r2, [r3, #16]
	ADCChannel->Offset = 0;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_ConfigChannel(&hadc2, ADCChannel) != HAL_OK)
 8000e18:	6879      	ldr	r1, [r7, #4]
 8000e1a:	4807      	ldr	r0, [pc, #28]	; (8000e38 <init_ADC_Channel+0x4c>)
 8000e1c:	f001 fb74 	bl	8002508 <HAL_ADC_ConfigChannel>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <init_ADC_Channel+0x3e>
		{
			Error_Handler();
 8000e26:	f000 f88b 	bl	8000f40 <Error_Handler>
		}
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	04300002 	.word	0x04300002
 8000e38:	200000e8 	.word	0x200000e8

08000e3c <toogle_ADC_Channel>:

void toogle_ADC_Channel(ADC_ChannelConfTypeDef* ADCChannel)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	if ( ADCChannel->Channel == ADC_CHANNEL_1) ADCChannel->Channel = ADC_CHANNEL_17;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <toogle_ADC_Channel+0x3c>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d103      	bne.n	8000e56 <toogle_ADC_Channel+0x1a>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <toogle_ADC_Channel+0x40>)
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	e002      	b.n	8000e5c <toogle_ADC_Channel+0x20>
	else ADCChannel->Channel = ADC_CHANNEL_1;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a07      	ldr	r2, [pc, #28]	; (8000e78 <toogle_ADC_Channel+0x3c>)
 8000e5a:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc2, ADCChannel) != HAL_OK)
 8000e5c:	6879      	ldr	r1, [r7, #4]
 8000e5e:	4808      	ldr	r0, [pc, #32]	; (8000e80 <toogle_ADC_Channel+0x44>)
 8000e60:	f001 fb52 	bl	8002508 <HAL_ADC_ConfigChannel>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <toogle_ADC_Channel+0x32>
	{
		Error_Handler();
 8000e6a:	f000 f869 	bl	8000f40 <Error_Handler>
	}
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	04300002 	.word	0x04300002
 8000e7c:	47520000 	.word	0x47520000
 8000e80:	200000e8 	.word	0x200000e8

08000e84 <refreshPPM>:

uint8_t refreshPPM(uint16_t ThrottleValue)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af02      	add	r7, sp, #8
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	80fb      	strh	r3, [r7, #6]
	if (OutputActive == 1 )
 8000e8e:	4b26      	ldr	r3, [pc, #152]	; (8000f28 <refreshPPM+0xa4>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d13e      	bne.n	8000f14 <refreshPPM+0x90>
	{
		if (ThrottleValue < THROTTLE_THRESHOLD && PAS_Detected != 0 && AssistLevel<=4 && AssistLevel >0)
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	2b63      	cmp	r3, #99	; 0x63
 8000e9a:	d826      	bhi.n	8000eea <refreshPPM+0x66>
 8000e9c:	4b23      	ldr	r3, [pc, #140]	; (8000f2c <refreshPPM+0xa8>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d022      	beq.n	8000eea <refreshPPM+0x66>
 8000ea4:	4b22      	ldr	r3, [pc, #136]	; (8000f30 <refreshPPM+0xac>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b04      	cmp	r3, #4
 8000eaa:	d81e      	bhi.n	8000eea <refreshPPM+0x66>
 8000eac:	4b20      	ldr	r3, [pc, #128]	; (8000f30 <refreshPPM+0xac>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d01a      	beq.n	8000eea <refreshPPM+0x66>
		{
			htim1.Instance->CCR1 = (uint16_t)NormalizeChannel(1000 * AssistLevel, 0, 4000, MIN_CHANNEL_VALUE, MAX_CHANNEL_VALUE);
 8000eb4:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <refreshPPM+0xac>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	461a      	mov	r2, r3
 8000ebc:	0152      	lsls	r2, r2, #5
 8000ebe:	1ad2      	subs	r2, r2, r3
 8000ec0:	0092      	lsls	r2, r2, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	b298      	uxth	r0, r3
 8000ec8:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ed2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	f7ff fdbe 	bl	8000a58 <NormalizeChannel>
 8000edc:	4603      	mov	r3, r0
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <refreshPPM+0xb0>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	635a      	str	r2, [r3, #52]	; 0x34
			return 2;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	e01a      	b.n	8000f20 <refreshPPM+0x9c>
		}

		htim1.Instance->CCR1 = (uint16_t)NormalizeChannel(ThrottleValue, MinAnalogThrottleValue, MaxAnalogThrottleValue, MIN_CHANNEL_VALUE, MAX_CHANNEL_VALUE);
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <refreshPPM+0xb4>)
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <refreshPPM+0xb8>)
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	88f8      	ldrh	r0, [r7, #6]
 8000ef8:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f02:	f7ff fda9 	bl	8000a58 <NormalizeChannel>
 8000f06:	4603      	mov	r3, r0
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <refreshPPM+0xb0>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	635a      	str	r2, [r3, #52]	; 0x34
		return 1;
 8000f10:	2301      	movs	r3, #1
 8000f12:	e005      	b.n	8000f20 <refreshPPM+0x9c>
	}
	else htim1.Instance->CCR1 = 500;
 8000f14:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <refreshPPM+0xb0>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f1c:	635a      	str	r2, [r3, #52]	; 0x34
	return 0;
 8000f1e:	2300      	movs	r3, #0
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000005 	.word	0x20000005
 8000f2c:	20000040 	.word	0x20000040
 8000f30:	20000006 	.word	0x20000006
 8000f34:	20000210 	.word	0x20000210
 8000f38:	20000070 	.word	0x20000070
 8000f3c:	20000002 	.word	0x20000002

08000f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f44:	b672      	cpsid	i
}
 8000f46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <Error_Handler+0x8>
	...

08000f4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <HAL_MspInit+0x44>)
 8000f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f56:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <HAL_MspInit+0x44>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <HAL_MspInit+0x44>)
 8000f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <HAL_MspInit+0x44>)
 8000f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6e:	4a08      	ldr	r2, [pc, #32]	; (8000f90 <HAL_MspInit+0x44>)
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f74:	6593      	str	r3, [r2, #88]	; 0x58
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_MspInit+0x44>)
 8000f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f82:	f003 f82d 	bl	8003fe0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40021000 	.word	0x40021000

08000f94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a19      	ldr	r2, [pc, #100]	; (8001018 <HAL_ADC_MspInit+0x84>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d12c      	bne.n	8001010 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000fb6:	4b19      	ldr	r3, [pc, #100]	; (800101c <HAL_ADC_MspInit+0x88>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	4a18      	ldr	r2, [pc, #96]	; (800101c <HAL_ADC_MspInit+0x88>)
 8000fbc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc2:	4b16      	ldr	r3, [pc, #88]	; (800101c <HAL_ADC_MspInit+0x88>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	4b13      	ldr	r3, [pc, #76]	; (800101c <HAL_ADC_MspInit+0x88>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	4a12      	ldr	r2, [pc, #72]	; (800101c <HAL_ADC_MspInit+0x88>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <HAL_ADC_MspInit+0x88>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA0     ------> ADC2_IN1
    PA4     ------> ADC2_IN17
    */
    GPIO_InitStruct.Pin = Temp_in_analog_Pin|Throttle_in_analog_Pin;
 8000fe6:	2311      	movs	r3, #17
 8000fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fea:	2303      	movs	r3, #3
 8000fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ffc:	f002 fdb2 	bl	8003b64 <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001000:	2200      	movs	r2, #0
 8001002:	2100      	movs	r1, #0
 8001004:	2012      	movs	r0, #18
 8001006:	f002 fac6 	bl	8003596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800100a:	2012      	movs	r0, #18
 800100c:	f002 fadd 	bl	80035ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001010:	bf00      	nop
 8001012:	3728      	adds	r7, #40	; 0x28
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	50000100 	.word	0x50000100
 800101c:	40021000 	.word	0x40021000

08001020 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0f      	ldr	r2, [pc, #60]	; (800107c <HAL_COMP_MspInit+0x5c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d118      	bne.n	8001074 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <HAL_COMP_MspInit+0x60>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	4a0e      	ldr	r2, [pc, #56]	; (8001080 <HAL_COMP_MspInit+0x60>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104e:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <HAL_COMP_MspInit+0x60>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PA1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800105a:	2302      	movs	r3, #2
 800105c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800105e:	2303      	movs	r3, #3
 8001060:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	4619      	mov	r1, r3
 800106c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001070:	f002 fd78 	bl	8003b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8001074:	bf00      	nop
 8001076:	3720      	adds	r7, #32
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40010200 	.word	0x40010200
 8001080:	40021000 	.word	0x40021000

08001084 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a26      	ldr	r2, [pc, #152]	; (800113c <HAL_DAC_MspInit+0xb8>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d12d      	bne.n	8001102 <HAL_DAC_MspInit+0x7e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80010a6:	4b26      	ldr	r3, [pc, #152]	; (8001140 <HAL_DAC_MspInit+0xbc>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010aa:	4a25      	ldr	r2, [pc, #148]	; (8001140 <HAL_DAC_MspInit+0xbc>)
 80010ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b2:	4b23      	ldr	r3, [pc, #140]	; (8001140 <HAL_DAC_MspInit+0xbc>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	4b20      	ldr	r3, [pc, #128]	; (8001140 <HAL_DAC_MspInit+0xbc>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	4a1f      	ldr	r2, [pc, #124]	; (8001140 <HAL_DAC_MspInit+0xbc>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ca:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <HAL_DAC_MspInit+0xbc>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = Temp_out_Pin;
 80010d6:	2320      	movs	r3, #32
 80010d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010da:	2303      	movs	r3, #3
 80010dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Temp_out_GPIO_Port, &GPIO_InitStruct);
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4619      	mov	r1, r3
 80010e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ec:	f002 fd3a 	bl	8003b64 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2100      	movs	r1, #0
 80010f4:	2036      	movs	r0, #54	; 0x36
 80010f6:	f002 fa4e 	bl	8003596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010fa:	2036      	movs	r0, #54	; 0x36
 80010fc:	f002 fa65 	bl	80035ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }

}
 8001100:	e018      	b.n	8001134 <HAL_DAC_MspInit+0xb0>
  else if(hdac->Instance==DAC3)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a0f      	ldr	r2, [pc, #60]	; (8001144 <HAL_DAC_MspInit+0xc0>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d113      	bne.n	8001134 <HAL_DAC_MspInit+0xb0>
    __HAL_RCC_DAC3_CLK_ENABLE();
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <HAL_DAC_MspInit+0xbc>)
 800110e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001110:	4a0b      	ldr	r2, [pc, #44]	; (8001140 <HAL_DAC_MspInit+0xbc>)
 8001112:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001116:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001118:	4b09      	ldr	r3, [pc, #36]	; (8001140 <HAL_DAC_MspInit+0xbc>)
 800111a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001124:	2200      	movs	r2, #0
 8001126:	2100      	movs	r1, #0
 8001128:	2036      	movs	r0, #54	; 0x36
 800112a:	f002 fa34 	bl	8003596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800112e:	2036      	movs	r0, #54	; 0x36
 8001130:	f002 fa4b 	bl	80035ca <HAL_NVIC_EnableIRQ>
}
 8001134:	bf00      	nop
 8001136:	3728      	adds	r7, #40	; 0x28
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	50000800 	.word	0x50000800
 8001140:	40021000 	.word	0x40021000
 8001144:	50001000 	.word	0x50001000

08001148 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a30      	ldr	r2, [pc, #192]	; (8001218 <HAL_TIM_Base_MspInit+0xd0>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d114      	bne.n	8001184 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800115a:	4b30      	ldr	r3, [pc, #192]	; (800121c <HAL_TIM_Base_MspInit+0xd4>)
 800115c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800115e:	4a2f      	ldr	r2, [pc, #188]	; (800121c <HAL_TIM_Base_MspInit+0xd4>)
 8001160:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001164:	6613      	str	r3, [r2, #96]	; 0x60
 8001166:	4b2d      	ldr	r3, [pc, #180]	; (800121c <HAL_TIM_Base_MspInit+0xd4>)
 8001168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800116a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	2100      	movs	r1, #0
 8001176:	2018      	movs	r0, #24
 8001178:	f002 fa0d 	bl	8003596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800117c:	2018      	movs	r0, #24
 800117e:	f002 fa24 	bl	80035ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001182:	e044      	b.n	800120e <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800118c:	d114      	bne.n	80011b8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800118e:	4b23      	ldr	r3, [pc, #140]	; (800121c <HAL_TIM_Base_MspInit+0xd4>)
 8001190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001192:	4a22      	ldr	r2, [pc, #136]	; (800121c <HAL_TIM_Base_MspInit+0xd4>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6593      	str	r3, [r2, #88]	; 0x58
 800119a:	4b20      	ldr	r3, [pc, #128]	; (800121c <HAL_TIM_Base_MspInit+0xd4>)
 800119c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	201c      	movs	r0, #28
 80011ac:	f002 f9f3 	bl	8003596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011b0:	201c      	movs	r0, #28
 80011b2:	f002 fa0a 	bl	80035ca <HAL_NVIC_EnableIRQ>
}
 80011b6:	e02a      	b.n	800120e <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a18      	ldr	r2, [pc, #96]	; (8001220 <HAL_TIM_Base_MspInit+0xd8>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d10c      	bne.n	80011dc <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011c2:	4b16      	ldr	r3, [pc, #88]	; (800121c <HAL_TIM_Base_MspInit+0xd4>)
 80011c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c6:	4a15      	ldr	r2, [pc, #84]	; (800121c <HAL_TIM_Base_MspInit+0xd4>)
 80011c8:	f043 0304 	orr.w	r3, r3, #4
 80011cc:	6593      	str	r3, [r2, #88]	; 0x58
 80011ce:	4b13      	ldr	r3, [pc, #76]	; (800121c <HAL_TIM_Base_MspInit+0xd4>)
 80011d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d2:	f003 0304 	and.w	r3, r3, #4
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
}
 80011da:	e018      	b.n	800120e <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM6)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a10      	ldr	r2, [pc, #64]	; (8001224 <HAL_TIM_Base_MspInit+0xdc>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d113      	bne.n	800120e <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80011e6:	4b0d      	ldr	r3, [pc, #52]	; (800121c <HAL_TIM_Base_MspInit+0xd4>)
 80011e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ea:	4a0c      	ldr	r2, [pc, #48]	; (800121c <HAL_TIM_Base_MspInit+0xd4>)
 80011ec:	f043 0310 	orr.w	r3, r3, #16
 80011f0:	6593      	str	r3, [r2, #88]	; 0x58
 80011f2:	4b0a      	ldr	r3, [pc, #40]	; (800121c <HAL_TIM_Base_MspInit+0xd4>)
 80011f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f6:	f003 0310 	and.w	r3, r3, #16
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2100      	movs	r1, #0
 8001202:	2036      	movs	r0, #54	; 0x36
 8001204:	f002 f9c7 	bl	8003596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001208:	2036      	movs	r0, #54	; 0x36
 800120a:	f002 f9de 	bl	80035ca <HAL_NVIC_EnableIRQ>
}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40012c00 	.word	0x40012c00
 800121c:	40021000 	.word	0x40021000
 8001220:	40000800 	.word	0x40000800
 8001224:	40001000 	.word	0x40001000

08001228 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	; 0x28
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM15)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a1b      	ldr	r2, [pc, #108]	; (80012b4 <HAL_TIM_IC_MspInit+0x8c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d130      	bne.n	80012ac <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800124a:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <HAL_TIM_IC_MspInit+0x90>)
 800124c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800124e:	4a1a      	ldr	r2, [pc, #104]	; (80012b8 <HAL_TIM_IC_MspInit+0x90>)
 8001250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001254:	6613      	str	r3, [r2, #96]	; 0x60
 8001256:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <HAL_TIM_IC_MspInit+0x90>)
 8001258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800125a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <HAL_TIM_IC_MspInit+0x90>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001266:	4a14      	ldr	r2, [pc, #80]	; (80012b8 <HAL_TIM_IC_MspInit+0x90>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126e:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_TIM_IC_MspInit+0x90>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    /**TIM15 GPIO Configuration
    PA2     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800127a:	2304      	movs	r3, #4
 800127c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 800128a:	2309      	movs	r3, #9
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001298:	f002 fc64 	bl	8003b64 <HAL_GPIO_Init>

    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800129c:	2200      	movs	r2, #0
 800129e:	2100      	movs	r1, #0
 80012a0:	2018      	movs	r0, #24
 80012a2:	f002 f978 	bl	8003596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80012a6:	2018      	movs	r0, #24
 80012a8:	f002 f98f 	bl	80035ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80012ac:	bf00      	nop
 80012ae:	3728      	adds	r7, #40	; 0x28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40014000 	.word	0x40014000
 80012b8:	40021000 	.word	0x40021000

080012bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a12      	ldr	r2, [pc, #72]	; (8001324 <HAL_TIM_MspPostInit+0x68>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d11d      	bne.n	800131a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	4b12      	ldr	r3, [pc, #72]	; (8001328 <HAL_TIM_MspPostInit+0x6c>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e2:	4a11      	ldr	r2, [pc, #68]	; (8001328 <HAL_TIM_MspPostInit+0x6c>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <HAL_TIM_MspPostInit+0x6c>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001308:	2306      	movs	r3, #6
 800130a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	4619      	mov	r1, r3
 8001312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001316:	f002 fc25 	bl	8003b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800131a:	bf00      	nop
 800131c:	3720      	adds	r7, #32
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40012c00 	.word	0x40012c00
 8001328:	40021000 	.word	0x40021000

0800132c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001330:	e7fe      	b.n	8001330 <NMI_Handler+0x4>

08001332 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001336:	e7fe      	b.n	8001336 <HardFault_Handler+0x4>

08001338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800133c:	e7fe      	b.n	800133c <MemManage_Handler+0x4>

0800133e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001342:	e7fe      	b.n	8001342 <BusFault_Handler+0x4>

08001344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <UsageFault_Handler+0x4>

0800134a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001378:	f000 f8c6 	bl	8001508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}

08001380 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8001384:	4802      	ldr	r0, [pc, #8]	; (8001390 <ADC1_2_IRQHandler+0x10>)
 8001386:	f000 fe91 	bl	80020ac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200000e8 	.word	0x200000e8

08001394 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001398:	4803      	ldr	r0, [pc, #12]	; (80013a8 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 800139a:	f004 f943 	bl	8005624 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800139e:	4803      	ldr	r0, [pc, #12]	; (80013ac <TIM1_BRK_TIM15_IRQHandler+0x18>)
 80013a0:	f004 f940 	bl	8005624 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000210 	.word	0x20000210
 80013ac:	20000154 	.word	0x20000154

080013b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013b4:	4802      	ldr	r0, [pc, #8]	; (80013c0 <TIM2_IRQHandler+0x10>)
 80013b6:	f004 f935 	bl	8005624 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	2000025c 	.word	0x2000025c

080013c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013c8:	4805      	ldr	r0, [pc, #20]	; (80013e0 <TIM6_DAC_IRQHandler+0x1c>)
 80013ca:	f004 f92b 	bl	8005624 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80013ce:	4805      	ldr	r0, [pc, #20]	; (80013e4 <TIM6_DAC_IRQHandler+0x20>)
 80013d0:	f002 f98a 	bl	80036e8 <HAL_DAC_IRQHandler>
  HAL_DAC_IRQHandler(&hdac3);
 80013d4:	4804      	ldr	r0, [pc, #16]	; (80013e8 <TIM6_DAC_IRQHandler+0x24>)
 80013d6:	f002 f987 	bl	80036e8 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200001c4 	.word	0x200001c4
 80013e4:	200000d4 	.word	0x200000d4
 80013e8:	20000074 	.word	0x20000074

080013ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <SystemInit+0x20>)
 80013f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013f6:	4a05      	ldr	r2, [pc, #20]	; (800140c <SystemInit+0x20>)
 80013f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8001410:	480d      	ldr	r0, [pc, #52]	; (8001448 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001412:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001414:	480d      	ldr	r0, [pc, #52]	; (800144c <LoopForever+0x6>)
  ldr r1, =_edata
 8001416:	490e      	ldr	r1, [pc, #56]	; (8001450 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001418:	4a0e      	ldr	r2, [pc, #56]	; (8001454 <LoopForever+0xe>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800141c:	e002      	b.n	8001424 <LoopCopyDataInit>

0800141e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800141e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001422:	3304      	adds	r3, #4

08001424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001428:	d3f9      	bcc.n	800141e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800142a:	4a0b      	ldr	r2, [pc, #44]	; (8001458 <LoopForever+0x12>)
  ldr r4, =_ebss
 800142c:	4c0b      	ldr	r4, [pc, #44]	; (800145c <LoopForever+0x16>)
  movs r3, #0
 800142e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001430:	e001      	b.n	8001436 <LoopFillZerobss>

08001432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001434:	3204      	adds	r2, #4

08001436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001438:	d3fb      	bcc.n	8001432 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800143a:	f7ff ffd7 	bl	80013ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800143e:	f005 fcc9 	bl	8006dd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001442:	f7fe ff19 	bl	8000278 <main>

08001446 <LoopForever>:

LoopForever:
    b LoopForever
 8001446:	e7fe      	b.n	8001446 <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8001448:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800144c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001450:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001454:	08006e5c 	.word	0x08006e5c
  ldr r2, =_sbss
 8001458:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800145c:	200002ac 	.word	0x200002ac

08001460 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001460:	e7fe      	b.n	8001460 <COMP1_2_3_IRQHandler>

08001462 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001468:	2300      	movs	r3, #0
 800146a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800146c:	2003      	movs	r0, #3
 800146e:	f002 f887 	bl	8003580 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001472:	2000      	movs	r0, #0
 8001474:	f000 f80e 	bl	8001494 <HAL_InitTick>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d002      	beq.n	8001484 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	71fb      	strb	r3, [r7, #7]
 8001482:	e001      	b.n	8001488 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001484:	f7ff fd62 	bl	8000f4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001488:	79fb      	ldrb	r3, [r7, #7]

}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800149c:	2300      	movs	r3, #0
 800149e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80014a0:	4b16      	ldr	r3, [pc, #88]	; (80014fc <HAL_InitTick+0x68>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d022      	beq.n	80014ee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80014a8:	4b15      	ldr	r3, [pc, #84]	; (8001500 <HAL_InitTick+0x6c>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4b13      	ldr	r3, [pc, #76]	; (80014fc <HAL_InitTick+0x68>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80014b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014bc:	4618      	mov	r0, r3
 80014be:	f002 f892 	bl	80035e6 <HAL_SYSTICK_Config>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d10f      	bne.n	80014e8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b0f      	cmp	r3, #15
 80014cc:	d809      	bhi.n	80014e2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ce:	2200      	movs	r2, #0
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	f04f 30ff 	mov.w	r0, #4294967295
 80014d6:	f002 f85e 	bl	8003596 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014da:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <HAL_InitTick+0x70>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	e007      	b.n	80014f2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	73fb      	strb	r3, [r7, #15]
 80014e6:	e004      	b.n	80014f2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	73fb      	strb	r3, [r7, #15]
 80014ec:	e001      	b.n	80014f2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000010 	.word	0x20000010
 8001500:	20000008 	.word	0x20000008
 8001504:	2000000c 	.word	0x2000000c

08001508 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800150c:	4b05      	ldr	r3, [pc, #20]	; (8001524 <HAL_IncTick+0x1c>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <HAL_IncTick+0x20>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4413      	add	r3, r2
 8001516:	4a03      	ldr	r2, [pc, #12]	; (8001524 <HAL_IncTick+0x1c>)
 8001518:	6013      	str	r3, [r2, #0]
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	200002a8 	.word	0x200002a8
 8001528:	20000010 	.word	0x20000010

0800152c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return uwTick;
 8001530:	4b03      	ldr	r3, [pc, #12]	; (8001540 <HAL_GetTick+0x14>)
 8001532:	681b      	ldr	r3, [r3, #0]
}
 8001534:	4618      	mov	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	200002a8 	.word	0x200002a8

08001544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800154c:	f7ff ffee 	bl	800152c <HAL_GetTick>
 8001550:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800155c:	d004      	beq.n	8001568 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <HAL_Delay+0x40>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	4413      	add	r3, r2
 8001566:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001568:	bf00      	nop
 800156a:	f7ff ffdf 	bl	800152c <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	429a      	cmp	r2, r3
 8001578:	d8f7      	bhi.n	800156a <HAL_Delay+0x26>
  {
  }
}
 800157a:	bf00      	nop
 800157c:	bf00      	nop
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000010 	.word	0x20000010

08001588 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	431a      	orrs	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	609a      	str	r2, [r3, #8]
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
 80015b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	609a      	str	r2, [r3, #8]
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b087      	sub	sp, #28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
 80015fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	3360      	adds	r3, #96	; 0x60
 8001602:	461a      	mov	r2, r3
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b08      	ldr	r3, [pc, #32]	; (8001634 <LL_ADC_SetOffset+0x44>)
 8001612:	4013      	ands	r3, r2
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	430a      	orrs	r2, r1
 800161e:	4313      	orrs	r3, r2
 8001620:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001628:	bf00      	nop
 800162a:	371c      	adds	r7, #28
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	03fff000 	.word	0x03fff000

08001638 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3360      	adds	r3, #96	; 0x60
 8001646:	461a      	mov	r2, r3
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001658:	4618      	mov	r0, r3
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001664:	b480      	push	{r7}
 8001666:	b087      	sub	sp, #28
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	3360      	adds	r3, #96	; 0x60
 8001674:	461a      	mov	r2, r3
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	431a      	orrs	r2, r3
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800168e:	bf00      	nop
 8001690:	371c      	adds	r7, #28
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800169a:	b480      	push	{r7}
 800169c:	b087      	sub	sp, #28
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	3360      	adds	r3, #96	; 0x60
 80016aa:	461a      	mov	r2, r3
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	431a      	orrs	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80016c4:	bf00      	nop
 80016c6:	371c      	adds	r7, #28
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b087      	sub	sp, #28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	3360      	adds	r3, #96	; 0x60
 80016e0:	461a      	mov	r2, r3
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	431a      	orrs	r2, r3
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80016fa:	bf00      	nop
 80016fc:	371c      	adds	r7, #28
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	615a      	str	r2, [r3, #20]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001740:	2301      	movs	r3, #1
 8001742:	e000      	b.n	8001746 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001752:	b480      	push	{r7}
 8001754:	b087      	sub	sp, #28
 8001756:	af00      	add	r7, sp, #0
 8001758:	60f8      	str	r0, [r7, #12]
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	3330      	adds	r3, #48	; 0x30
 8001762:	461a      	mov	r2, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	0a1b      	lsrs	r3, r3, #8
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	f003 030c 	and.w	r3, r3, #12
 800176e:	4413      	add	r3, r2
 8001770:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	f003 031f 	and.w	r3, r3, #31
 800177c:	211f      	movs	r1, #31
 800177e:	fa01 f303 	lsl.w	r3, r1, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	401a      	ands	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	0e9b      	lsrs	r3, r3, #26
 800178a:	f003 011f 	and.w	r1, r3, #31
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	f003 031f 	and.w	r3, r3, #31
 8001794:	fa01 f303 	lsl.w	r3, r1, r3
 8001798:	431a      	orrs	r2, r3
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800179e:	bf00      	nop
 80017a0:	371c      	adds	r7, #28
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b087      	sub	sp, #28
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	3314      	adds	r3, #20
 80017e0:	461a      	mov	r2, r3
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	0e5b      	lsrs	r3, r3, #25
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	4413      	add	r3, r2
 80017ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	0d1b      	lsrs	r3, r3, #20
 80017f8:	f003 031f 	and.w	r3, r3, #31
 80017fc:	2107      	movs	r1, #7
 80017fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001802:	43db      	mvns	r3, r3
 8001804:	401a      	ands	r2, r3
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	0d1b      	lsrs	r3, r3, #20
 800180a:	f003 031f 	and.w	r3, r3, #31
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	fa01 f303 	lsl.w	r3, r1, r3
 8001814:	431a      	orrs	r2, r3
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800181a:	bf00      	nop
 800181c:	371c      	adds	r7, #28
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
	...

08001828 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001840:	43db      	mvns	r3, r3
 8001842:	401a      	ands	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f003 0318 	and.w	r3, r3, #24
 800184a:	4908      	ldr	r1, [pc, #32]	; (800186c <LL_ADC_SetChannelSingleDiff+0x44>)
 800184c:	40d9      	lsrs	r1, r3
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	400b      	ands	r3, r1
 8001852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001856:	431a      	orrs	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800185e:	bf00      	nop
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	0007ffff 	.word	0x0007ffff

08001870 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 031f 	and.w	r3, r3, #31
}
 8001880:	4618      	mov	r0, r3
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80018b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6093      	str	r3, [r2, #8]
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018e0:	d101      	bne.n	80018e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001904:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001908:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001930:	d101      	bne.n	8001936 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001932:	2301      	movs	r3, #1
 8001934:	e000      	b.n	8001938 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001954:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001958:	f043 0201 	orr.w	r2, r3, #1
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800197c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001980:	f043 0202 	orr.w	r2, r3, #2
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d101      	bne.n	80019ac <LL_ADC_IsEnabled+0x18>
 80019a8:	2301      	movs	r3, #1
 80019aa:	e000      	b.n	80019ae <LL_ADC_IsEnabled+0x1a>
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d101      	bne.n	80019d2 <LL_ADC_IsDisableOngoing+0x18>
 80019ce:	2301      	movs	r3, #1
 80019d0:	e000      	b.n	80019d4 <LL_ADC_IsDisableOngoing+0x1a>
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019f4:	f043 0204 	orr.w	r2, r3, #4
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a1c:	f043 0210 	orr.w	r2, r3, #16
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d101      	bne.n	8001a48 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a44:	2301      	movs	r3, #1
 8001a46:	e000      	b.n	8001a4a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a66:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a6a:	f043 0220 	orr.w	r2, r3, #32
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b08      	cmp	r3, #8
 8001a90:	d101      	bne.n	8001a96 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a92:	2301      	movs	r3, #1
 8001a94:	e000      	b.n	8001a98 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001aa4:	b590      	push	{r4, r7, lr}
 8001aa6:	b089      	sub	sp, #36	; 0x24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aac:	2300      	movs	r3, #0
 8001aae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e16d      	b.n	8001d9a <HAL_ADC_Init+0x2f6>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d109      	bne.n	8001ae0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7ff fa61 	bl	8000f94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fef1 	bl	80018cc <LL_ADC_IsDeepPowerDownEnabled>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d004      	beq.n	8001afa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fed7 	bl	80018a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff ff0c 	bl	800191c <LL_ADC_IsInternalRegulatorEnabled>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d115      	bne.n	8001b36 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fef0 	bl	80018f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b14:	4ba3      	ldr	r3, [pc, #652]	; (8001da4 <HAL_ADC_Init+0x300>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	099b      	lsrs	r3, r3, #6
 8001b1a:	4aa3      	ldr	r2, [pc, #652]	; (8001da8 <HAL_ADC_Init+0x304>)
 8001b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b20:	099b      	lsrs	r3, r3, #6
 8001b22:	3301      	adds	r3, #1
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b28:	e002      	b.n	8001b30 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f9      	bne.n	8001b2a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff feee 	bl	800191c <LL_ADC_IsInternalRegulatorEnabled>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10d      	bne.n	8001b62 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b4a:	f043 0210 	orr.w	r2, r3, #16
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b56:	f043 0201 	orr.w	r2, r3, #1
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff ff62 	bl	8001a30 <LL_ADC_REG_IsConversionOngoing>
 8001b6c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b72:	f003 0310 	and.w	r3, r3, #16
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f040 8106 	bne.w	8001d88 <HAL_ADC_Init+0x2e4>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f040 8102 	bne.w	8001d88 <HAL_ADC_Init+0x2e4>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b88:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b8c:	f043 0202 	orr.w	r2, r3, #2
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff fefb 	bl	8001994 <LL_ADC_IsEnabled>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d111      	bne.n	8001bc8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ba4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001ba8:	f7ff fef4 	bl	8001994 <LL_ADC_IsEnabled>
 8001bac:	4604      	mov	r4, r0
 8001bae:	487f      	ldr	r0, [pc, #508]	; (8001dac <HAL_ADC_Init+0x308>)
 8001bb0:	f7ff fef0 	bl	8001994 <LL_ADC_IsEnabled>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	4323      	orrs	r3, r4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d105      	bne.n	8001bc8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	487b      	ldr	r0, [pc, #492]	; (8001db0 <HAL_ADC_Init+0x30c>)
 8001bc4:	f7ff fce0 	bl	8001588 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	7f5b      	ldrb	r3, [r3, #29]
 8001bcc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bd2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001bd8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001bde:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001be6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d106      	bne.n	8001c04 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	045b      	lsls	r3, r3, #17
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d009      	beq.n	8001c20 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c10:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c18:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	4b63      	ldr	r3, [pc, #396]	; (8001db4 <HAL_ADC_Init+0x310>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6812      	ldr	r2, [r2, #0]
 8001c2e:	69b9      	ldr	r1, [r7, #24]
 8001c30:	430b      	orrs	r3, r1
 8001c32:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff feee 	bl	8001a30 <LL_ADC_REG_IsConversionOngoing>
 8001c54:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff ff0f 	bl	8001a7e <LL_ADC_INJ_IsConversionOngoing>
 8001c60:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d16d      	bne.n	8001d44 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d16a      	bne.n	8001d44 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c72:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c7a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c8a:	f023 0302 	bic.w	r3, r3, #2
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6812      	ldr	r2, [r2, #0]
 8001c92:	69b9      	ldr	r1, [r7, #24]
 8001c94:	430b      	orrs	r3, r1
 8001c96:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d017      	beq.n	8001cd0 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	691a      	ldr	r2, [r3, #16]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001cae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001cb8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001cbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6911      	ldr	r1, [r2, #16]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	6812      	ldr	r2, [r2, #0]
 8001cc8:	430b      	orrs	r3, r1
 8001cca:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001cce:	e013      	b.n	8001cf8 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	691a      	ldr	r2, [r3, #16]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001cde:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6812      	ldr	r2, [r2, #0]
 8001cec:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001cf0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cf4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d118      	bne.n	8001d34 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d0c:	f023 0304 	bic.w	r3, r3, #4
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d18:	4311      	orrs	r1, r2
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001d1e:	4311      	orrs	r1, r2
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d24:	430a      	orrs	r2, r1
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f042 0201 	orr.w	r2, r2, #1
 8001d30:	611a      	str	r2, [r3, #16]
 8001d32:	e007      	b.n	8001d44 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	691a      	ldr	r2, [r3, #16]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0201 	bic.w	r2, r2, #1
 8001d42:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d10c      	bne.n	8001d66 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f023 010f 	bic.w	r1, r3, #15
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	1e5a      	subs	r2, r3, #1
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	631a      	str	r2, [r3, #48]	; 0x30
 8001d64:	e007      	b.n	8001d76 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 020f 	bic.w	r2, r2, #15
 8001d74:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7a:	f023 0303 	bic.w	r3, r3, #3
 8001d7e:	f043 0201 	orr.w	r2, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d86:	e007      	b.n	8001d98 <HAL_ADC_Init+0x2f4>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8c:	f043 0210 	orr.w	r2, r3, #16
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d98:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3724      	adds	r7, #36	; 0x24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd90      	pop	{r4, r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000008 	.word	0x20000008
 8001da8:	053e2d63 	.word	0x053e2d63
 8001dac:	50000100 	.word	0x50000100
 8001db0:	50000300 	.word	0x50000300
 8001db4:	fff04007 	.word	0xfff04007

08001db8 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001dc0:	4894      	ldr	r0, [pc, #592]	; (8002014 <HAL_ADC_Start_IT+0x25c>)
 8001dc2:	f7ff fd55 	bl	8001870 <LL_ADC_GetMultimode>
 8001dc6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff fe2f 	bl	8001a30 <LL_ADC_REG_IsConversionOngoing>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f040 8114 	bne.w	8002002 <HAL_ADC_Start_IT+0x24a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d101      	bne.n	8001de8 <HAL_ADC_Start_IT+0x30>
 8001de4:	2302      	movs	r3, #2
 8001de6:	e111      	b.n	800200c <HAL_ADC_Start_IT+0x254>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f001 f835 	bl	8002e60 <ADC_Enable>
 8001df6:	4603      	mov	r3, r0
 8001df8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001dfa:	7dfb      	ldrb	r3, [r7, #23]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f040 80fb 	bne.w	8001ff8 <HAL_ADC_Start_IT+0x240>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e06:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e0a:	f023 0301 	bic.w	r3, r3, #1
 8001e0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a7f      	ldr	r2, [pc, #508]	; (8002018 <HAL_ADC_Start_IT+0x260>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d002      	beq.n	8001e26 <HAL_ADC_Start_IT+0x6e>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	e001      	b.n	8001e2a <HAL_ADC_Start_IT+0x72>
 8001e26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6812      	ldr	r2, [r2, #0]
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d002      	beq.n	8001e38 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d105      	bne.n	8001e44 <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d006      	beq.n	8001e5e <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e54:	f023 0206 	bic.w	r2, r3, #6
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	661a      	str	r2, [r3, #96]	; 0x60
 8001e5c:	e002      	b.n	8001e64 <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	221c      	movs	r2, #28
 8001e6a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 021c 	bic.w	r2, r2, #28
 8001e82:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d108      	bne.n	8001e9e <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0208 	orr.w	r2, r2, #8
 8001e9a:	605a      	str	r2, [r3, #4]
          break;
 8001e9c:	e008      	b.n	8001eb0 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f042 0204 	orr.w	r2, r2, #4
 8001eac:	605a      	str	r2, [r3, #4]
          break;
 8001eae:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d107      	bne.n	8001ec8 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0210 	orr.w	r2, r2, #16
 8001ec6:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a52      	ldr	r2, [pc, #328]	; (8002018 <HAL_ADC_Start_IT+0x260>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d002      	beq.n	8001ed8 <HAL_ADC_Start_IT+0x120>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	e001      	b.n	8001edc <HAL_ADC_Start_IT+0x124>
 8001ed8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d008      	beq.n	8001ef6 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d005      	beq.n	8001ef6 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	2b05      	cmp	r3, #5
 8001eee:	d002      	beq.n	8001ef6 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	2b09      	cmp	r3, #9
 8001ef4:	d13b      	bne.n	8001f6e <HAL_ADC_Start_IT+0x1b6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d02d      	beq.n	8001f60 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f08:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f0c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	2b08      	cmp	r3, #8
 8001f1a:	d110      	bne.n	8001f3e <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0220 	bic.w	r2, r2, #32
 8001f2a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f3a:	605a      	str	r2, [r3, #4]
              break;
 8001f3c:	e011      	b.n	8001f62 <HAL_ADC_Start_IT+0x1aa>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f4c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f042 0220 	orr.w	r2, r2, #32
 8001f5c:	605a      	str	r2, [r3, #4]
              break;
 8001f5e:	e000      	b.n	8001f62 <HAL_ADC_Start_IT+0x1aa>
          }
        }
 8001f60:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fd3a 	bl	80019e0 <LL_ADC_REG_StartConversion>
 8001f6c:	e04d      	b.n	800200a <HAL_ADC_Start_IT+0x252>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f72:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a26      	ldr	r2, [pc, #152]	; (8002018 <HAL_ADC_Start_IT+0x260>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d002      	beq.n	8001f8a <HAL_ADC_Start_IT+0x1d2>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	e001      	b.n	8001f8e <HAL_ADC_Start_IT+0x1d6>
 8001f8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f8e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d035      	beq.n	8002008 <HAL_ADC_Start_IT+0x250>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fa4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	2b08      	cmp	r3, #8
 8001fb2:	d110      	bne.n	8001fd6 <HAL_ADC_Start_IT+0x21e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 0220 	bic.w	r2, r2, #32
 8001fc2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fd2:	605a      	str	r2, [r3, #4]
              break;
 8001fd4:	e019      	b.n	800200a <HAL_ADC_Start_IT+0x252>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fe4:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f042 0220 	orr.w	r2, r2, #32
 8001ff4:	605a      	str	r2, [r3, #4]
              break;
 8001ff6:	e008      	b.n	800200a <HAL_ADC_Start_IT+0x252>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002000:	e003      	b.n	800200a <HAL_ADC_Start_IT+0x252>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002002:	2302      	movs	r3, #2
 8002004:	75fb      	strb	r3, [r7, #23]
 8002006:	e000      	b.n	800200a <HAL_ADC_Start_IT+0x252>
        }
 8002008:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 800200a:	7dfb      	ldrb	r3, [r7, #23]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	50000300 	.word	0x50000300
 8002018:	50000100 	.word	0x50000100

0800201c <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800202a:	2b01      	cmp	r3, #1
 800202c:	d101      	bne.n	8002032 <HAL_ADC_Stop_IT+0x16>
 800202e:	2302      	movs	r3, #2
 8002030:	e02b      	b.n	800208a <HAL_ADC_Stop_IT+0x6e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800203a:	2103      	movs	r1, #3
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 fe53 	bl	8002ce8 <ADC_ConversionStop>
 8002042:	4603      	mov	r3, r0
 8002044:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002046:	7bfb      	ldrb	r3, [r7, #15]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d119      	bne.n	8002080 <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 021c 	bic.w	r2, r2, #28
 800205a:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 ff61 	bl	8002f24 <ADC_Disable>
 8002062:	4603      	mov	r3, r0
 8002064:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002066:	7bfb      	ldrb	r3, [r7, #15]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d109      	bne.n	8002080 <HAL_ADC_Stop_IT+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002070:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002074:	f023 0301 	bic.w	r3, r3, #1
 8002078:	f043 0201 	orr.w	r2, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002088:	7bfb      	ldrb	r3, [r7, #15]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08a      	sub	sp, #40	; 0x28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80020b4:	2300      	movs	r3, #0
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020c8:	4883      	ldr	r0, [pc, #524]	; (80022d8 <HAL_ADC_IRQHandler+0x22c>)
 80020ca:	f7ff fbd1 	bl	8001870 <LL_ADC_GetMultimode>
 80020ce:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d017      	beq.n	800210a <HAL_ADC_IRQHandler+0x5e>
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d012      	beq.n	800210a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e8:	f003 0310 	and.w	r3, r3, #16
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d105      	bne.n	80020fc <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 ff98 	bl	8003032 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2202      	movs	r2, #2
 8002108:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d004      	beq.n	800211e <HAL_ADC_IRQHandler+0x72>
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10a      	bne.n	8002134 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 8085 	beq.w	8002234 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	f003 0308 	and.w	r3, r3, #8
 8002130:	2b00      	cmp	r3, #0
 8002132:	d07f      	beq.n	8002234 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002138:	f003 0310 	and.w	r3, r3, #16
 800213c:	2b00      	cmp	r3, #0
 800213e:	d105      	bne.n	800214c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002144:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff faeb 	bl	800172c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d064      	beq.n	8002226 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a5e      	ldr	r2, [pc, #376]	; (80022dc <HAL_ADC_IRQHandler+0x230>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d002      	beq.n	800216c <HAL_ADC_IRQHandler+0xc0>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	e001      	b.n	8002170 <HAL_ADC_IRQHandler+0xc4>
 800216c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	4293      	cmp	r3, r2
 8002176:	d008      	beq.n	800218a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d005      	beq.n	800218a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	2b05      	cmp	r3, #5
 8002182:	d002      	beq.n	800218a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	2b09      	cmp	r3, #9
 8002188:	d104      	bne.n	8002194 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	623b      	str	r3, [r7, #32]
 8002192:	e00d      	b.n	80021b0 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a50      	ldr	r2, [pc, #320]	; (80022dc <HAL_ADC_IRQHandler+0x230>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d002      	beq.n	80021a4 <HAL_ADC_IRQHandler+0xf8>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	e001      	b.n	80021a8 <HAL_ADC_IRQHandler+0xfc>
 80021a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80021a8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80021b0:	6a3b      	ldr	r3, [r7, #32]
 80021b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d135      	bne.n	8002226 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0308 	and.w	r3, r3, #8
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d12e      	bne.n	8002226 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff fc2f 	bl	8001a30 <LL_ADC_REG_IsConversionOngoing>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d11a      	bne.n	800220e <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 020c 	bic.w	r2, r2, #12
 80021e6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d112      	bne.n	8002226 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002204:	f043 0201 	orr.w	r2, r3, #1
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	65da      	str	r2, [r3, #92]	; 0x5c
 800220c:	e00b      	b.n	8002226 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002212:	f043 0210 	orr.w	r2, r3, #16
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800221e:	f043 0201 	orr.w	r2, r3, #1
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7fe fd12 	bl	8000c50 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	220c      	movs	r2, #12
 8002232:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f003 0320 	and.w	r3, r3, #32
 800223a:	2b00      	cmp	r3, #0
 800223c:	d004      	beq.n	8002248 <HAL_ADC_IRQHandler+0x19c>
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	f003 0320 	and.w	r3, r3, #32
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10b      	bne.n	8002260 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 809e 	beq.w	8002390 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225a:	2b00      	cmp	r3, #0
 800225c:	f000 8098 	beq.w	8002390 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002264:	f003 0310 	and.w	r3, r3, #16
 8002268:	2b00      	cmp	r3, #0
 800226a:	d105      	bne.n	8002278 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002270:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fa94 	bl	80017aa <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002282:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fa4f 	bl	800172c <LL_ADC_REG_IsTriggerSourceSWStart>
 800228e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a11      	ldr	r2, [pc, #68]	; (80022dc <HAL_ADC_IRQHandler+0x230>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d002      	beq.n	80022a0 <HAL_ADC_IRQHandler+0x1f4>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	e001      	b.n	80022a4 <HAL_ADC_IRQHandler+0x1f8>
 80022a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d008      	beq.n	80022be <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d005      	beq.n	80022be <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2b06      	cmp	r3, #6
 80022b6:	d002      	beq.n	80022be <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	2b07      	cmp	r3, #7
 80022bc:	d104      	bne.n	80022c8 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	623b      	str	r3, [r7, #32]
 80022c6:	e011      	b.n	80022ec <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a03      	ldr	r2, [pc, #12]	; (80022dc <HAL_ADC_IRQHandler+0x230>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d006      	beq.n	80022e0 <HAL_ADC_IRQHandler+0x234>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	e005      	b.n	80022e4 <HAL_ADC_IRQHandler+0x238>
 80022d8:	50000300 	.word	0x50000300
 80022dc:	50000100 	.word	0x50000100
 80022e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022e4:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d047      	beq.n	8002382 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d007      	beq.n	800230c <HAL_ADC_IRQHandler+0x260>
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d03f      	beq.n	8002382 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002308:	2b00      	cmp	r3, #0
 800230a:	d13a      	bne.n	8002382 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002316:	2b40      	cmp	r3, #64	; 0x40
 8002318:	d133      	bne.n	8002382 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800231a:	6a3b      	ldr	r3, [r7, #32]
 800231c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d12e      	bne.n	8002382 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff fba8 	bl	8001a7e <LL_ADC_INJ_IsConversionOngoing>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d11a      	bne.n	800236a <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002342:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002348:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002358:	2b00      	cmp	r3, #0
 800235a:	d112      	bne.n	8002382 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002360:	f043 0201 	orr.w	r2, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	65da      	str	r2, [r3, #92]	; 0x5c
 8002368:	e00b      	b.n	8002382 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236e:	f043 0210 	orr.w	r2, r3, #16
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800237a:	f043 0201 	orr.w	r2, r3, #1
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 fe2d 	bl	8002fe2 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2260      	movs	r2, #96	; 0x60
 800238e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002396:	2b00      	cmp	r3, #0
 8002398:	d011      	beq.n	80023be <HAL_ADC_IRQHandler+0x312>
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00c      	beq.n	80023be <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f895 	bl	80024e0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2280      	movs	r2, #128	; 0x80
 80023bc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d012      	beq.n	80023ee <HAL_ADC_IRQHandler+0x342>
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00d      	beq.n	80023ee <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 fe13 	bl	800300a <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023ec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d012      	beq.n	800241e <HAL_ADC_IRQHandler+0x372>
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00d      	beq.n	800241e <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002406:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 fe05 	bl	800301e <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f44f 7200 	mov.w	r2, #512	; 0x200
 800241c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	f003 0310 	and.w	r3, r3, #16
 8002424:	2b00      	cmp	r3, #0
 8002426:	d036      	beq.n	8002496 <HAL_ADC_IRQHandler+0x3ea>
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	f003 0310 	and.w	r3, r3, #16
 800242e:	2b00      	cmp	r3, #0
 8002430:	d031      	beq.n	8002496 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002436:	2b00      	cmp	r3, #0
 8002438:	d102      	bne.n	8002440 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 800243a:	2301      	movs	r3, #1
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
 800243e:	e014      	b.n	800246a <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d008      	beq.n	8002458 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002446:	4825      	ldr	r0, [pc, #148]	; (80024dc <HAL_ADC_IRQHandler+0x430>)
 8002448:	f7ff fa20 	bl	800188c <LL_ADC_GetMultiDMATransfer>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00b      	beq.n	800246a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002452:	2301      	movs	r3, #1
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
 8002456:	e008      	b.n	800246a <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002466:	2301      	movs	r3, #1
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	2b01      	cmp	r3, #1
 800246e:	d10e      	bne.n	800248e <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002474:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002480:	f043 0202 	orr.w	r2, r3, #2
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 f833 	bl	80024f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2210      	movs	r2, #16
 8002494:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800249c:	2b00      	cmp	r3, #0
 800249e:	d018      	beq.n	80024d2 <HAL_ADC_IRQHandler+0x426>
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d013      	beq.n	80024d2 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ae:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ba:	f043 0208 	orr.w	r2, r3, #8
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024ca:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 fd92 	bl	8002ff6 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80024d2:	bf00      	nop
 80024d4:	3728      	adds	r7, #40	; 0x28
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	50000300 	.word	0x50000300

080024e0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b0b6      	sub	sp, #216	; 0xd8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002518:	2300      	movs	r3, #0
 800251a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002522:	2b01      	cmp	r3, #1
 8002524:	d101      	bne.n	800252a <HAL_ADC_ConfigChannel+0x22>
 8002526:	2302      	movs	r3, #2
 8002528:	e3c8      	b.n	8002cbc <HAL_ADC_ConfigChannel+0x7b4>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff fa7a 	bl	8001a30 <LL_ADC_REG_IsConversionOngoing>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	f040 83ad 	bne.w	8002c9e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6818      	ldr	r0, [r3, #0]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	6859      	ldr	r1, [r3, #4]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	461a      	mov	r2, r3
 8002552:	f7ff f8fe 	bl	8001752 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff fa68 	bl	8001a30 <LL_ADC_REG_IsConversionOngoing>
 8002560:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff fa88 	bl	8001a7e <LL_ADC_INJ_IsConversionOngoing>
 800256e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002572:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002576:	2b00      	cmp	r3, #0
 8002578:	f040 81d9 	bne.w	800292e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800257c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002580:	2b00      	cmp	r3, #0
 8002582:	f040 81d4 	bne.w	800292e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800258e:	d10f      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6818      	ldr	r0, [r3, #0]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2200      	movs	r2, #0
 800259a:	4619      	mov	r1, r3
 800259c:	f7ff f918 	bl	80017d0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff f8ac 	bl	8001706 <LL_ADC_SetSamplingTimeCommonConfig>
 80025ae:	e00e      	b.n	80025ce <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	6819      	ldr	r1, [r3, #0]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	461a      	mov	r2, r3
 80025be:	f7ff f907 	bl	80017d0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2100      	movs	r1, #0
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff f89c 	bl	8001706 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	695a      	ldr	r2, [r3, #20]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	08db      	lsrs	r3, r3, #3
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d022      	beq.n	8002636 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6818      	ldr	r0, [r3, #0]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	6919      	ldr	r1, [r3, #16]
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002600:	f7fe fff6 	bl	80015f0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6818      	ldr	r0, [r3, #0]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	6919      	ldr	r1, [r3, #16]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	461a      	mov	r2, r3
 8002612:	f7ff f842 	bl	800169a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6818      	ldr	r0, [r3, #0]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	6919      	ldr	r1, [r3, #16]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	7f1b      	ldrb	r3, [r3, #28]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d102      	bne.n	800262c <HAL_ADC_ConfigChannel+0x124>
 8002626:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800262a:	e000      	b.n	800262e <HAL_ADC_ConfigChannel+0x126>
 800262c:	2300      	movs	r3, #0
 800262e:	461a      	mov	r2, r3
 8002630:	f7ff f84e 	bl	80016d0 <LL_ADC_SetOffsetSaturation>
 8002634:	e17b      	b.n	800292e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2100      	movs	r1, #0
 800263c:	4618      	mov	r0, r3
 800263e:	f7fe fffb 	bl	8001638 <LL_ADC_GetOffsetChannel>
 8002642:	4603      	mov	r3, r0
 8002644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10a      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x15a>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2100      	movs	r1, #0
 8002652:	4618      	mov	r0, r3
 8002654:	f7fe fff0 	bl	8001638 <LL_ADC_GetOffsetChannel>
 8002658:	4603      	mov	r3, r0
 800265a:	0e9b      	lsrs	r3, r3, #26
 800265c:	f003 021f 	and.w	r2, r3, #31
 8002660:	e01e      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x198>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2100      	movs	r1, #0
 8002668:	4618      	mov	r0, r3
 800266a:	f7fe ffe5 	bl	8001638 <LL_ADC_GetOffsetChannel>
 800266e:	4603      	mov	r3, r0
 8002670:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002674:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002678:	fa93 f3a3 	rbit	r3, r3
 800267c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002680:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002684:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002688:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002690:	2320      	movs	r3, #32
 8002692:	e004      	b.n	800269e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002694:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002698:	fab3 f383 	clz	r3, r3
 800269c:	b2db      	uxtb	r3, r3
 800269e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d105      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x1b0>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	0e9b      	lsrs	r3, r3, #26
 80026b2:	f003 031f 	and.w	r3, r3, #31
 80026b6:	e018      	b.n	80026ea <HAL_ADC_ConfigChannel+0x1e2>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80026c4:	fa93 f3a3 	rbit	r3, r3
 80026c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80026cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80026d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80026dc:	2320      	movs	r3, #32
 80026de:	e004      	b.n	80026ea <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80026e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80026e4:	fab3 f383 	clz	r3, r3
 80026e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d106      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2200      	movs	r2, #0
 80026f4:	2100      	movs	r1, #0
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fe ffb4 	bl	8001664 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2101      	movs	r1, #1
 8002702:	4618      	mov	r0, r3
 8002704:	f7fe ff98 	bl	8001638 <LL_ADC_GetOffsetChannel>
 8002708:	4603      	mov	r3, r0
 800270a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10a      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x220>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2101      	movs	r1, #1
 8002718:	4618      	mov	r0, r3
 800271a:	f7fe ff8d 	bl	8001638 <LL_ADC_GetOffsetChannel>
 800271e:	4603      	mov	r3, r0
 8002720:	0e9b      	lsrs	r3, r3, #26
 8002722:	f003 021f 	and.w	r2, r3, #31
 8002726:	e01e      	b.n	8002766 <HAL_ADC_ConfigChannel+0x25e>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2101      	movs	r1, #1
 800272e:	4618      	mov	r0, r3
 8002730:	f7fe ff82 	bl	8001638 <LL_ADC_GetOffsetChannel>
 8002734:	4603      	mov	r3, r0
 8002736:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800273e:	fa93 f3a3 	rbit	r3, r3
 8002742:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002746:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800274a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800274e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002756:	2320      	movs	r3, #32
 8002758:	e004      	b.n	8002764 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800275a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800276e:	2b00      	cmp	r3, #0
 8002770:	d105      	bne.n	800277e <HAL_ADC_ConfigChannel+0x276>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	0e9b      	lsrs	r3, r3, #26
 8002778:	f003 031f 	and.w	r3, r3, #31
 800277c:	e018      	b.n	80027b0 <HAL_ADC_ConfigChannel+0x2a8>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002786:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800278a:	fa93 f3a3 	rbit	r3, r3
 800278e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002792:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002796:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800279a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80027a2:	2320      	movs	r3, #32
 80027a4:	e004      	b.n	80027b0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80027a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027aa:	fab3 f383 	clz	r3, r3
 80027ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d106      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2200      	movs	r2, #0
 80027ba:	2101      	movs	r1, #1
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fe ff51 	bl	8001664 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2102      	movs	r1, #2
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7fe ff35 	bl	8001638 <LL_ADC_GetOffsetChannel>
 80027ce:	4603      	mov	r3, r0
 80027d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10a      	bne.n	80027ee <HAL_ADC_ConfigChannel+0x2e6>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2102      	movs	r1, #2
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fe ff2a 	bl	8001638 <LL_ADC_GetOffsetChannel>
 80027e4:	4603      	mov	r3, r0
 80027e6:	0e9b      	lsrs	r3, r3, #26
 80027e8:	f003 021f 	and.w	r2, r3, #31
 80027ec:	e01e      	b.n	800282c <HAL_ADC_ConfigChannel+0x324>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2102      	movs	r1, #2
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7fe ff1f 	bl	8001638 <LL_ADC_GetOffsetChannel>
 80027fa:	4603      	mov	r3, r0
 80027fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002804:	fa93 f3a3 	rbit	r3, r3
 8002808:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800280c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002810:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002814:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800281c:	2320      	movs	r3, #32
 800281e:	e004      	b.n	800282a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002820:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002824:	fab3 f383 	clz	r3, r3
 8002828:	b2db      	uxtb	r3, r3
 800282a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002834:	2b00      	cmp	r3, #0
 8002836:	d105      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x33c>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	0e9b      	lsrs	r3, r3, #26
 800283e:	f003 031f 	and.w	r3, r3, #31
 8002842:	e016      	b.n	8002872 <HAL_ADC_ConfigChannel+0x36a>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002850:	fa93 f3a3 	rbit	r3, r3
 8002854:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002856:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002858:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800285c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002864:	2320      	movs	r3, #32
 8002866:	e004      	b.n	8002872 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002868:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800286c:	fab3 f383 	clz	r3, r3
 8002870:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002872:	429a      	cmp	r2, r3
 8002874:	d106      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2200      	movs	r2, #0
 800287c:	2102      	movs	r1, #2
 800287e:	4618      	mov	r0, r3
 8002880:	f7fe fef0 	bl	8001664 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2103      	movs	r1, #3
 800288a:	4618      	mov	r0, r3
 800288c:	f7fe fed4 	bl	8001638 <LL_ADC_GetOffsetChannel>
 8002890:	4603      	mov	r3, r0
 8002892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10a      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x3a8>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2103      	movs	r1, #3
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7fe fec9 	bl	8001638 <LL_ADC_GetOffsetChannel>
 80028a6:	4603      	mov	r3, r0
 80028a8:	0e9b      	lsrs	r3, r3, #26
 80028aa:	f003 021f 	and.w	r2, r3, #31
 80028ae:	e017      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x3d8>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2103      	movs	r1, #3
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe febe 	bl	8001638 <LL_ADC_GetOffsetChannel>
 80028bc:	4603      	mov	r3, r0
 80028be:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028c2:	fa93 f3a3 	rbit	r3, r3
 80028c6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80028c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028ca:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80028cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80028d2:	2320      	movs	r3, #32
 80028d4:	e003      	b.n	80028de <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80028d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028d8:	fab3 f383 	clz	r3, r3
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d105      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x3f0>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	0e9b      	lsrs	r3, r3, #26
 80028f2:	f003 031f 	and.w	r3, r3, #31
 80028f6:	e011      	b.n	800291c <HAL_ADC_ConfigChannel+0x414>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002900:	fa93 f3a3 	rbit	r3, r3
 8002904:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002906:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002908:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800290a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002910:	2320      	movs	r3, #32
 8002912:	e003      	b.n	800291c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002916:	fab3 f383 	clz	r3, r3
 800291a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800291c:	429a      	cmp	r2, r3
 800291e:	d106      	bne.n	800292e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2200      	movs	r2, #0
 8002926:	2103      	movs	r1, #3
 8002928:	4618      	mov	r0, r3
 800292a:	f7fe fe9b 	bl	8001664 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff f82e 	bl	8001994 <LL_ADC_IsEnabled>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	f040 8140 	bne.w	8002bc0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	6819      	ldr	r1, [r3, #0]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	461a      	mov	r2, r3
 800294e:	f7fe ff6b 	bl	8001828 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	4a8f      	ldr	r2, [pc, #572]	; (8002b94 <HAL_ADC_ConfigChannel+0x68c>)
 8002958:	4293      	cmp	r3, r2
 800295a:	f040 8131 	bne.w	8002bc0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10b      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x47e>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	0e9b      	lsrs	r3, r3, #26
 8002974:	3301      	adds	r3, #1
 8002976:	f003 031f 	and.w	r3, r3, #31
 800297a:	2b09      	cmp	r3, #9
 800297c:	bf94      	ite	ls
 800297e:	2301      	movls	r3, #1
 8002980:	2300      	movhi	r3, #0
 8002982:	b2db      	uxtb	r3, r3
 8002984:	e019      	b.n	80029ba <HAL_ADC_ConfigChannel+0x4b2>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800298e:	fa93 f3a3 	rbit	r3, r3
 8002992:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002994:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002996:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002998:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800299e:	2320      	movs	r3, #32
 80029a0:	e003      	b.n	80029aa <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80029a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029a4:	fab3 f383 	clz	r3, r3
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	3301      	adds	r3, #1
 80029ac:	f003 031f 	and.w	r3, r3, #31
 80029b0:	2b09      	cmp	r3, #9
 80029b2:	bf94      	ite	ls
 80029b4:	2301      	movls	r3, #1
 80029b6:	2300      	movhi	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d079      	beq.n	8002ab2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d107      	bne.n	80029da <HAL_ADC_ConfigChannel+0x4d2>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	0e9b      	lsrs	r3, r3, #26
 80029d0:	3301      	adds	r3, #1
 80029d2:	069b      	lsls	r3, r3, #26
 80029d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029d8:	e015      	b.n	8002a06 <HAL_ADC_ConfigChannel+0x4fe>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029e2:	fa93 f3a3 	rbit	r3, r3
 80029e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80029e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029ea:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80029ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80029f2:	2320      	movs	r3, #32
 80029f4:	e003      	b.n	80029fe <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80029f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029f8:	fab3 f383 	clz	r3, r3
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	3301      	adds	r3, #1
 8002a00:	069b      	lsls	r3, r3, #26
 8002a02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d109      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x51e>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	0e9b      	lsrs	r3, r3, #26
 8002a18:	3301      	adds	r3, #1
 8002a1a:	f003 031f 	and.w	r3, r3, #31
 8002a1e:	2101      	movs	r1, #1
 8002a20:	fa01 f303 	lsl.w	r3, r1, r3
 8002a24:	e017      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x54e>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a2e:	fa93 f3a3 	rbit	r3, r3
 8002a32:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a36:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002a38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002a3e:	2320      	movs	r3, #32
 8002a40:	e003      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a44:	fab3 f383 	clz	r3, r3
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	f003 031f 	and.w	r3, r3, #31
 8002a50:	2101      	movs	r1, #1
 8002a52:	fa01 f303 	lsl.w	r3, r1, r3
 8002a56:	ea42 0103 	orr.w	r1, r2, r3
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10a      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x574>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	0e9b      	lsrs	r3, r3, #26
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	f003 021f 	and.w	r2, r3, #31
 8002a72:	4613      	mov	r3, r2
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	4413      	add	r3, r2
 8002a78:	051b      	lsls	r3, r3, #20
 8002a7a:	e018      	b.n	8002aae <HAL_ADC_ConfigChannel+0x5a6>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a84:	fa93 f3a3 	rbit	r3, r3
 8002a88:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002a94:	2320      	movs	r3, #32
 8002a96:	e003      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a9a:	fab3 f383 	clz	r3, r3
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	f003 021f 	and.w	r2, r3, #31
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	4413      	add	r3, r2
 8002aac:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aae:	430b      	orrs	r3, r1
 8002ab0:	e081      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d107      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x5c6>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	0e9b      	lsrs	r3, r3, #26
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	069b      	lsls	r3, r3, #26
 8002ac8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002acc:	e015      	b.n	8002afa <HAL_ADC_ConfigChannel+0x5f2>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad6:	fa93 f3a3 	rbit	r3, r3
 8002ada:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ade:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002ae6:	2320      	movs	r3, #32
 8002ae8:	e003      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aec:	fab3 f383 	clz	r3, r3
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	3301      	adds	r3, #1
 8002af4:	069b      	lsls	r3, r3, #26
 8002af6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d109      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x612>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	0e9b      	lsrs	r3, r3, #26
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	f003 031f 	and.w	r3, r3, #31
 8002b12:	2101      	movs	r1, #1
 8002b14:	fa01 f303 	lsl.w	r3, r1, r3
 8002b18:	e017      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x642>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	fa93 f3a3 	rbit	r3, r3
 8002b26:	61fb      	str	r3, [r7, #28]
  return result;
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002b32:	2320      	movs	r3, #32
 8002b34:	e003      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	fab3 f383 	clz	r3, r3
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	3301      	adds	r3, #1
 8002b40:	f003 031f 	and.w	r3, r3, #31
 8002b44:	2101      	movs	r1, #1
 8002b46:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4a:	ea42 0103 	orr.w	r1, r2, r3
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10d      	bne.n	8002b76 <HAL_ADC_ConfigChannel+0x66e>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	0e9b      	lsrs	r3, r3, #26
 8002b60:	3301      	adds	r3, #1
 8002b62:	f003 021f 	and.w	r2, r3, #31
 8002b66:	4613      	mov	r3, r2
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3b1e      	subs	r3, #30
 8002b6e:	051b      	lsls	r3, r3, #20
 8002b70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b74:	e01e      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x6ac>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	fa93 f3a3 	rbit	r3, r3
 8002b82:	613b      	str	r3, [r7, #16]
  return result;
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d104      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002b8e:	2320      	movs	r3, #32
 8002b90:	e006      	b.n	8002ba0 <HAL_ADC_ConfigChannel+0x698>
 8002b92:	bf00      	nop
 8002b94:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	fab3 f383 	clz	r3, r3
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	f003 021f 	and.w	r2, r3, #31
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	4413      	add	r3, r2
 8002bac:	3b1e      	subs	r3, #30
 8002bae:	051b      	lsls	r3, r3, #20
 8002bb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bb4:	430b      	orrs	r3, r1
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	6892      	ldr	r2, [r2, #8]
 8002bba:	4619      	mov	r1, r3
 8002bbc:	f7fe fe08 	bl	80017d0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	4b3f      	ldr	r3, [pc, #252]	; (8002cc4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d071      	beq.n	8002cb0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bcc:	483e      	ldr	r0, [pc, #248]	; (8002cc8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002bce:	f7fe fd01 	bl	80015d4 <LL_ADC_GetCommonPathInternalCh>
 8002bd2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a3c      	ldr	r2, [pc, #240]	; (8002ccc <HAL_ADC_ConfigChannel+0x7c4>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d004      	beq.n	8002bea <HAL_ADC_ConfigChannel+0x6e2>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a3a      	ldr	r2, [pc, #232]	; (8002cd0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d127      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002bea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d121      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bfe:	d157      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c08:	4619      	mov	r1, r3
 8002c0a:	482f      	ldr	r0, [pc, #188]	; (8002cc8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c0c:	f7fe fccf 	bl	80015ae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c10:	4b30      	ldr	r3, [pc, #192]	; (8002cd4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	099b      	lsrs	r3, r3, #6
 8002c16:	4a30      	ldr	r2, [pc, #192]	; (8002cd8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002c18:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1c:	099b      	lsrs	r3, r3, #6
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	4613      	mov	r3, r2
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c2a:	e002      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1f9      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c38:	e03a      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a27      	ldr	r2, [pc, #156]	; (8002cdc <HAL_ADC_ConfigChannel+0x7d4>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d113      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x764>
 8002c44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10d      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a22      	ldr	r2, [pc, #136]	; (8002ce0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d02a      	beq.n	8002cb0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c62:	4619      	mov	r1, r3
 8002c64:	4818      	ldr	r0, [pc, #96]	; (8002cc8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c66:	f7fe fca2 	bl	80015ae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c6a:	e021      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a1c      	ldr	r2, [pc, #112]	; (8002ce4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d11c      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d116      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a16      	ldr	r2, [pc, #88]	; (8002ce0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d011      	beq.n	8002cb0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c94:	4619      	mov	r1, r3
 8002c96:	480c      	ldr	r0, [pc, #48]	; (8002cc8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c98:	f7fe fc89 	bl	80015ae <LL_ADC_SetCommonPathInternalCh>
 8002c9c:	e008      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca2:	f043 0220 	orr.w	r2, r3, #32
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002cb8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	37d8      	adds	r7, #216	; 0xd8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	80080000 	.word	0x80080000
 8002cc8:	50000300 	.word	0x50000300
 8002ccc:	c3210000 	.word	0xc3210000
 8002cd0:	90c00010 	.word	0x90c00010
 8002cd4:	20000008 	.word	0x20000008
 8002cd8:	053e2d63 	.word	0x053e2d63
 8002cdc:	c7520000 	.word	0xc7520000
 8002ce0:	50000100 	.word	0x50000100
 8002ce4:	cb840000 	.word	0xcb840000

08002ce8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b088      	sub	sp, #32
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fe fe96 	bl	8001a30 <LL_ADC_REG_IsConversionOngoing>
 8002d04:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fe feb7 	bl	8001a7e <LL_ADC_INJ_IsConversionOngoing>
 8002d10:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d103      	bne.n	8002d20 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 8098 	beq.w	8002e50 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d02a      	beq.n	8002d84 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	7f5b      	ldrb	r3, [r3, #29]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d126      	bne.n	8002d84 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	7f1b      	ldrb	r3, [r3, #28]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d122      	bne.n	8002d84 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002d42:	e014      	b.n	8002d6e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	4a45      	ldr	r2, [pc, #276]	; (8002e5c <ADC_ConversionStop+0x174>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d90d      	bls.n	8002d68 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d50:	f043 0210 	orr.w	r2, r3, #16
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d5c:	f043 0201 	orr.w	r2, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e074      	b.n	8002e52 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d78:	2b40      	cmp	r3, #64	; 0x40
 8002d7a:	d1e3      	bne.n	8002d44 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2240      	movs	r2, #64	; 0x40
 8002d82:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d014      	beq.n	8002db4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fe fe4e 	bl	8001a30 <LL_ADC_REG_IsConversionOngoing>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00c      	beq.n	8002db4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fe fe0b 	bl	80019ba <LL_ADC_IsDisableOngoing>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d104      	bne.n	8002db4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fe fe2a 	bl	8001a08 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d014      	beq.n	8002de4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fe fe5d 	bl	8001a7e <LL_ADC_INJ_IsConversionOngoing>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00c      	beq.n	8002de4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fe fdf3 	bl	80019ba <LL_ADC_IsDisableOngoing>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d104      	bne.n	8002de4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fe fe39 	bl	8001a56 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d005      	beq.n	8002df6 <ADC_ConversionStop+0x10e>
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	2b03      	cmp	r3, #3
 8002dee:	d105      	bne.n	8002dfc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002df0:	230c      	movs	r3, #12
 8002df2:	617b      	str	r3, [r7, #20]
        break;
 8002df4:	e005      	b.n	8002e02 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002df6:	2308      	movs	r3, #8
 8002df8:	617b      	str	r3, [r7, #20]
        break;
 8002dfa:	e002      	b.n	8002e02 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002dfc:	2304      	movs	r3, #4
 8002dfe:	617b      	str	r3, [r7, #20]
        break;
 8002e00:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002e02:	f7fe fb93 	bl	800152c <HAL_GetTick>
 8002e06:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002e08:	e01b      	b.n	8002e42 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002e0a:	f7fe fb8f 	bl	800152c <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b05      	cmp	r3, #5
 8002e16:	d914      	bls.n	8002e42 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	4013      	ands	r3, r2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00d      	beq.n	8002e42 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2a:	f043 0210 	orr.w	r2, r3, #16
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e36:	f043 0201 	orr.w	r2, r3, #1
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e007      	b.n	8002e52 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1dc      	bne.n	8002e0a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3720      	adds	r7, #32
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	a33fffff 	.word	0xa33fffff

08002e60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7fe fd91 	bl	8001994 <LL_ADC_IsEnabled>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d14d      	bne.n	8002f14 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	4b28      	ldr	r3, [pc, #160]	; (8002f20 <ADC_Enable+0xc0>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00d      	beq.n	8002ea2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8a:	f043 0210 	orr.w	r2, r3, #16
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e96:	f043 0201 	orr.w	r2, r3, #1
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e039      	b.n	8002f16 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fe fd4c 	bl	8001944 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002eac:	f7fe fb3e 	bl	800152c <HAL_GetTick>
 8002eb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002eb2:	e028      	b.n	8002f06 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7fe fd6b 	bl	8001994 <LL_ADC_IsEnabled>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d104      	bne.n	8002ece <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fe fd3b 	bl	8001944 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ece:	f7fe fb2d 	bl	800152c <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d914      	bls.n	8002f06 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d00d      	beq.n	8002f06 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eee:	f043 0210 	orr.w	r2, r3, #16
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002efa:	f043 0201 	orr.w	r2, r3, #1
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e007      	b.n	8002f16 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d1cf      	bne.n	8002eb4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	8000003f 	.word	0x8000003f

08002f24 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7fe fd42 	bl	80019ba <LL_ADC_IsDisableOngoing>
 8002f36:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fe fd29 	bl	8001994 <LL_ADC_IsEnabled>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d047      	beq.n	8002fd8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d144      	bne.n	8002fd8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 030d 	and.w	r3, r3, #13
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d10c      	bne.n	8002f76 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7fe fd03 	bl	800196c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f6e:	f7fe fadd 	bl	800152c <HAL_GetTick>
 8002f72:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f74:	e029      	b.n	8002fca <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7a:	f043 0210 	orr.w	r2, r3, #16
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f86:	f043 0201 	orr.w	r2, r3, #1
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e023      	b.n	8002fda <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f92:	f7fe facb 	bl	800152c <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d914      	bls.n	8002fca <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00d      	beq.n	8002fca <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb2:	f043 0210 	orr.w	r2, r3, #16
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fbe:	f043 0201 	orr.w	r2, r3, #1
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e007      	b.n	8002fda <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1dc      	bne.n	8002f92 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b083      	sub	sp, #12
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800300a:	b480      	push	{r7}
 800300c:	b083      	sub	sp, #12
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003050:	4b05      	ldr	r3, [pc, #20]	; (8003068 <LL_EXTI_EnableIT_0_31+0x20>)
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	4904      	ldr	r1, [pc, #16]	; (8003068 <LL_EXTI_EnableIT_0_31+0x20>)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4313      	orrs	r3, r2
 800305a:	600b      	str	r3, [r1, #0]
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	40010400 	.word	0x40010400

0800306c <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003074:	4b06      	ldr	r3, [pc, #24]	; (8003090 <LL_EXTI_DisableIT_0_31+0x24>)
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	43db      	mvns	r3, r3
 800307c:	4904      	ldr	r1, [pc, #16]	; (8003090 <LL_EXTI_DisableIT_0_31+0x24>)
 800307e:	4013      	ands	r3, r2
 8003080:	600b      	str	r3, [r1, #0]
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	40010400 	.word	0x40010400

08003094 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800309c:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <LL_EXTI_EnableEvent_0_31+0x20>)
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	4904      	ldr	r1, [pc, #16]	; (80030b4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	604b      	str	r3, [r1, #4]

}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	40010400 	.word	0x40010400

080030b8 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80030c0:	4b06      	ldr	r3, [pc, #24]	; (80030dc <LL_EXTI_DisableEvent_0_31+0x24>)
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	43db      	mvns	r3, r3
 80030c8:	4904      	ldr	r1, [pc, #16]	; (80030dc <LL_EXTI_DisableEvent_0_31+0x24>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	604b      	str	r3, [r1, #4]
}
 80030ce:	bf00      	nop
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	40010400 	.word	0x40010400

080030e0 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80030e8:	4b05      	ldr	r3, [pc, #20]	; (8003100 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	4904      	ldr	r1, [pc, #16]	; (8003100 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	608b      	str	r3, [r1, #8]

}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	40010400 	.word	0x40010400

08003104 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800310c:	4b06      	ldr	r3, [pc, #24]	; (8003128 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	43db      	mvns	r3, r3
 8003114:	4904      	ldr	r1, [pc, #16]	; (8003128 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003116:	4013      	ands	r3, r2
 8003118:	608b      	str	r3, [r1, #8]

}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	40010400 	.word	0x40010400

0800312c <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8003134:	4b05      	ldr	r3, [pc, #20]	; (800314c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	4904      	ldr	r1, [pc, #16]	; (800314c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4313      	orrs	r3, r2
 800313e:	60cb      	str	r3, [r1, #12]
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	40010400 	.word	0x40010400

08003150 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003158:	4b06      	ldr	r3, [pc, #24]	; (8003174 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	43db      	mvns	r3, r3
 8003160:	4904      	ldr	r1, [pc, #16]	; (8003174 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003162:	4013      	ands	r3, r2
 8003164:	60cb      	str	r3, [r1, #12]
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	40010400 	.word	0x40010400

08003178 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003180:	4a04      	ldr	r2, [pc, #16]	; (8003194 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6153      	str	r3, [r2, #20]
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	40010400 	.word	0x40010400

08003198 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b088      	sub	sp, #32
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80031a0:	2300      	movs	r3, #0
 80031a2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d102      	bne.n	80031b4 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	77fb      	strb	r3, [r7, #31]
 80031b2:	e0bb      	b.n	800332c <HAL_COMP_Init+0x194>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031c2:	d102      	bne.n	80031ca <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	77fb      	strb	r3, [r7, #31]
 80031c8:	e0b0      	b.n	800332c <HAL_COMP_Init+0x194>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	7f5b      	ldrb	r3, [r3, #29]
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d108      	bne.n	80031e6 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7fd ff1d 	bl	8001020 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031f0:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 800320c:	4313      	orrs	r3, r2
 800320e:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	4b48      	ldr	r3, [pc, #288]	; (8003338 <HAL_COMP_Init+0x1a0>)
 8003218:	4013      	ands	r3, r2
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6812      	ldr	r2, [r2, #0]
 800321e:	6979      	ldr	r1, [r7, #20]
 8003220:	430b      	orrs	r3, r1
 8003222:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d015      	beq.n	800325e <HAL_COMP_Init+0xc6>
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d112      	bne.n	800325e <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003238:	4b40      	ldr	r3, [pc, #256]	; (800333c <HAL_COMP_Init+0x1a4>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	099b      	lsrs	r3, r3, #6
 800323e:	4a40      	ldr	r2, [pc, #256]	; (8003340 <HAL_COMP_Init+0x1a8>)
 8003240:	fba2 2303 	umull	r2, r3, r2, r3
 8003244:	099a      	lsrs	r2, r3, #6
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003250:	e002      	b.n	8003258 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	3b01      	subs	r3, #1
 8003256:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f9      	bne.n	8003252 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a38      	ldr	r2, [pc, #224]	; (8003344 <HAL_COMP_Init+0x1ac>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d012      	beq.n	800328e <HAL_COMP_Init+0xf6>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a36      	ldr	r2, [pc, #216]	; (8003348 <HAL_COMP_Init+0x1b0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d00a      	beq.n	8003288 <HAL_COMP_Init+0xf0>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a35      	ldr	r2, [pc, #212]	; (800334c <HAL_COMP_Init+0x1b4>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d102      	bne.n	8003282 <HAL_COMP_Init+0xea>
 800327c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003280:	e007      	b.n	8003292 <HAL_COMP_Init+0xfa>
 8003282:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003286:	e004      	b.n	8003292 <HAL_COMP_Init+0xfa>
 8003288:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800328c:	e001      	b.n	8003292 <HAL_COMP_Init+0xfa>
 800328e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003292:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	f003 0303 	and.w	r3, r3, #3
 800329c:	2b00      	cmp	r3, #0
 800329e:	d037      	beq.n	8003310 <HAL_COMP_Init+0x178>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	f003 0310 	and.w	r3, r3, #16
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <HAL_COMP_Init+0x11c>
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80032ac:	6938      	ldr	r0, [r7, #16]
 80032ae:	f7ff ff17 	bl	80030e0 <LL_EXTI_EnableRisingTrig_0_31>
 80032b2:	e002      	b.n	80032ba <HAL_COMP_Init+0x122>
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80032b4:	6938      	ldr	r0, [r7, #16]
 80032b6:	f7ff ff25 	bl	8003104 <LL_EXTI_DisableRisingTrig_0_31>
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	f003 0320 	and.w	r3, r3, #32
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_COMP_Init+0x136>
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80032c6:	6938      	ldr	r0, [r7, #16]
 80032c8:	f7ff ff30 	bl	800312c <LL_EXTI_EnableFallingTrig_0_31>
 80032cc:	e002      	b.n	80032d4 <HAL_COMP_Init+0x13c>
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80032ce:	6938      	ldr	r0, [r7, #16]
 80032d0:	f7ff ff3e 	bl	8003150 <LL_EXTI_DisableFallingTrig_0_31>
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
      }
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
 80032d4:	6938      	ldr	r0, [r7, #16]
 80032d6:	f7ff ff4f 	bl	8003178 <LL_EXTI_ClearFlag_0_31>
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_COMP_Init+0x156>
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_EnableEvent_0_31(exti_line);
 80032e6:	6938      	ldr	r0, [r7, #16]
 80032e8:	f7ff fed4 	bl	8003094 <LL_EXTI_EnableEvent_0_31>
 80032ec:	e002      	b.n	80032f4 <HAL_COMP_Init+0x15c>
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_DisableEvent_0_31(exti_line);
 80032ee:	6938      	ldr	r0, [r7, #16]
 80032f0:	f7ff fee2 	bl	80030b8 <LL_EXTI_DisableEvent_0_31>
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d003      	beq.n	8003308 <HAL_COMP_Init+0x170>
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
        }
#else
        LL_EXTI_EnableIT_0_31(exti_line);
 8003300:	6938      	ldr	r0, [r7, #16]
 8003302:	f7ff fea1 	bl	8003048 <LL_EXTI_EnableIT_0_31>
 8003306:	e009      	b.n	800331c <HAL_COMP_Init+0x184>
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
        }
#else
        LL_EXTI_DisableIT_0_31(exti_line);
 8003308:	6938      	ldr	r0, [r7, #16]
 800330a:	f7ff feaf 	bl	800306c <LL_EXTI_DisableIT_0_31>
 800330e:	e005      	b.n	800331c <HAL_COMP_Init+0x184>
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
      }
#else
      LL_EXTI_DisableEvent_0_31(exti_line);
 8003310:	6938      	ldr	r0, [r7, #16]
 8003312:	f7ff fed1 	bl	80030b8 <LL_EXTI_DisableEvent_0_31>
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
      }
#else
      LL_EXTI_DisableIT_0_31(exti_line);
 8003316:	6938      	ldr	r0, [r7, #16]
 8003318:	f7ff fea8 	bl	800306c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	7f5b      	ldrb	r3, [r3, #29]
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d102      	bne.n	800332c <HAL_COMP_Init+0x194>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800332c:	7ffb      	ldrb	r3, [r7, #31]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3720      	adds	r7, #32
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	ff007e0f 	.word	0xff007e0f
 800333c:	20000008 	.word	0x20000008
 8003340:	053e2d63 	.word	0x053e2d63
 8003344:	40010200 	.word	0x40010200
 8003348:	40010204 	.word	0x40010204
 800334c:	40010208 	.word	0x40010208

08003350 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8003358:	2300      	movs	r3, #0
 800335a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d102      	bne.n	800336c <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	73fb      	strb	r3, [r7, #15]
 800336a:	e02e      	b.n	80033ca <HAL_COMP_Start+0x7a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003376:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800337a:	d102      	bne.n	8003382 <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	73fb      	strb	r3, [r7, #15]
 8003380:	e023      	b.n	80033ca <HAL_COMP_Start+0x7a>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	7f5b      	ldrb	r3, [r3, #29]
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b01      	cmp	r3, #1
 800338a:	d11c      	bne.n	80033c6 <HAL_COMP_Start+0x76>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0201 	orr.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2202      	movs	r2, #2
 80033a0:	775a      	strb	r2, [r3, #29]
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */
      /* Note: In case of system low frequency (below 1Mhz), short delay      */
      /*       of startup time (few us) is within CPU processing cycles       */
      /*       of following instructions.                                     */
      wait_loop_index = (COMP_DELAY_STARTUP_US * (SystemCoreClock / (1000000UL * 2UL)));
 80033a2:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <HAL_COMP_Start+0x88>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a0d      	ldr	r2, [pc, #52]	; (80033dc <HAL_COMP_Start+0x8c>)
 80033a8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ac:	0cda      	lsrs	r2, r3, #19
 80033ae:	4613      	mov	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80033b6:	e002      	b.n	80033be <HAL_COMP_Start+0x6e>
      {
        wait_loop_index--;
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	3b01      	subs	r3, #1
 80033bc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1f9      	bne.n	80033b8 <HAL_COMP_Start+0x68>
 80033c4:	e001      	b.n	80033ca <HAL_COMP_Start+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	20000008 	.word	0x20000008
 80033dc:	431bde83 	.word	0x431bde83

080033e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033f0:	4b0c      	ldr	r3, [pc, #48]	; (8003424 <__NVIC_SetPriorityGrouping+0x44>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033fc:	4013      	ands	r3, r2
 80033fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003408:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800340c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003410:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003412:	4a04      	ldr	r2, [pc, #16]	; (8003424 <__NVIC_SetPriorityGrouping+0x44>)
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	60d3      	str	r3, [r2, #12]
}
 8003418:	bf00      	nop
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	e000ed00 	.word	0xe000ed00

08003428 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800342c:	4b04      	ldr	r3, [pc, #16]	; (8003440 <__NVIC_GetPriorityGrouping+0x18>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	0a1b      	lsrs	r3, r3, #8
 8003432:	f003 0307 	and.w	r3, r3, #7
}
 8003436:	4618      	mov	r0, r3
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	e000ed00 	.word	0xe000ed00

08003444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	4603      	mov	r3, r0
 800344c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800344e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003452:	2b00      	cmp	r3, #0
 8003454:	db0b      	blt.n	800346e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003456:	79fb      	ldrb	r3, [r7, #7]
 8003458:	f003 021f 	and.w	r2, r3, #31
 800345c:	4907      	ldr	r1, [pc, #28]	; (800347c <__NVIC_EnableIRQ+0x38>)
 800345e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003462:	095b      	lsrs	r3, r3, #5
 8003464:	2001      	movs	r0, #1
 8003466:	fa00 f202 	lsl.w	r2, r0, r2
 800346a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	e000e100 	.word	0xe000e100

08003480 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	6039      	str	r1, [r7, #0]
 800348a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800348c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003490:	2b00      	cmp	r3, #0
 8003492:	db0a      	blt.n	80034aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	b2da      	uxtb	r2, r3
 8003498:	490c      	ldr	r1, [pc, #48]	; (80034cc <__NVIC_SetPriority+0x4c>)
 800349a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349e:	0112      	lsls	r2, r2, #4
 80034a0:	b2d2      	uxtb	r2, r2
 80034a2:	440b      	add	r3, r1
 80034a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034a8:	e00a      	b.n	80034c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	4908      	ldr	r1, [pc, #32]	; (80034d0 <__NVIC_SetPriority+0x50>)
 80034b0:	79fb      	ldrb	r3, [r7, #7]
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	3b04      	subs	r3, #4
 80034b8:	0112      	lsls	r2, r2, #4
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	440b      	add	r3, r1
 80034be:	761a      	strb	r2, [r3, #24]
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	e000e100 	.word	0xe000e100
 80034d0:	e000ed00 	.word	0xe000ed00

080034d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b089      	sub	sp, #36	; 0x24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	f1c3 0307 	rsb	r3, r3, #7
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	bf28      	it	cs
 80034f2:	2304      	movcs	r3, #4
 80034f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	3304      	adds	r3, #4
 80034fa:	2b06      	cmp	r3, #6
 80034fc:	d902      	bls.n	8003504 <NVIC_EncodePriority+0x30>
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	3b03      	subs	r3, #3
 8003502:	e000      	b.n	8003506 <NVIC_EncodePriority+0x32>
 8003504:	2300      	movs	r3, #0
 8003506:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003508:	f04f 32ff 	mov.w	r2, #4294967295
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	43da      	mvns	r2, r3
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	401a      	ands	r2, r3
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800351c:	f04f 31ff 	mov.w	r1, #4294967295
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	fa01 f303 	lsl.w	r3, r1, r3
 8003526:	43d9      	mvns	r1, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800352c:	4313      	orrs	r3, r2
         );
}
 800352e:	4618      	mov	r0, r3
 8003530:	3724      	adds	r7, #36	; 0x24
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
	...

0800353c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3b01      	subs	r3, #1
 8003548:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800354c:	d301      	bcc.n	8003552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800354e:	2301      	movs	r3, #1
 8003550:	e00f      	b.n	8003572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003552:	4a0a      	ldr	r2, [pc, #40]	; (800357c <SysTick_Config+0x40>)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3b01      	subs	r3, #1
 8003558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800355a:	210f      	movs	r1, #15
 800355c:	f04f 30ff 	mov.w	r0, #4294967295
 8003560:	f7ff ff8e 	bl	8003480 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003564:	4b05      	ldr	r3, [pc, #20]	; (800357c <SysTick_Config+0x40>)
 8003566:	2200      	movs	r2, #0
 8003568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800356a:	4b04      	ldr	r3, [pc, #16]	; (800357c <SysTick_Config+0x40>)
 800356c:	2207      	movs	r2, #7
 800356e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	e000e010 	.word	0xe000e010

08003580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f7ff ff29 	bl	80033e0 <__NVIC_SetPriorityGrouping>
}
 800358e:	bf00      	nop
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b086      	sub	sp, #24
 800359a:	af00      	add	r7, sp, #0
 800359c:	4603      	mov	r3, r0
 800359e:	60b9      	str	r1, [r7, #8]
 80035a0:	607a      	str	r2, [r7, #4]
 80035a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035a4:	f7ff ff40 	bl	8003428 <__NVIC_GetPriorityGrouping>
 80035a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	6978      	ldr	r0, [r7, #20]
 80035b0:	f7ff ff90 	bl	80034d4 <NVIC_EncodePriority>
 80035b4:	4602      	mov	r2, r0
 80035b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ba:	4611      	mov	r1, r2
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff ff5f 	bl	8003480 <__NVIC_SetPriority>
}
 80035c2:	bf00      	nop
 80035c4:	3718      	adds	r7, #24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	4603      	mov	r3, r0
 80035d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff ff33 	bl	8003444 <__NVIC_EnableIRQ>
}
 80035de:	bf00      	nop
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b082      	sub	sp, #8
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7ff ffa4 	bl	800353c <SysTick_Config>
 80035f4:	4603      	mov	r3, r0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b082      	sub	sp, #8
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e014      	b.n	800363a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	791b      	ldrb	r3, [r3, #4]
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d105      	bne.n	8003626 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7fd fd2f 	bl	8001084 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2202      	movs	r2, #2
 800362a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b082      	sub	sp, #8
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
 800364a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	795b      	ldrb	r3, [r3, #5]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d101      	bne.n	8003658 <HAL_DAC_Start+0x16>
 8003654:	2302      	movs	r3, #2
 8003656:	e043      	b.n	80036e0 <HAL_DAC_Start+0x9e>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2202      	movs	r2, #2
 8003662:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6819      	ldr	r1, [r3, #0]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	f003 0310 	and.w	r3, r3, #16
 8003670:	2201      	movs	r2, #1
 8003672:	409a      	lsls	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 800367c:	2001      	movs	r0, #1
 800367e:	f7fd ff61 	bl	8001544 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10f      	bne.n	80036a8 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8003692:	2b02      	cmp	r3, #2
 8003694:	d11d      	bne.n	80036d2 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f042 0201 	orr.w	r2, r2, #1
 80036a4:	605a      	str	r2, [r3, #4]
 80036a6:	e014      	b.n	80036d2 <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	f003 0310 	and.w	r3, r3, #16
 80036b8:	2102      	movs	r1, #2
 80036ba:	fa01 f303 	lsl.w	r3, r1, r3
 80036be:	429a      	cmp	r2, r3
 80036c0:	d107      	bne.n	80036d2 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f042 0202 	orr.w	r2, r2, #2
 80036d0:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036fe:	d120      	bne.n	8003742 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003706:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800370a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800370e:	d118      	bne.n	8003742 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2204      	movs	r2, #4
 8003714:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	f043 0201 	orr.w	r2, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800372a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800373a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f855 	bl	80037ec <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800374c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003750:	d120      	bne.n	8003794 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003758:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800375c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003760:	d118      	bne.n	8003794 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2204      	movs	r2, #4
 8003766:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	f043 0202 	orr.w	r2, r3, #2
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800377c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800378c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f9de 	bl	8003b50 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003794:	bf00      	nop
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800379c:	b480      	push	{r7}
 800379e:	b087      	sub	sp, #28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
 80037a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d105      	bne.n	80037cc <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4413      	add	r3, r2
 80037c6:	3308      	adds	r3, #8
 80037c8:	617b      	str	r3, [r7, #20]
 80037ca:	e004      	b.n	80037d6 <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4413      	add	r3, r2
 80037d2:	3314      	adds	r3, #20
 80037d4:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	461a      	mov	r2, r3
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	371c      	adds	r7, #28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08a      	sub	sp, #40	; 0x28
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	795b      	ldrb	r3, [r3, #5]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_DAC_ConfigChannel+0x18>
 8003814:	2302      	movs	r3, #2
 8003816:	e192      	b.n	8003b3e <HAL_DAC_ConfigChannel+0x33e>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2201      	movs	r2, #1
 800381c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2202      	movs	r2, #2
 8003822:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	2b04      	cmp	r3, #4
 800382a:	d174      	bne.n	8003916 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800382c:	f7fd fe7e 	bl	800152c <HAL_GetTick>
 8003830:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d134      	bne.n	80038a2 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003838:	e011      	b.n	800385e <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800383a:	f7fd fe77 	bl	800152c <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b01      	cmp	r3, #1
 8003846:	d90a      	bls.n	800385e <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	f043 0208 	orr.w	r2, r3, #8
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2203      	movs	r2, #3
 8003858:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e16f      	b.n	8003b3e <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003864:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1e6      	bne.n	800383a <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 800386c:	2001      	movs	r0, #1
 800386e:	f7fd fe69 	bl	8001544 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800387a:	641a      	str	r2, [r3, #64]	; 0x40
 800387c:	e01e      	b.n	80038bc <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800387e:	f7fd fe55 	bl	800152c <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b01      	cmp	r3, #1
 800388a:	d90a      	bls.n	80038a2 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	f043 0208 	orr.w	r2, r3, #8
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2203      	movs	r2, #3
 800389c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e14d      	b.n	8003b3e <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	dbe8      	blt.n	800387e <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80038ac:	2001      	movs	r0, #1
 80038ae:	f7fd fe49 	bl	8001544 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038ba:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f003 0310 	and.w	r3, r3, #16
 80038c8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80038cc:	fa01 f303 	lsl.w	r3, r1, r3
 80038d0:	43db      	mvns	r3, r3
 80038d2:	ea02 0103 	and.w	r1, r2, r3
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f003 0310 	and.w	r3, r3, #16
 80038e0:	409a      	lsls	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f003 0310 	and.w	r3, r3, #16
 80038f6:	21ff      	movs	r1, #255	; 0xff
 80038f8:	fa01 f303 	lsl.w	r3, r1, r3
 80038fc:	43db      	mvns	r3, r3
 80038fe:	ea02 0103 	and.w	r1, r2, r3
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f003 0310 	and.w	r3, r3, #16
 800390c:	409a      	lsls	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d11d      	bne.n	800395a <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003924:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f003 0310 	and.w	r3, r3, #16
 800392c:	221f      	movs	r2, #31
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	43db      	mvns	r3, r3
 8003934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003936:	4013      	ands	r3, r2
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f003 0310 	and.w	r3, r3, #16
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394e:	4313      	orrs	r3, r2
 8003950:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003958:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003960:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f003 0310 	and.w	r3, r3, #16
 8003968:	2207      	movs	r2, #7
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	43db      	mvns	r3, r3
 8003970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003972:	4013      	ands	r3, r2
 8003974:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d102      	bne.n	8003984 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800397e:	2300      	movs	r3, #0
 8003980:	623b      	str	r3, [r7, #32]
 8003982:	e00f      	b.n	80039a4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	2b02      	cmp	r3, #2
 800398a:	d102      	bne.n	8003992 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800398c:	2301      	movs	r3, #1
 800398e:	623b      	str	r3, [r7, #32]
 8003990:	e008      	b.n	80039a4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d102      	bne.n	80039a0 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800399a:	2301      	movs	r3, #1
 800399c:	623b      	str	r3, [r7, #32]
 800399e:	e001      	b.n	80039a4 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80039a0:	2300      	movs	r3, #0
 80039a2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	6a3a      	ldr	r2, [r7, #32]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f003 0310 	and.w	r3, r3, #16
 80039ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	43db      	mvns	r3, r3
 80039c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c6:	4013      	ands	r3, r2
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	791b      	ldrb	r3, [r3, #4]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d102      	bne.n	80039d8 <HAL_DAC_ConfigChannel+0x1d8>
 80039d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039d6:	e000      	b.n	80039da <HAL_DAC_ConfigChannel+0x1da>
 80039d8:	2300      	movs	r3, #0
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4313      	orrs	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f003 0310 	and.w	r3, r3, #16
 80039e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43db      	mvns	r3, r3
 80039f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f2:	4013      	ands	r3, r2
 80039f4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	795b      	ldrb	r3, [r3, #5]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d102      	bne.n	8003a04 <HAL_DAC_ConfigChannel+0x204>
 80039fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a02:	e000      	b.n	8003a06 <HAL_DAC_ConfigChannel+0x206>
 8003a04:	2300      	movs	r3, #0
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003a12:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d114      	bne.n	8003a46 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003a1c:	f000 ffa6 	bl	800496c <HAL_RCC_GetHCLKFreq>
 8003a20:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	4a48      	ldr	r2, [pc, #288]	; (8003b48 <HAL_DAC_ConfigChannel+0x348>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d904      	bls.n	8003a34 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a30:	627b      	str	r3, [r7, #36]	; 0x24
 8003a32:	e00f      	b.n	8003a54 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	4a45      	ldr	r2, [pc, #276]	; (8003b4c <HAL_DAC_ConfigChannel+0x34c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d90a      	bls.n	8003a52 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a42:	627b      	str	r3, [r7, #36]	; 0x24
 8003a44:	e006      	b.n	8003a54 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a50:	e000      	b.n	8003a54 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003a52:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f003 0310 	and.w	r3, r3, #16
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a62:	4313      	orrs	r3, r2
 8003a64:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6819      	ldr	r1, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f003 0310 	and.w	r3, r3, #16
 8003a7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a82:	43da      	mvns	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	400a      	ands	r2, r1
 8003a8a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f003 0310 	and.w	r3, r3, #16
 8003a9a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f003 0310 	and.w	r3, r3, #16
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6819      	ldr	r1, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f003 0310 	and.w	r3, r3, #16
 8003ad6:	22c0      	movs	r2, #192	; 0xc0
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	43da      	mvns	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	400a      	ands	r2, r1
 8003ae4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	089b      	lsrs	r3, r3, #2
 8003aec:	f003 030f 	and.w	r3, r3, #15
 8003af0:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	089b      	lsrs	r3, r3, #2
 8003af8:	021b      	lsls	r3, r3, #8
 8003afa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f003 0310 	and.w	r3, r3, #16
 8003b10:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003b14:	fa01 f303 	lsl.w	r3, r1, r3
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	ea02 0103 	and.w	r1, r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f003 0310 	and.w	r3, r3, #16
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	409a      	lsls	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2201      	movs	r2, #1
 8003b34:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3728      	adds	r7, #40	; 0x28
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	09896800 	.word	0x09896800
 8003b4c:	04c4b400 	.word	0x04c4b400

08003b50 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b72:	e15a      	b.n	8003e2a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	2101      	movs	r1, #1
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b80:	4013      	ands	r3, r2
 8003b82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 814c 	beq.w	8003e24 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d00b      	beq.n	8003bac <HAL_GPIO_Init+0x48>
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d007      	beq.n	8003bac <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ba0:	2b11      	cmp	r3, #17
 8003ba2:	d003      	beq.n	8003bac <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b12      	cmp	r3, #18
 8003baa:	d130      	bne.n	8003c0e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	2203      	movs	r2, #3
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003be2:	2201      	movs	r2, #1
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	43db      	mvns	r3, r3
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	091b      	lsrs	r3, r3, #4
 8003bf8:	f003 0201 	and.w	r2, r3, #1
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	2203      	movs	r2, #3
 8003c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1e:	43db      	mvns	r3, r3
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	4013      	ands	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d003      	beq.n	8003c4e <HAL_GPIO_Init+0xea>
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b12      	cmp	r3, #18
 8003c4c:	d123      	bne.n	8003c96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	08da      	lsrs	r2, r3, #3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	3208      	adds	r2, #8
 8003c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	220f      	movs	r2, #15
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	691a      	ldr	r2, [r3, #16]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	08da      	lsrs	r2, r3, #3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3208      	adds	r2, #8
 8003c90:	6939      	ldr	r1, [r7, #16]
 8003c92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	2203      	movs	r2, #3
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	43db      	mvns	r3, r3
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	4013      	ands	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f003 0203 	and.w	r2, r3, #3
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 80a6 	beq.w	8003e24 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cd8:	4b5b      	ldr	r3, [pc, #364]	; (8003e48 <HAL_GPIO_Init+0x2e4>)
 8003cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cdc:	4a5a      	ldr	r2, [pc, #360]	; (8003e48 <HAL_GPIO_Init+0x2e4>)
 8003cde:	f043 0301 	orr.w	r3, r3, #1
 8003ce2:	6613      	str	r3, [r2, #96]	; 0x60
 8003ce4:	4b58      	ldr	r3, [pc, #352]	; (8003e48 <HAL_GPIO_Init+0x2e4>)
 8003ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	60bb      	str	r3, [r7, #8]
 8003cee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cf0:	4a56      	ldr	r2, [pc, #344]	; (8003e4c <HAL_GPIO_Init+0x2e8>)
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	089b      	lsrs	r3, r3, #2
 8003cf6:	3302      	adds	r3, #2
 8003cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f003 0303 	and.w	r3, r3, #3
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	220f      	movs	r2, #15
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4013      	ands	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d1a:	d01f      	beq.n	8003d5c <HAL_GPIO_Init+0x1f8>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a4c      	ldr	r2, [pc, #304]	; (8003e50 <HAL_GPIO_Init+0x2ec>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d019      	beq.n	8003d58 <HAL_GPIO_Init+0x1f4>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a4b      	ldr	r2, [pc, #300]	; (8003e54 <HAL_GPIO_Init+0x2f0>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d013      	beq.n	8003d54 <HAL_GPIO_Init+0x1f0>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a4a      	ldr	r2, [pc, #296]	; (8003e58 <HAL_GPIO_Init+0x2f4>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d00d      	beq.n	8003d50 <HAL_GPIO_Init+0x1ec>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a49      	ldr	r2, [pc, #292]	; (8003e5c <HAL_GPIO_Init+0x2f8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d007      	beq.n	8003d4c <HAL_GPIO_Init+0x1e8>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a48      	ldr	r2, [pc, #288]	; (8003e60 <HAL_GPIO_Init+0x2fc>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d101      	bne.n	8003d48 <HAL_GPIO_Init+0x1e4>
 8003d44:	2305      	movs	r3, #5
 8003d46:	e00a      	b.n	8003d5e <HAL_GPIO_Init+0x1fa>
 8003d48:	2306      	movs	r3, #6
 8003d4a:	e008      	b.n	8003d5e <HAL_GPIO_Init+0x1fa>
 8003d4c:	2304      	movs	r3, #4
 8003d4e:	e006      	b.n	8003d5e <HAL_GPIO_Init+0x1fa>
 8003d50:	2303      	movs	r3, #3
 8003d52:	e004      	b.n	8003d5e <HAL_GPIO_Init+0x1fa>
 8003d54:	2302      	movs	r3, #2
 8003d56:	e002      	b.n	8003d5e <HAL_GPIO_Init+0x1fa>
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e000      	b.n	8003d5e <HAL_GPIO_Init+0x1fa>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	f002 0203 	and.w	r2, r2, #3
 8003d64:	0092      	lsls	r2, r2, #2
 8003d66:	4093      	lsls	r3, r2
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d6e:	4937      	ldr	r1, [pc, #220]	; (8003e4c <HAL_GPIO_Init+0x2e8>)
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	089b      	lsrs	r3, r3, #2
 8003d74:	3302      	adds	r3, #2
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003d7c:	4b39      	ldr	r3, [pc, #228]	; (8003e64 <HAL_GPIO_Init+0x300>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	43db      	mvns	r3, r3
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d003      	beq.n	8003da0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003da0:	4a30      	ldr	r2, [pc, #192]	; (8003e64 <HAL_GPIO_Init+0x300>)
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003da6:	4b2f      	ldr	r3, [pc, #188]	; (8003e64 <HAL_GPIO_Init+0x300>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	43db      	mvns	r3, r3
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	4013      	ands	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003dca:	4a26      	ldr	r2, [pc, #152]	; (8003e64 <HAL_GPIO_Init+0x300>)
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003dd0:	4b24      	ldr	r3, [pc, #144]	; (8003e64 <HAL_GPIO_Init+0x300>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	43db      	mvns	r3, r3
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d003      	beq.n	8003df4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003df4:	4a1b      	ldr	r2, [pc, #108]	; (8003e64 <HAL_GPIO_Init+0x300>)
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003dfa:	4b1a      	ldr	r3, [pc, #104]	; (8003e64 <HAL_GPIO_Init+0x300>)
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	43db      	mvns	r3, r3
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	4013      	ands	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e1e:	4a11      	ldr	r2, [pc, #68]	; (8003e64 <HAL_GPIO_Init+0x300>)
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	3301      	adds	r3, #1
 8003e28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	fa22 f303 	lsr.w	r3, r2, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f47f ae9d 	bne.w	8003b74 <HAL_GPIO_Init+0x10>
  }
}
 8003e3a:	bf00      	nop
 8003e3c:	bf00      	nop
 8003e3e:	371c      	adds	r7, #28
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	40010000 	.word	0x40010000
 8003e50:	48000400 	.word	0x48000400
 8003e54:	48000800 	.word	0x48000800
 8003e58:	48000c00 	.word	0x48000c00
 8003e5c:	48001000 	.word	0x48001000
 8003e60:	48001400 	.word	0x48001400
 8003e64:	40010400 	.word	0x40010400

08003e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	460b      	mov	r3, r1
 8003e72:	807b      	strh	r3, [r7, #2]
 8003e74:	4613      	mov	r3, r2
 8003e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e78:	787b      	ldrb	r3, [r7, #1]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e7e:	887a      	ldrh	r2, [r7, #2]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e84:	e002      	b.n	8003e8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e86:	887a      	ldrh	r2, [r7, #2]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d141      	bne.n	8003f2a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ea6:	4b4b      	ldr	r3, [pc, #300]	; (8003fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb2:	d131      	bne.n	8003f18 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003eb4:	4b47      	ldr	r3, [pc, #284]	; (8003fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eba:	4a46      	ldr	r2, [pc, #280]	; (8003fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ebc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ec0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ec4:	4b43      	ldr	r3, [pc, #268]	; (8003fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ecc:	4a41      	ldr	r2, [pc, #260]	; (8003fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ece:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ed2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ed4:	4b40      	ldr	r3, [pc, #256]	; (8003fd8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2232      	movs	r2, #50	; 0x32
 8003eda:	fb02 f303 	mul.w	r3, r2, r3
 8003ede:	4a3f      	ldr	r2, [pc, #252]	; (8003fdc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee4:	0c9b      	lsrs	r3, r3, #18
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003eea:	e002      	b.n	8003ef2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ef2:	4b38      	ldr	r3, [pc, #224]	; (8003fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003efe:	d102      	bne.n	8003f06 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f2      	bne.n	8003eec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f06:	4b33      	ldr	r3, [pc, #204]	; (8003fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f12:	d158      	bne.n	8003fc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e057      	b.n	8003fc8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f18:	4b2e      	ldr	r3, [pc, #184]	; (8003fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f1e:	4a2d      	ldr	r2, [pc, #180]	; (8003fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f28:	e04d      	b.n	8003fc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f30:	d141      	bne.n	8003fb6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f32:	4b28      	ldr	r3, [pc, #160]	; (8003fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f3e:	d131      	bne.n	8003fa4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f40:	4b24      	ldr	r3, [pc, #144]	; (8003fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f46:	4a23      	ldr	r2, [pc, #140]	; (8003fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f50:	4b20      	ldr	r3, [pc, #128]	; (8003fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f58:	4a1e      	ldr	r2, [pc, #120]	; (8003fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f60:	4b1d      	ldr	r3, [pc, #116]	; (8003fd8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2232      	movs	r2, #50	; 0x32
 8003f66:	fb02 f303 	mul.w	r3, r2, r3
 8003f6a:	4a1c      	ldr	r2, [pc, #112]	; (8003fdc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f70:	0c9b      	lsrs	r3, r3, #18
 8003f72:	3301      	adds	r3, #1
 8003f74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f76:	e002      	b.n	8003f7e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f7e:	4b15      	ldr	r3, [pc, #84]	; (8003fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f8a:	d102      	bne.n	8003f92 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1f2      	bne.n	8003f78 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f92:	4b10      	ldr	r3, [pc, #64]	; (8003fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f9e:	d112      	bne.n	8003fc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e011      	b.n	8003fc8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fa4:	4b0b      	ldr	r3, [pc, #44]	; (8003fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003faa:	4a0a      	ldr	r2, [pc, #40]	; (8003fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003fb4:	e007      	b.n	8003fc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003fb6:	4b07      	ldr	r3, [pc, #28]	; (8003fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fbe:	4a05      	ldr	r2, [pc, #20]	; (8003fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fc4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	40007000 	.word	0x40007000
 8003fd8:	20000008 	.word	0x20000008
 8003fdc:	431bde83 	.word	0x431bde83

08003fe0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003fe4:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	4a04      	ldr	r2, [pc, #16]	; (8003ffc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003fea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fee:	6093      	str	r3, [r2, #8]
}
 8003ff0:	bf00      	nop
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	40007000 	.word	0x40007000

08004000 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e308      	b.n	8004624 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d075      	beq.n	800410a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800401e:	4ba3      	ldr	r3, [pc, #652]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 030c 	and.w	r3, r3, #12
 8004026:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004028:	4ba0      	ldr	r3, [pc, #640]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f003 0303 	and.w	r3, r3, #3
 8004030:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	2b0c      	cmp	r3, #12
 8004036:	d102      	bne.n	800403e <HAL_RCC_OscConfig+0x3e>
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	2b03      	cmp	r3, #3
 800403c:	d002      	beq.n	8004044 <HAL_RCC_OscConfig+0x44>
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	2b08      	cmp	r3, #8
 8004042:	d10b      	bne.n	800405c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004044:	4b99      	ldr	r3, [pc, #612]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d05b      	beq.n	8004108 <HAL_RCC_OscConfig+0x108>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d157      	bne.n	8004108 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e2e3      	b.n	8004624 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004064:	d106      	bne.n	8004074 <HAL_RCC_OscConfig+0x74>
 8004066:	4b91      	ldr	r3, [pc, #580]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a90      	ldr	r2, [pc, #576]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 800406c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004070:	6013      	str	r3, [r2, #0]
 8004072:	e01d      	b.n	80040b0 <HAL_RCC_OscConfig+0xb0>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800407c:	d10c      	bne.n	8004098 <HAL_RCC_OscConfig+0x98>
 800407e:	4b8b      	ldr	r3, [pc, #556]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a8a      	ldr	r2, [pc, #552]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	4b88      	ldr	r3, [pc, #544]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a87      	ldr	r2, [pc, #540]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	e00b      	b.n	80040b0 <HAL_RCC_OscConfig+0xb0>
 8004098:	4b84      	ldr	r3, [pc, #528]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a83      	ldr	r2, [pc, #524]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 800409e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040a2:	6013      	str	r3, [r2, #0]
 80040a4:	4b81      	ldr	r3, [pc, #516]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a80      	ldr	r2, [pc, #512]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 80040aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d013      	beq.n	80040e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b8:	f7fd fa38 	bl	800152c <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040c0:	f7fd fa34 	bl	800152c <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b64      	cmp	r3, #100	; 0x64
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e2a8      	b.n	8004624 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040d2:	4b76      	ldr	r3, [pc, #472]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0f0      	beq.n	80040c0 <HAL_RCC_OscConfig+0xc0>
 80040de:	e014      	b.n	800410a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e0:	f7fd fa24 	bl	800152c <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040e8:	f7fd fa20 	bl	800152c <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b64      	cmp	r3, #100	; 0x64
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e294      	b.n	8004624 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040fa:	4b6c      	ldr	r3, [pc, #432]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1f0      	bne.n	80040e8 <HAL_RCC_OscConfig+0xe8>
 8004106:	e000      	b.n	800410a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d075      	beq.n	8004202 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004116:	4b65      	ldr	r3, [pc, #404]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 030c 	and.w	r3, r3, #12
 800411e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004120:	4b62      	ldr	r3, [pc, #392]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f003 0303 	and.w	r3, r3, #3
 8004128:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	2b0c      	cmp	r3, #12
 800412e:	d102      	bne.n	8004136 <HAL_RCC_OscConfig+0x136>
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	2b02      	cmp	r3, #2
 8004134:	d002      	beq.n	800413c <HAL_RCC_OscConfig+0x13c>
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	2b04      	cmp	r3, #4
 800413a:	d11f      	bne.n	800417c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800413c:	4b5b      	ldr	r3, [pc, #364]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004144:	2b00      	cmp	r3, #0
 8004146:	d005      	beq.n	8004154 <HAL_RCC_OscConfig+0x154>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e267      	b.n	8004624 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004154:	4b55      	ldr	r3, [pc, #340]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	061b      	lsls	r3, r3, #24
 8004162:	4952      	ldr	r1, [pc, #328]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004164:	4313      	orrs	r3, r2
 8004166:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004168:	4b51      	ldr	r3, [pc, #324]	; (80042b0 <HAL_RCC_OscConfig+0x2b0>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4618      	mov	r0, r3
 800416e:	f7fd f991 	bl	8001494 <HAL_InitTick>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d043      	beq.n	8004200 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e253      	b.n	8004624 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d023      	beq.n	80041cc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004184:	4b49      	ldr	r3, [pc, #292]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a48      	ldr	r2, [pc, #288]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 800418a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800418e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004190:	f7fd f9cc 	bl	800152c <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004198:	f7fd f9c8 	bl	800152c <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e23c      	b.n	8004624 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041aa:	4b40      	ldr	r3, [pc, #256]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d0f0      	beq.n	8004198 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b6:	4b3d      	ldr	r3, [pc, #244]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	061b      	lsls	r3, r3, #24
 80041c4:	4939      	ldr	r1, [pc, #228]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	604b      	str	r3, [r1, #4]
 80041ca:	e01a      	b.n	8004202 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041cc:	4b37      	ldr	r3, [pc, #220]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a36      	ldr	r2, [pc, #216]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 80041d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d8:	f7fd f9a8 	bl	800152c <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041e0:	f7fd f9a4 	bl	800152c <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e218      	b.n	8004624 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041f2:	4b2e      	ldr	r3, [pc, #184]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1f0      	bne.n	80041e0 <HAL_RCC_OscConfig+0x1e0>
 80041fe:	e000      	b.n	8004202 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004200:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	2b00      	cmp	r3, #0
 800420c:	d03c      	beq.n	8004288 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d01c      	beq.n	8004250 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004216:	4b25      	ldr	r3, [pc, #148]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004218:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800421c:	4a23      	ldr	r2, [pc, #140]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 800421e:	f043 0301 	orr.w	r3, r3, #1
 8004222:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004226:	f7fd f981 	bl	800152c <HAL_GetTick>
 800422a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800422c:	e008      	b.n	8004240 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800422e:	f7fd f97d 	bl	800152c <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e1f1      	b.n	8004624 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004240:	4b1a      	ldr	r3, [pc, #104]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004242:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0ef      	beq.n	800422e <HAL_RCC_OscConfig+0x22e>
 800424e:	e01b      	b.n	8004288 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004250:	4b16      	ldr	r3, [pc, #88]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004252:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004256:	4a15      	ldr	r2, [pc, #84]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004258:	f023 0301 	bic.w	r3, r3, #1
 800425c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004260:	f7fd f964 	bl	800152c <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004268:	f7fd f960 	bl	800152c <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e1d4      	b.n	8004624 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800427a:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 800427c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1ef      	bne.n	8004268 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 80ab 	beq.w	80043ec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004296:	2300      	movs	r3, #0
 8004298:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800429a:	4b04      	ldr	r3, [pc, #16]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 800429c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d106      	bne.n	80042b4 <HAL_RCC_OscConfig+0x2b4>
 80042a6:	2301      	movs	r3, #1
 80042a8:	e005      	b.n	80042b6 <HAL_RCC_OscConfig+0x2b6>
 80042aa:	bf00      	nop
 80042ac:	40021000 	.word	0x40021000
 80042b0:	2000000c 	.word	0x2000000c
 80042b4:	2300      	movs	r3, #0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00d      	beq.n	80042d6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ba:	4baf      	ldr	r3, [pc, #700]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 80042bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042be:	4aae      	ldr	r2, [pc, #696]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 80042c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042c4:	6593      	str	r3, [r2, #88]	; 0x58
 80042c6:	4bac      	ldr	r3, [pc, #688]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 80042c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ce:	60fb      	str	r3, [r7, #12]
 80042d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80042d2:	2301      	movs	r3, #1
 80042d4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042d6:	4ba9      	ldr	r3, [pc, #676]	; (800457c <HAL_RCC_OscConfig+0x57c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d118      	bne.n	8004314 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042e2:	4ba6      	ldr	r3, [pc, #664]	; (800457c <HAL_RCC_OscConfig+0x57c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4aa5      	ldr	r2, [pc, #660]	; (800457c <HAL_RCC_OscConfig+0x57c>)
 80042e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042ee:	f7fd f91d 	bl	800152c <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042f4:	e008      	b.n	8004308 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042f6:	f7fd f919 	bl	800152c <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e18d      	b.n	8004624 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004308:	4b9c      	ldr	r3, [pc, #624]	; (800457c <HAL_RCC_OscConfig+0x57c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0f0      	beq.n	80042f6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d108      	bne.n	800432e <HAL_RCC_OscConfig+0x32e>
 800431c:	4b96      	ldr	r3, [pc, #600]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 800431e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004322:	4a95      	ldr	r2, [pc, #596]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 8004324:	f043 0301 	orr.w	r3, r3, #1
 8004328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800432c:	e024      	b.n	8004378 <HAL_RCC_OscConfig+0x378>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	2b05      	cmp	r3, #5
 8004334:	d110      	bne.n	8004358 <HAL_RCC_OscConfig+0x358>
 8004336:	4b90      	ldr	r3, [pc, #576]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 8004338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433c:	4a8e      	ldr	r2, [pc, #568]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 800433e:	f043 0304 	orr.w	r3, r3, #4
 8004342:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004346:	4b8c      	ldr	r3, [pc, #560]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 8004348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434c:	4a8a      	ldr	r2, [pc, #552]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 800434e:	f043 0301 	orr.w	r3, r3, #1
 8004352:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004356:	e00f      	b.n	8004378 <HAL_RCC_OscConfig+0x378>
 8004358:	4b87      	ldr	r3, [pc, #540]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 800435a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435e:	4a86      	ldr	r2, [pc, #536]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 8004360:	f023 0301 	bic.w	r3, r3, #1
 8004364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004368:	4b83      	ldr	r3, [pc, #524]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 800436a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436e:	4a82      	ldr	r2, [pc, #520]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 8004370:	f023 0304 	bic.w	r3, r3, #4
 8004374:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d016      	beq.n	80043ae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004380:	f7fd f8d4 	bl	800152c <HAL_GetTick>
 8004384:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004386:	e00a      	b.n	800439e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004388:	f7fd f8d0 	bl	800152c <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	f241 3288 	movw	r2, #5000	; 0x1388
 8004396:	4293      	cmp	r3, r2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e142      	b.n	8004624 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800439e:	4b76      	ldr	r3, [pc, #472]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 80043a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0ed      	beq.n	8004388 <HAL_RCC_OscConfig+0x388>
 80043ac:	e015      	b.n	80043da <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ae:	f7fd f8bd 	bl	800152c <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043b4:	e00a      	b.n	80043cc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043b6:	f7fd f8b9 	bl	800152c <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d901      	bls.n	80043cc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e12b      	b.n	8004624 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043cc:	4b6a      	ldr	r3, [pc, #424]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 80043ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1ed      	bne.n	80043b6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043da:	7ffb      	ldrb	r3, [r7, #31]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d105      	bne.n	80043ec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043e0:	4b65      	ldr	r3, [pc, #404]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 80043e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e4:	4a64      	ldr	r2, [pc, #400]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 80043e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0320 	and.w	r3, r3, #32
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d03c      	beq.n	8004472 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d01c      	beq.n	800443a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004400:	4b5d      	ldr	r3, [pc, #372]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 8004402:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004406:	4a5c      	ldr	r2, [pc, #368]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 8004408:	f043 0301 	orr.w	r3, r3, #1
 800440c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004410:	f7fd f88c 	bl	800152c <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004418:	f7fd f888 	bl	800152c <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e0fc      	b.n	8004624 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800442a:	4b53      	ldr	r3, [pc, #332]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 800442c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0ef      	beq.n	8004418 <HAL_RCC_OscConfig+0x418>
 8004438:	e01b      	b.n	8004472 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800443a:	4b4f      	ldr	r3, [pc, #316]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 800443c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004440:	4a4d      	ldr	r2, [pc, #308]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 8004442:	f023 0301 	bic.w	r3, r3, #1
 8004446:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444a:	f7fd f86f 	bl	800152c <HAL_GetTick>
 800444e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004450:	e008      	b.n	8004464 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004452:	f7fd f86b 	bl	800152c <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d901      	bls.n	8004464 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e0df      	b.n	8004624 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004464:	4b44      	ldr	r3, [pc, #272]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 8004466:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1ef      	bne.n	8004452 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	69db      	ldr	r3, [r3, #28]
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 80d3 	beq.w	8004622 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800447c:	4b3e      	ldr	r3, [pc, #248]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f003 030c 	and.w	r3, r3, #12
 8004484:	2b0c      	cmp	r3, #12
 8004486:	f000 808d 	beq.w	80045a4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	2b02      	cmp	r3, #2
 8004490:	d15a      	bne.n	8004548 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004492:	4b39      	ldr	r3, [pc, #228]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a38      	ldr	r2, [pc, #224]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 8004498:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800449c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449e:	f7fd f845 	bl	800152c <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044a4:	e008      	b.n	80044b8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044a6:	f7fd f841 	bl	800152c <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e0b5      	b.n	8004624 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044b8:	4b2f      	ldr	r3, [pc, #188]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1f0      	bne.n	80044a6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044c4:	4b2c      	ldr	r3, [pc, #176]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 80044c6:	68da      	ldr	r2, [r3, #12]
 80044c8:	4b2d      	ldr	r3, [pc, #180]	; (8004580 <HAL_RCC_OscConfig+0x580>)
 80044ca:	4013      	ands	r3, r2
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6a11      	ldr	r1, [r2, #32]
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044d4:	3a01      	subs	r2, #1
 80044d6:	0112      	lsls	r2, r2, #4
 80044d8:	4311      	orrs	r1, r2
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80044de:	0212      	lsls	r2, r2, #8
 80044e0:	4311      	orrs	r1, r2
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80044e6:	0852      	lsrs	r2, r2, #1
 80044e8:	3a01      	subs	r2, #1
 80044ea:	0552      	lsls	r2, r2, #21
 80044ec:	4311      	orrs	r1, r2
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044f2:	0852      	lsrs	r2, r2, #1
 80044f4:	3a01      	subs	r2, #1
 80044f6:	0652      	lsls	r2, r2, #25
 80044f8:	4311      	orrs	r1, r2
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80044fe:	06d2      	lsls	r2, r2, #27
 8004500:	430a      	orrs	r2, r1
 8004502:	491d      	ldr	r1, [pc, #116]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 8004504:	4313      	orrs	r3, r2
 8004506:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004508:	4b1b      	ldr	r3, [pc, #108]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a1a      	ldr	r2, [pc, #104]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 800450e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004512:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004514:	4b18      	ldr	r3, [pc, #96]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	4a17      	ldr	r2, [pc, #92]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 800451a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800451e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004520:	f7fd f804 	bl	800152c <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004528:	f7fd f800 	bl	800152c <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e074      	b.n	8004624 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800453a:	4b0f      	ldr	r3, [pc, #60]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0f0      	beq.n	8004528 <HAL_RCC_OscConfig+0x528>
 8004546:	e06c      	b.n	8004622 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004548:	4b0b      	ldr	r3, [pc, #44]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a0a      	ldr	r2, [pc, #40]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 800454e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004552:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004554:	4b08      	ldr	r3, [pc, #32]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	4a07      	ldr	r2, [pc, #28]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 800455a:	f023 0303 	bic.w	r3, r3, #3
 800455e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004560:	4b05      	ldr	r3, [pc, #20]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	4a04      	ldr	r2, [pc, #16]	; (8004578 <HAL_RCC_OscConfig+0x578>)
 8004566:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800456a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800456e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004570:	f7fc ffdc 	bl	800152c <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004576:	e00e      	b.n	8004596 <HAL_RCC_OscConfig+0x596>
 8004578:	40021000 	.word	0x40021000
 800457c:	40007000 	.word	0x40007000
 8004580:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004584:	f7fc ffd2 	bl	800152c <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e046      	b.n	8004624 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004596:	4b25      	ldr	r3, [pc, #148]	; (800462c <HAL_RCC_OscConfig+0x62c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1f0      	bne.n	8004584 <HAL_RCC_OscConfig+0x584>
 80045a2:	e03e      	b.n	8004622 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	69db      	ldr	r3, [r3, #28]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d101      	bne.n	80045b0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e039      	b.n	8004624 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80045b0:	4b1e      	ldr	r3, [pc, #120]	; (800462c <HAL_RCC_OscConfig+0x62c>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f003 0203 	and.w	r2, r3, #3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d12c      	bne.n	800461e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	3b01      	subs	r3, #1
 80045d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d123      	bne.n	800461e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d11b      	bne.n	800461e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d113      	bne.n	800461e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004600:	085b      	lsrs	r3, r3, #1
 8004602:	3b01      	subs	r3, #1
 8004604:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004606:	429a      	cmp	r2, r3
 8004608:	d109      	bne.n	800461e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004614:	085b      	lsrs	r3, r3, #1
 8004616:	3b01      	subs	r3, #1
 8004618:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800461a:	429a      	cmp	r2, r3
 800461c:	d001      	beq.n	8004622 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e000      	b.n	8004624 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3720      	adds	r7, #32
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	40021000 	.word	0x40021000

08004630 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800463a:	2300      	movs	r3, #0
 800463c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e11e      	b.n	8004886 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004648:	4b91      	ldr	r3, [pc, #580]	; (8004890 <HAL_RCC_ClockConfig+0x260>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 030f 	and.w	r3, r3, #15
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	429a      	cmp	r2, r3
 8004654:	d910      	bls.n	8004678 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004656:	4b8e      	ldr	r3, [pc, #568]	; (8004890 <HAL_RCC_ClockConfig+0x260>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f023 020f 	bic.w	r2, r3, #15
 800465e:	498c      	ldr	r1, [pc, #560]	; (8004890 <HAL_RCC_ClockConfig+0x260>)
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	4313      	orrs	r3, r2
 8004664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004666:	4b8a      	ldr	r3, [pc, #552]	; (8004890 <HAL_RCC_ClockConfig+0x260>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	429a      	cmp	r2, r3
 8004672:	d001      	beq.n	8004678 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e106      	b.n	8004886 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b00      	cmp	r3, #0
 8004682:	d073      	beq.n	800476c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2b03      	cmp	r3, #3
 800468a:	d129      	bne.n	80046e0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800468c:	4b81      	ldr	r3, [pc, #516]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e0f4      	b.n	8004886 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800469c:	f000 f972 	bl	8004984 <RCC_GetSysClockFreqFromPLLSource>
 80046a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	4a7c      	ldr	r2, [pc, #496]	; (8004898 <HAL_RCC_ClockConfig+0x268>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d93f      	bls.n	800472a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80046aa:	4b7a      	ldr	r3, [pc, #488]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d009      	beq.n	80046ca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d033      	beq.n	800472a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d12f      	bne.n	800472a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80046ca:	4b72      	ldr	r3, [pc, #456]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046d2:	4a70      	ldr	r2, [pc, #448]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 80046d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80046da:	2380      	movs	r3, #128	; 0x80
 80046dc:	617b      	str	r3, [r7, #20]
 80046de:	e024      	b.n	800472a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d107      	bne.n	80046f8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046e8:	4b6a      	ldr	r3, [pc, #424]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d109      	bne.n	8004708 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e0c6      	b.n	8004886 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046f8:	4b66      	ldr	r3, [pc, #408]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e0be      	b.n	8004886 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004708:	f000 f8ce 	bl	80048a8 <HAL_RCC_GetSysClockFreq>
 800470c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	4a61      	ldr	r2, [pc, #388]	; (8004898 <HAL_RCC_ClockConfig+0x268>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d909      	bls.n	800472a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004716:	4b5f      	ldr	r3, [pc, #380]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800471e:	4a5d      	ldr	r2, [pc, #372]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 8004720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004724:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004726:	2380      	movs	r3, #128	; 0x80
 8004728:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800472a:	4b5a      	ldr	r3, [pc, #360]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f023 0203 	bic.w	r2, r3, #3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	4957      	ldr	r1, [pc, #348]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 8004738:	4313      	orrs	r3, r2
 800473a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800473c:	f7fc fef6 	bl	800152c <HAL_GetTick>
 8004740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004742:	e00a      	b.n	800475a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004744:	f7fc fef2 	bl	800152c <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004752:	4293      	cmp	r3, r2
 8004754:	d901      	bls.n	800475a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e095      	b.n	8004886 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800475a:	4b4e      	ldr	r3, [pc, #312]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 020c 	and.w	r2, r3, #12
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	429a      	cmp	r2, r3
 800476a:	d1eb      	bne.n	8004744 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d023      	beq.n	80047c0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b00      	cmp	r3, #0
 8004782:	d005      	beq.n	8004790 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004784:	4b43      	ldr	r3, [pc, #268]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	4a42      	ldr	r2, [pc, #264]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 800478a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800478e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0308 	and.w	r3, r3, #8
 8004798:	2b00      	cmp	r3, #0
 800479a:	d007      	beq.n	80047ac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800479c:	4b3d      	ldr	r3, [pc, #244]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80047a4:	4a3b      	ldr	r2, [pc, #236]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 80047a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047ac:	4b39      	ldr	r3, [pc, #228]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	4936      	ldr	r1, [pc, #216]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	608b      	str	r3, [r1, #8]
 80047be:	e008      	b.n	80047d2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	2b80      	cmp	r3, #128	; 0x80
 80047c4:	d105      	bne.n	80047d2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80047c6:	4b33      	ldr	r3, [pc, #204]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	4a32      	ldr	r2, [pc, #200]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 80047cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047d0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047d2:	4b2f      	ldr	r3, [pc, #188]	; (8004890 <HAL_RCC_ClockConfig+0x260>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d21d      	bcs.n	800481c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047e0:	4b2b      	ldr	r3, [pc, #172]	; (8004890 <HAL_RCC_ClockConfig+0x260>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f023 020f 	bic.w	r2, r3, #15
 80047e8:	4929      	ldr	r1, [pc, #164]	; (8004890 <HAL_RCC_ClockConfig+0x260>)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80047f0:	f7fc fe9c 	bl	800152c <HAL_GetTick>
 80047f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f6:	e00a      	b.n	800480e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f8:	f7fc fe98 	bl	800152c <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	f241 3288 	movw	r2, #5000	; 0x1388
 8004806:	4293      	cmp	r3, r2
 8004808:	d901      	bls.n	800480e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e03b      	b.n	8004886 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800480e:	4b20      	ldr	r3, [pc, #128]	; (8004890 <HAL_RCC_ClockConfig+0x260>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 030f 	and.w	r3, r3, #15
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	429a      	cmp	r2, r3
 800481a:	d1ed      	bne.n	80047f8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b00      	cmp	r3, #0
 8004826:	d008      	beq.n	800483a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004828:	4b1a      	ldr	r3, [pc, #104]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	4917      	ldr	r1, [pc, #92]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 8004836:	4313      	orrs	r3, r2
 8004838:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0308 	and.w	r3, r3, #8
 8004842:	2b00      	cmp	r3, #0
 8004844:	d009      	beq.n	800485a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004846:	4b13      	ldr	r3, [pc, #76]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	490f      	ldr	r1, [pc, #60]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 8004856:	4313      	orrs	r3, r2
 8004858:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800485a:	f000 f825 	bl	80048a8 <HAL_RCC_GetSysClockFreq>
 800485e:	4602      	mov	r2, r0
 8004860:	4b0c      	ldr	r3, [pc, #48]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	091b      	lsrs	r3, r3, #4
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	490c      	ldr	r1, [pc, #48]	; (800489c <HAL_RCC_ClockConfig+0x26c>)
 800486c:	5ccb      	ldrb	r3, [r1, r3]
 800486e:	f003 031f 	and.w	r3, r3, #31
 8004872:	fa22 f303 	lsr.w	r3, r2, r3
 8004876:	4a0a      	ldr	r2, [pc, #40]	; (80048a0 <HAL_RCC_ClockConfig+0x270>)
 8004878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800487a:	4b0a      	ldr	r3, [pc, #40]	; (80048a4 <HAL_RCC_ClockConfig+0x274>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4618      	mov	r0, r3
 8004880:	f7fc fe08 	bl	8001494 <HAL_InitTick>
 8004884:	4603      	mov	r3, r0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3718      	adds	r7, #24
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	40022000 	.word	0x40022000
 8004894:	40021000 	.word	0x40021000
 8004898:	04c4b400 	.word	0x04c4b400
 800489c:	08006e44 	.word	0x08006e44
 80048a0:	20000008 	.word	0x20000008
 80048a4:	2000000c 	.word	0x2000000c

080048a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80048ae:	4b2c      	ldr	r3, [pc, #176]	; (8004960 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f003 030c 	and.w	r3, r3, #12
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d102      	bne.n	80048c0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80048ba:	4b2a      	ldr	r3, [pc, #168]	; (8004964 <HAL_RCC_GetSysClockFreq+0xbc>)
 80048bc:	613b      	str	r3, [r7, #16]
 80048be:	e047      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80048c0:	4b27      	ldr	r3, [pc, #156]	; (8004960 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f003 030c 	and.w	r3, r3, #12
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d102      	bne.n	80048d2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80048cc:	4b26      	ldr	r3, [pc, #152]	; (8004968 <HAL_RCC_GetSysClockFreq+0xc0>)
 80048ce:	613b      	str	r3, [r7, #16]
 80048d0:	e03e      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80048d2:	4b23      	ldr	r3, [pc, #140]	; (8004960 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 030c 	and.w	r3, r3, #12
 80048da:	2b0c      	cmp	r3, #12
 80048dc:	d136      	bne.n	800494c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048de:	4b20      	ldr	r3, [pc, #128]	; (8004960 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	f003 0303 	and.w	r3, r3, #3
 80048e6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048e8:	4b1d      	ldr	r3, [pc, #116]	; (8004960 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	091b      	lsrs	r3, r3, #4
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	3301      	adds	r3, #1
 80048f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2b03      	cmp	r3, #3
 80048fa:	d10c      	bne.n	8004916 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048fc:	4a1a      	ldr	r2, [pc, #104]	; (8004968 <HAL_RCC_GetSysClockFreq+0xc0>)
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	fbb2 f3f3 	udiv	r3, r2, r3
 8004904:	4a16      	ldr	r2, [pc, #88]	; (8004960 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004906:	68d2      	ldr	r2, [r2, #12]
 8004908:	0a12      	lsrs	r2, r2, #8
 800490a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800490e:	fb02 f303 	mul.w	r3, r2, r3
 8004912:	617b      	str	r3, [r7, #20]
      break;
 8004914:	e00c      	b.n	8004930 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004916:	4a13      	ldr	r2, [pc, #76]	; (8004964 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	fbb2 f3f3 	udiv	r3, r2, r3
 800491e:	4a10      	ldr	r2, [pc, #64]	; (8004960 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004920:	68d2      	ldr	r2, [r2, #12]
 8004922:	0a12      	lsrs	r2, r2, #8
 8004924:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004928:	fb02 f303 	mul.w	r3, r2, r3
 800492c:	617b      	str	r3, [r7, #20]
      break;
 800492e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004930:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	0e5b      	lsrs	r3, r3, #25
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	3301      	adds	r3, #1
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	fbb2 f3f3 	udiv	r3, r2, r3
 8004948:	613b      	str	r3, [r7, #16]
 800494a:	e001      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004950:	693b      	ldr	r3, [r7, #16]
}
 8004952:	4618      	mov	r0, r3
 8004954:	371c      	adds	r7, #28
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	40021000 	.word	0x40021000
 8004964:	00f42400 	.word	0x00f42400
 8004968:	007a1200 	.word	0x007a1200

0800496c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004970:	4b03      	ldr	r3, [pc, #12]	; (8004980 <HAL_RCC_GetHCLKFreq+0x14>)
 8004972:	681b      	ldr	r3, [r3, #0]
}
 8004974:	4618      	mov	r0, r3
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	20000008 	.word	0x20000008

08004984 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004984:	b480      	push	{r7}
 8004986:	b087      	sub	sp, #28
 8004988:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800498a:	4b1e      	ldr	r3, [pc, #120]	; (8004a04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004994:	4b1b      	ldr	r3, [pc, #108]	; (8004a04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	091b      	lsrs	r3, r3, #4
 800499a:	f003 030f 	and.w	r3, r3, #15
 800499e:	3301      	adds	r3, #1
 80049a0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	2b03      	cmp	r3, #3
 80049a6:	d10c      	bne.n	80049c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049a8:	4a17      	ldr	r2, [pc, #92]	; (8004a08 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b0:	4a14      	ldr	r2, [pc, #80]	; (8004a04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80049b2:	68d2      	ldr	r2, [r2, #12]
 80049b4:	0a12      	lsrs	r2, r2, #8
 80049b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049ba:	fb02 f303 	mul.w	r3, r2, r3
 80049be:	617b      	str	r3, [r7, #20]
    break;
 80049c0:	e00c      	b.n	80049dc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049c2:	4a12      	ldr	r2, [pc, #72]	; (8004a0c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ca:	4a0e      	ldr	r2, [pc, #56]	; (8004a04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80049cc:	68d2      	ldr	r2, [r2, #12]
 80049ce:	0a12      	lsrs	r2, r2, #8
 80049d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049d4:	fb02 f303 	mul.w	r3, r2, r3
 80049d8:	617b      	str	r3, [r7, #20]
    break;
 80049da:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049dc:	4b09      	ldr	r3, [pc, #36]	; (8004a04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	0e5b      	lsrs	r3, r3, #25
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	3301      	adds	r3, #1
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80049f6:	687b      	ldr	r3, [r7, #4]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	371c      	adds	r7, #28
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	40021000 	.word	0x40021000
 8004a08:	007a1200 	.word	0x007a1200
 8004a0c:	00f42400 	.word	0x00f42400

08004a10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a18:	2300      	movs	r3, #0
 8004a1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 8098 	beq.w	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a32:	4b43      	ldr	r3, [pc, #268]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10d      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a3e:	4b40      	ldr	r3, [pc, #256]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a42:	4a3f      	ldr	r2, [pc, #252]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a48:	6593      	str	r3, [r2, #88]	; 0x58
 8004a4a:	4b3d      	ldr	r3, [pc, #244]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a52:	60bb      	str	r3, [r7, #8]
 8004a54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a56:	2301      	movs	r3, #1
 8004a58:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a5a:	4b3a      	ldr	r3, [pc, #232]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a39      	ldr	r2, [pc, #228]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a66:	f7fc fd61 	bl	800152c <HAL_GetTick>
 8004a6a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a6c:	e009      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a6e:	f7fc fd5d 	bl	800152c <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d902      	bls.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	74fb      	strb	r3, [r7, #19]
        break;
 8004a80:	e005      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a82:	4b30      	ldr	r3, [pc, #192]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d0ef      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004a8e:	7cfb      	ldrb	r3, [r7, #19]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d159      	bne.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a94:	4b2a      	ldr	r3, [pc, #168]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a9e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d01e      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d019      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ab0:	4b23      	ldr	r3, [pc, #140]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004abc:	4b20      	ldr	r3, [pc, #128]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac2:	4a1f      	ldr	r2, [pc, #124]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004acc:	4b1c      	ldr	r3, [pc, #112]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad2:	4a1b      	ldr	r2, [pc, #108]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004adc:	4a18      	ldr	r2, [pc, #96]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d016      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aee:	f7fc fd1d 	bl	800152c <HAL_GetTick>
 8004af2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004af4:	e00b      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004af6:	f7fc fd19 	bl	800152c <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d902      	bls.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	74fb      	strb	r3, [r7, #19]
            break;
 8004b0c:	e006      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b0e:	4b0c      	ldr	r3, [pc, #48]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d0ec      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004b1c:	7cfb      	ldrb	r3, [r7, #19]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10b      	bne.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b22:	4b07      	ldr	r3, [pc, #28]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b30:	4903      	ldr	r1, [pc, #12]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004b38:	e008      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b3a:	7cfb      	ldrb	r3, [r7, #19]
 8004b3c:	74bb      	strb	r3, [r7, #18]
 8004b3e:	e005      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004b40:	40021000 	.word	0x40021000
 8004b44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b48:	7cfb      	ldrb	r3, [r7, #19]
 8004b4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b4c:	7c7b      	ldrb	r3, [r7, #17]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d105      	bne.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b52:	4ba6      	ldr	r3, [pc, #664]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b56:	4aa5      	ldr	r2, [pc, #660]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b5c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00a      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b6a:	4ba0      	ldr	r3, [pc, #640]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b70:	f023 0203 	bic.w	r2, r3, #3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	499c      	ldr	r1, [pc, #624]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00a      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b8c:	4b97      	ldr	r3, [pc, #604]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b92:	f023 020c 	bic.w	r2, r3, #12
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	4994      	ldr	r1, [pc, #592]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0304 	and.w	r3, r3, #4
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00a      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004bae:	4b8f      	ldr	r3, [pc, #572]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	498b      	ldr	r1, [pc, #556]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0308 	and.w	r3, r3, #8
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00a      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004bd0:	4b86      	ldr	r3, [pc, #536]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	4983      	ldr	r1, [pc, #524]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0320 	and.w	r3, r3, #32
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00a      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bf2:	4b7e      	ldr	r3, [pc, #504]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	497a      	ldr	r1, [pc, #488]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00a      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c14:	4b75      	ldr	r3, [pc, #468]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	4972      	ldr	r1, [pc, #456]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00a      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c36:	4b6d      	ldr	r3, [pc, #436]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	4969      	ldr	r1, [pc, #420]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00a      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c58:	4b64      	ldr	r3, [pc, #400]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	4961      	ldr	r1, [pc, #388]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00a      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c7a:	4b5c      	ldr	r3, [pc, #368]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	4958      	ldr	r1, [pc, #352]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d015      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c9c:	4b53      	ldr	r3, [pc, #332]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004caa:	4950      	ldr	r1, [pc, #320]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cba:	d105      	bne.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cbc:	4b4b      	ldr	r3, [pc, #300]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	4a4a      	ldr	r2, [pc, #296]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cc6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d015      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004cd4:	4b45      	ldr	r3, [pc, #276]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce2:	4942      	ldr	r1, [pc, #264]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cf2:	d105      	bne.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cf4:	4b3d      	ldr	r3, [pc, #244]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	4a3c      	ldr	r2, [pc, #240]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cfe:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d015      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d0c:	4b37      	ldr	r3, [pc, #220]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d12:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1a:	4934      	ldr	r1, [pc, #208]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d2a:	d105      	bne.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d2c:	4b2f      	ldr	r3, [pc, #188]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	4a2e      	ldr	r2, [pc, #184]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d36:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d015      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d44:	4b29      	ldr	r3, [pc, #164]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d52:	4926      	ldr	r1, [pc, #152]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d62:	d105      	bne.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d64:	4b21      	ldr	r3, [pc, #132]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	4a20      	ldr	r2, [pc, #128]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d6e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d015      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d7c:	4b1b      	ldr	r3, [pc, #108]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8a:	4918      	ldr	r1, [pc, #96]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d9a:	d105      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d9c:	4b13      	ldr	r3, [pc, #76]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	4a12      	ldr	r2, [pc, #72]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004da2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004da6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d015      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004db4:	4b0d      	ldr	r3, [pc, #52]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc2:	490a      	ldr	r1, [pc, #40]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dd2:	d105      	bne.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004dd4:	4b05      	ldr	r3, [pc, #20]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	4a04      	ldr	r2, [pc, #16]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dde:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004de0:	7cbb      	ldrb	r3, [r7, #18]
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3718      	adds	r7, #24
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	40021000 	.word	0x40021000

08004df0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e049      	b.n	8004e96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d106      	bne.n	8004e1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7fc f996 	bl	8001148 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3304      	adds	r3, #4
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4610      	mov	r0, r2
 8004e30:	f001 f874 	bl	8005f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3708      	adds	r7, #8
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
	...

08004ea0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d001      	beq.n	8004eb8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e042      	b.n	8004f3e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a21      	ldr	r2, [pc, #132]	; (8004f4c <HAL_TIM_Base_Start+0xac>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d018      	beq.n	8004efc <HAL_TIM_Base_Start+0x5c>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed2:	d013      	beq.n	8004efc <HAL_TIM_Base_Start+0x5c>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a1d      	ldr	r2, [pc, #116]	; (8004f50 <HAL_TIM_Base_Start+0xb0>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d00e      	beq.n	8004efc <HAL_TIM_Base_Start+0x5c>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a1c      	ldr	r2, [pc, #112]	; (8004f54 <HAL_TIM_Base_Start+0xb4>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d009      	beq.n	8004efc <HAL_TIM_Base_Start+0x5c>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a1a      	ldr	r2, [pc, #104]	; (8004f58 <HAL_TIM_Base_Start+0xb8>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d004      	beq.n	8004efc <HAL_TIM_Base_Start+0x5c>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a19      	ldr	r2, [pc, #100]	; (8004f5c <HAL_TIM_Base_Start+0xbc>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d115      	bne.n	8004f28 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689a      	ldr	r2, [r3, #8]
 8004f02:	4b17      	ldr	r3, [pc, #92]	; (8004f60 <HAL_TIM_Base_Start+0xc0>)
 8004f04:	4013      	ands	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2b06      	cmp	r3, #6
 8004f0c:	d015      	beq.n	8004f3a <HAL_TIM_Base_Start+0x9a>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f14:	d011      	beq.n	8004f3a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f042 0201 	orr.w	r2, r2, #1
 8004f24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f26:	e008      	b.n	8004f3a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0201 	orr.w	r2, r2, #1
 8004f36:	601a      	str	r2, [r3, #0]
 8004f38:	e000      	b.n	8004f3c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	40012c00 	.word	0x40012c00
 8004f50:	40000400 	.word	0x40000400
 8004f54:	40000800 	.word	0x40000800
 8004f58:	40013400 	.word	0x40013400
 8004f5c:	40014000 	.word	0x40014000
 8004f60:	00010007 	.word	0x00010007

08004f64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d001      	beq.n	8004f7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e04a      	b.n	8005012 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68da      	ldr	r2, [r3, #12]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f042 0201 	orr.w	r2, r2, #1
 8004f92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a21      	ldr	r2, [pc, #132]	; (8005020 <HAL_TIM_Base_Start_IT+0xbc>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d018      	beq.n	8004fd0 <HAL_TIM_Base_Start_IT+0x6c>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa6:	d013      	beq.n	8004fd0 <HAL_TIM_Base_Start_IT+0x6c>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a1d      	ldr	r2, [pc, #116]	; (8005024 <HAL_TIM_Base_Start_IT+0xc0>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d00e      	beq.n	8004fd0 <HAL_TIM_Base_Start_IT+0x6c>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a1c      	ldr	r2, [pc, #112]	; (8005028 <HAL_TIM_Base_Start_IT+0xc4>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d009      	beq.n	8004fd0 <HAL_TIM_Base_Start_IT+0x6c>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a1a      	ldr	r2, [pc, #104]	; (800502c <HAL_TIM_Base_Start_IT+0xc8>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d004      	beq.n	8004fd0 <HAL_TIM_Base_Start_IT+0x6c>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a19      	ldr	r2, [pc, #100]	; (8005030 <HAL_TIM_Base_Start_IT+0xcc>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d115      	bne.n	8004ffc <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689a      	ldr	r2, [r3, #8]
 8004fd6:	4b17      	ldr	r3, [pc, #92]	; (8005034 <HAL_TIM_Base_Start_IT+0xd0>)
 8004fd8:	4013      	ands	r3, r2
 8004fda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2b06      	cmp	r3, #6
 8004fe0:	d015      	beq.n	800500e <HAL_TIM_Base_Start_IT+0xaa>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fe8:	d011      	beq.n	800500e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f042 0201 	orr.w	r2, r2, #1
 8004ff8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ffa:	e008      	b.n	800500e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f042 0201 	orr.w	r2, r2, #1
 800500a:	601a      	str	r2, [r3, #0]
 800500c:	e000      	b.n	8005010 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800500e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	40012c00 	.word	0x40012c00
 8005024:	40000400 	.word	0x40000400
 8005028:	40000800 	.word	0x40000800
 800502c:	40013400 	.word	0x40013400
 8005030:	40014000 	.word	0x40014000
 8005034:	00010007 	.word	0x00010007

08005038 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e049      	b.n	80050de <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d106      	bne.n	8005064 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f841 	bl	80050e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2202      	movs	r2, #2
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	3304      	adds	r3, #4
 8005074:	4619      	mov	r1, r3
 8005076:	4610      	mov	r0, r2
 8005078:	f000 ff50 	bl	8005f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b083      	sub	sp, #12
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80050ee:	bf00      	nop
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
	...

080050fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d109      	bne.n	8005120 <HAL_TIM_PWM_Start+0x24>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b01      	cmp	r3, #1
 8005116:	bf14      	ite	ne
 8005118:	2301      	movne	r3, #1
 800511a:	2300      	moveq	r3, #0
 800511c:	b2db      	uxtb	r3, r3
 800511e:	e03c      	b.n	800519a <HAL_TIM_PWM_Start+0x9e>
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2b04      	cmp	r3, #4
 8005124:	d109      	bne.n	800513a <HAL_TIM_PWM_Start+0x3e>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b01      	cmp	r3, #1
 8005130:	bf14      	ite	ne
 8005132:	2301      	movne	r3, #1
 8005134:	2300      	moveq	r3, #0
 8005136:	b2db      	uxtb	r3, r3
 8005138:	e02f      	b.n	800519a <HAL_TIM_PWM_Start+0x9e>
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2b08      	cmp	r3, #8
 800513e:	d109      	bne.n	8005154 <HAL_TIM_PWM_Start+0x58>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b01      	cmp	r3, #1
 800514a:	bf14      	ite	ne
 800514c:	2301      	movne	r3, #1
 800514e:	2300      	moveq	r3, #0
 8005150:	b2db      	uxtb	r3, r3
 8005152:	e022      	b.n	800519a <HAL_TIM_PWM_Start+0x9e>
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	2b0c      	cmp	r3, #12
 8005158:	d109      	bne.n	800516e <HAL_TIM_PWM_Start+0x72>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b01      	cmp	r3, #1
 8005164:	bf14      	ite	ne
 8005166:	2301      	movne	r3, #1
 8005168:	2300      	moveq	r3, #0
 800516a:	b2db      	uxtb	r3, r3
 800516c:	e015      	b.n	800519a <HAL_TIM_PWM_Start+0x9e>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b10      	cmp	r3, #16
 8005172:	d109      	bne.n	8005188 <HAL_TIM_PWM_Start+0x8c>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b01      	cmp	r3, #1
 800517e:	bf14      	ite	ne
 8005180:	2301      	movne	r3, #1
 8005182:	2300      	moveq	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	e008      	b.n	800519a <HAL_TIM_PWM_Start+0x9e>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b01      	cmp	r3, #1
 8005192:	bf14      	ite	ne
 8005194:	2301      	movne	r3, #1
 8005196:	2300      	moveq	r3, #0
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d001      	beq.n	80051a2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e097      	b.n	80052d2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d104      	bne.n	80051b2 <HAL_TIM_PWM_Start+0xb6>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051b0:	e023      	b.n	80051fa <HAL_TIM_PWM_Start+0xfe>
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	2b04      	cmp	r3, #4
 80051b6:	d104      	bne.n	80051c2 <HAL_TIM_PWM_Start+0xc6>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051c0:	e01b      	b.n	80051fa <HAL_TIM_PWM_Start+0xfe>
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	d104      	bne.n	80051d2 <HAL_TIM_PWM_Start+0xd6>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051d0:	e013      	b.n	80051fa <HAL_TIM_PWM_Start+0xfe>
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b0c      	cmp	r3, #12
 80051d6:	d104      	bne.n	80051e2 <HAL_TIM_PWM_Start+0xe6>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051e0:	e00b      	b.n	80051fa <HAL_TIM_PWM_Start+0xfe>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b10      	cmp	r3, #16
 80051e6:	d104      	bne.n	80051f2 <HAL_TIM_PWM_Start+0xf6>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2202      	movs	r2, #2
 80051ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051f0:	e003      	b.n	80051fa <HAL_TIM_PWM_Start+0xfe>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2202      	movs	r2, #2
 80051f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2201      	movs	r2, #1
 8005200:	6839      	ldr	r1, [r7, #0]
 8005202:	4618      	mov	r0, r3
 8005204:	f001 fbca 	bl	800699c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a33      	ldr	r2, [pc, #204]	; (80052dc <HAL_TIM_PWM_Start+0x1e0>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d013      	beq.n	800523a <HAL_TIM_PWM_Start+0x13e>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a32      	ldr	r2, [pc, #200]	; (80052e0 <HAL_TIM_PWM_Start+0x1e4>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d00e      	beq.n	800523a <HAL_TIM_PWM_Start+0x13e>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a30      	ldr	r2, [pc, #192]	; (80052e4 <HAL_TIM_PWM_Start+0x1e8>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d009      	beq.n	800523a <HAL_TIM_PWM_Start+0x13e>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a2f      	ldr	r2, [pc, #188]	; (80052e8 <HAL_TIM_PWM_Start+0x1ec>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d004      	beq.n	800523a <HAL_TIM_PWM_Start+0x13e>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a2d      	ldr	r2, [pc, #180]	; (80052ec <HAL_TIM_PWM_Start+0x1f0>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d101      	bne.n	800523e <HAL_TIM_PWM_Start+0x142>
 800523a:	2301      	movs	r3, #1
 800523c:	e000      	b.n	8005240 <HAL_TIM_PWM_Start+0x144>
 800523e:	2300      	movs	r3, #0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d007      	beq.n	8005254 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005252:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a20      	ldr	r2, [pc, #128]	; (80052dc <HAL_TIM_PWM_Start+0x1e0>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d018      	beq.n	8005290 <HAL_TIM_PWM_Start+0x194>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005266:	d013      	beq.n	8005290 <HAL_TIM_PWM_Start+0x194>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a20      	ldr	r2, [pc, #128]	; (80052f0 <HAL_TIM_PWM_Start+0x1f4>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d00e      	beq.n	8005290 <HAL_TIM_PWM_Start+0x194>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a1f      	ldr	r2, [pc, #124]	; (80052f4 <HAL_TIM_PWM_Start+0x1f8>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d009      	beq.n	8005290 <HAL_TIM_PWM_Start+0x194>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a17      	ldr	r2, [pc, #92]	; (80052e0 <HAL_TIM_PWM_Start+0x1e4>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d004      	beq.n	8005290 <HAL_TIM_PWM_Start+0x194>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a16      	ldr	r2, [pc, #88]	; (80052e4 <HAL_TIM_PWM_Start+0x1e8>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d115      	bne.n	80052bc <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689a      	ldr	r2, [r3, #8]
 8005296:	4b18      	ldr	r3, [pc, #96]	; (80052f8 <HAL_TIM_PWM_Start+0x1fc>)
 8005298:	4013      	ands	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2b06      	cmp	r3, #6
 80052a0:	d015      	beq.n	80052ce <HAL_TIM_PWM_Start+0x1d2>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052a8:	d011      	beq.n	80052ce <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f042 0201 	orr.w	r2, r2, #1
 80052b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ba:	e008      	b.n	80052ce <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0201 	orr.w	r2, r2, #1
 80052ca:	601a      	str	r2, [r3, #0]
 80052cc:	e000      	b.n	80052d0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	40012c00 	.word	0x40012c00
 80052e0:	40013400 	.word	0x40013400
 80052e4:	40014000 	.word	0x40014000
 80052e8:	40014400 	.word	0x40014400
 80052ec:	40014800 	.word	0x40014800
 80052f0:	40000400 	.word	0x40000400
 80052f4:	40000800 	.word	0x40000800
 80052f8:	00010007 	.word	0x00010007

080052fc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e049      	b.n	80053a2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d106      	bne.n	8005328 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7fb ff80 	bl	8001228 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	3304      	adds	r3, #4
 8005338:	4619      	mov	r1, r3
 800533a:	4610      	mov	r0, r2
 800533c:	f000 fdee 	bl	8005f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
	...

080053ac <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d104      	bne.n	80053c6 <HAL_TIM_IC_Start_IT+0x1a>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	e023      	b.n	800540e <HAL_TIM_IC_Start_IT+0x62>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b04      	cmp	r3, #4
 80053ca:	d104      	bne.n	80053d6 <HAL_TIM_IC_Start_IT+0x2a>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	e01b      	b.n	800540e <HAL_TIM_IC_Start_IT+0x62>
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d104      	bne.n	80053e6 <HAL_TIM_IC_Start_IT+0x3a>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	e013      	b.n	800540e <HAL_TIM_IC_Start_IT+0x62>
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b0c      	cmp	r3, #12
 80053ea:	d104      	bne.n	80053f6 <HAL_TIM_IC_Start_IT+0x4a>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	e00b      	b.n	800540e <HAL_TIM_IC_Start_IT+0x62>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b10      	cmp	r3, #16
 80053fa:	d104      	bne.n	8005406 <HAL_TIM_IC_Start_IT+0x5a>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005402:	b2db      	uxtb	r3, r3
 8005404:	e003      	b.n	800540e <HAL_TIM_IC_Start_IT+0x62>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800540c:	b2db      	uxtb	r3, r3
 800540e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d104      	bne.n	8005420 <HAL_TIM_IC_Start_IT+0x74>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800541c:	b2db      	uxtb	r3, r3
 800541e:	e013      	b.n	8005448 <HAL_TIM_IC_Start_IT+0x9c>
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	2b04      	cmp	r3, #4
 8005424:	d104      	bne.n	8005430 <HAL_TIM_IC_Start_IT+0x84>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800542c:	b2db      	uxtb	r3, r3
 800542e:	e00b      	b.n	8005448 <HAL_TIM_IC_Start_IT+0x9c>
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	2b08      	cmp	r3, #8
 8005434:	d104      	bne.n	8005440 <HAL_TIM_IC_Start_IT+0x94>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800543c:	b2db      	uxtb	r3, r3
 800543e:	e003      	b.n	8005448 <HAL_TIM_IC_Start_IT+0x9c>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005446:	b2db      	uxtb	r3, r3
 8005448:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800544a:	7bfb      	ldrb	r3, [r7, #15]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d102      	bne.n	8005456 <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005450:	7bbb      	ldrb	r3, [r7, #14]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d001      	beq.n	800545a <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e0d3      	b.n	8005602 <HAL_TIM_IC_Start_IT+0x256>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d104      	bne.n	800546a <HAL_TIM_IC_Start_IT+0xbe>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2202      	movs	r2, #2
 8005464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005468:	e023      	b.n	80054b2 <HAL_TIM_IC_Start_IT+0x106>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b04      	cmp	r3, #4
 800546e:	d104      	bne.n	800547a <HAL_TIM_IC_Start_IT+0xce>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005478:	e01b      	b.n	80054b2 <HAL_TIM_IC_Start_IT+0x106>
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2b08      	cmp	r3, #8
 800547e:	d104      	bne.n	800548a <HAL_TIM_IC_Start_IT+0xde>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2202      	movs	r2, #2
 8005484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005488:	e013      	b.n	80054b2 <HAL_TIM_IC_Start_IT+0x106>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2b0c      	cmp	r3, #12
 800548e:	d104      	bne.n	800549a <HAL_TIM_IC_Start_IT+0xee>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005498:	e00b      	b.n	80054b2 <HAL_TIM_IC_Start_IT+0x106>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b10      	cmp	r3, #16
 800549e:	d104      	bne.n	80054aa <HAL_TIM_IC_Start_IT+0xfe>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054a8:	e003      	b.n	80054b2 <HAL_TIM_IC_Start_IT+0x106>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2202      	movs	r2, #2
 80054ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d104      	bne.n	80054c2 <HAL_TIM_IC_Start_IT+0x116>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2202      	movs	r2, #2
 80054bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054c0:	e013      	b.n	80054ea <HAL_TIM_IC_Start_IT+0x13e>
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b04      	cmp	r3, #4
 80054c6:	d104      	bne.n	80054d2 <HAL_TIM_IC_Start_IT+0x126>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2202      	movs	r2, #2
 80054cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054d0:	e00b      	b.n	80054ea <HAL_TIM_IC_Start_IT+0x13e>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b08      	cmp	r3, #8
 80054d6:	d104      	bne.n	80054e2 <HAL_TIM_IC_Start_IT+0x136>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2202      	movs	r2, #2
 80054dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054e0:	e003      	b.n	80054ea <HAL_TIM_IC_Start_IT+0x13e>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2202      	movs	r2, #2
 80054e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b0c      	cmp	r3, #12
 80054ee:	d841      	bhi.n	8005574 <HAL_TIM_IC_Start_IT+0x1c8>
 80054f0:	a201      	add	r2, pc, #4	; (adr r2, 80054f8 <HAL_TIM_IC_Start_IT+0x14c>)
 80054f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f6:	bf00      	nop
 80054f8:	0800552d 	.word	0x0800552d
 80054fc:	08005575 	.word	0x08005575
 8005500:	08005575 	.word	0x08005575
 8005504:	08005575 	.word	0x08005575
 8005508:	0800553f 	.word	0x0800553f
 800550c:	08005575 	.word	0x08005575
 8005510:	08005575 	.word	0x08005575
 8005514:	08005575 	.word	0x08005575
 8005518:	08005551 	.word	0x08005551
 800551c:	08005575 	.word	0x08005575
 8005520:	08005575 	.word	0x08005575
 8005524:	08005575 	.word	0x08005575
 8005528:	08005563 	.word	0x08005563
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f042 0202 	orr.w	r2, r2, #2
 800553a:	60da      	str	r2, [r3, #12]
      break;
 800553c:	e01b      	b.n	8005576 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68da      	ldr	r2, [r3, #12]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f042 0204 	orr.w	r2, r2, #4
 800554c:	60da      	str	r2, [r3, #12]
      break;
 800554e:	e012      	b.n	8005576 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68da      	ldr	r2, [r3, #12]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f042 0208 	orr.w	r2, r2, #8
 800555e:	60da      	str	r2, [r3, #12]
      break;
 8005560:	e009      	b.n	8005576 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68da      	ldr	r2, [r3, #12]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f042 0210 	orr.w	r2, r2, #16
 8005570:	60da      	str	r2, [r3, #12]
      break;
 8005572:	e000      	b.n	8005576 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8005574:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2201      	movs	r2, #1
 800557c:	6839      	ldr	r1, [r7, #0]
 800557e:	4618      	mov	r0, r3
 8005580:	f001 fa0c 	bl	800699c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a20      	ldr	r2, [pc, #128]	; (800560c <HAL_TIM_IC_Start_IT+0x260>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d018      	beq.n	80055c0 <HAL_TIM_IC_Start_IT+0x214>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005596:	d013      	beq.n	80055c0 <HAL_TIM_IC_Start_IT+0x214>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a1c      	ldr	r2, [pc, #112]	; (8005610 <HAL_TIM_IC_Start_IT+0x264>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d00e      	beq.n	80055c0 <HAL_TIM_IC_Start_IT+0x214>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a1b      	ldr	r2, [pc, #108]	; (8005614 <HAL_TIM_IC_Start_IT+0x268>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d009      	beq.n	80055c0 <HAL_TIM_IC_Start_IT+0x214>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a19      	ldr	r2, [pc, #100]	; (8005618 <HAL_TIM_IC_Start_IT+0x26c>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d004      	beq.n	80055c0 <HAL_TIM_IC_Start_IT+0x214>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a18      	ldr	r2, [pc, #96]	; (800561c <HAL_TIM_IC_Start_IT+0x270>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d115      	bne.n	80055ec <HAL_TIM_IC_Start_IT+0x240>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689a      	ldr	r2, [r3, #8]
 80055c6:	4b16      	ldr	r3, [pc, #88]	; (8005620 <HAL_TIM_IC_Start_IT+0x274>)
 80055c8:	4013      	ands	r3, r2
 80055ca:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	2b06      	cmp	r3, #6
 80055d0:	d015      	beq.n	80055fe <HAL_TIM_IC_Start_IT+0x252>
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055d8:	d011      	beq.n	80055fe <HAL_TIM_IC_Start_IT+0x252>
    {
      __HAL_TIM_ENABLE(htim);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f042 0201 	orr.w	r2, r2, #1
 80055e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ea:	e008      	b.n	80055fe <HAL_TIM_IC_Start_IT+0x252>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0201 	orr.w	r2, r2, #1
 80055fa:	601a      	str	r2, [r3, #0]
 80055fc:	e000      	b.n	8005600 <HAL_TIM_IC_Start_IT+0x254>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	40012c00 	.word	0x40012c00
 8005610:	40000400 	.word	0x40000400
 8005614:	40000800 	.word	0x40000800
 8005618:	40013400 	.word	0x40013400
 800561c:	40014000 	.word	0x40014000
 8005620:	00010007 	.word	0x00010007

08005624 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b02      	cmp	r3, #2
 8005638:	d122      	bne.n	8005680 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b02      	cmp	r3, #2
 8005646:	d11b      	bne.n	8005680 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f06f 0202 	mvn.w	r2, #2
 8005650:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	f003 0303 	and.w	r3, r3, #3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7fb fa46 	bl	8000af8 <HAL_TIM_IC_CaptureCallback>
 800566c:	e005      	b.n	800567a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 fc36 	bl	8005ee0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 fc3d 	bl	8005ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	f003 0304 	and.w	r3, r3, #4
 800568a:	2b04      	cmp	r3, #4
 800568c:	d122      	bne.n	80056d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f003 0304 	and.w	r3, r3, #4
 8005698:	2b04      	cmp	r3, #4
 800569a:	d11b      	bne.n	80056d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f06f 0204 	mvn.w	r2, #4
 80056a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2202      	movs	r2, #2
 80056aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7fb fa1c 	bl	8000af8 <HAL_TIM_IC_CaptureCallback>
 80056c0:	e005      	b.n	80056ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 fc0c 	bl	8005ee0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 fc13 	bl	8005ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	f003 0308 	and.w	r3, r3, #8
 80056de:	2b08      	cmp	r3, #8
 80056e0:	d122      	bne.n	8005728 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	f003 0308 	and.w	r3, r3, #8
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d11b      	bne.n	8005728 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f06f 0208 	mvn.w	r2, #8
 80056f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2204      	movs	r2, #4
 80056fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	f003 0303 	and.w	r3, r3, #3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f7fb f9f2 	bl	8000af8 <HAL_TIM_IC_CaptureCallback>
 8005714:	e005      	b.n	8005722 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 fbe2 	bl	8005ee0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 fbe9 	bl	8005ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f003 0310 	and.w	r3, r3, #16
 8005732:	2b10      	cmp	r3, #16
 8005734:	d122      	bne.n	800577c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f003 0310 	and.w	r3, r3, #16
 8005740:	2b10      	cmp	r3, #16
 8005742:	d11b      	bne.n	800577c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f06f 0210 	mvn.w	r2, #16
 800574c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2208      	movs	r2, #8
 8005752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7fb f9c8 	bl	8000af8 <HAL_TIM_IC_CaptureCallback>
 8005768:	e005      	b.n	8005776 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fbb8 	bl	8005ee0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 fbbf 	bl	8005ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b01      	cmp	r3, #1
 8005788:	d10e      	bne.n	80057a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b01      	cmp	r3, #1
 8005796:	d107      	bne.n	80057a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f06f 0201 	mvn.w	r2, #1
 80057a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7fa fd38 	bl	8000218 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b2:	2b80      	cmp	r3, #128	; 0x80
 80057b4:	d10e      	bne.n	80057d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c0:	2b80      	cmp	r3, #128	; 0x80
 80057c2:	d107      	bne.n	80057d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f001 fac4 	bl	8006d5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057e2:	d10e      	bne.n	8005802 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ee:	2b80      	cmp	r3, #128	; 0x80
 80057f0:	d107      	bne.n	8005802 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80057fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f001 fab7 	bl	8006d70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580c:	2b40      	cmp	r3, #64	; 0x40
 800580e:	d10e      	bne.n	800582e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581a:	2b40      	cmp	r3, #64	; 0x40
 800581c:	d107      	bne.n	800582e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 fb6d 	bl	8005f08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	f003 0320 	and.w	r3, r3, #32
 8005838:	2b20      	cmp	r3, #32
 800583a:	d10e      	bne.n	800585a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	f003 0320 	and.w	r3, r3, #32
 8005846:	2b20      	cmp	r3, #32
 8005848:	d107      	bne.n	800585a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f06f 0220 	mvn.w	r2, #32
 8005852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f001 fa77 	bl	8006d48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005864:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005868:	d10f      	bne.n	800588a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005874:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005878:	d107      	bne.n	800588a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f001 fa7d 	bl	8006d84 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005894:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005898:	d10f      	bne.n	80058ba <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058a8:	d107      	bne.n	80058ba <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80058b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f001 fa6f 	bl	8006d98 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058c8:	d10f      	bne.n	80058ea <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058d8:	d107      	bne.n	80058ea <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80058e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f001 fa61 	bl	8006dac <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058f8:	d10f      	bne.n	800591a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005904:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005908:	d107      	bne.n	800591a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f001 fa53 	bl	8006dc0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800591a:	bf00      	nop
 800591c:	3708      	adds	r7, #8
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b084      	sub	sp, #16
 8005926:	af00      	add	r7, sp, #0
 8005928:	60f8      	str	r0, [r7, #12]
 800592a:	60b9      	str	r1, [r7, #8]
 800592c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005934:	2b01      	cmp	r3, #1
 8005936:	d101      	bne.n	800593c <HAL_TIM_IC_ConfigChannel+0x1a>
 8005938:	2302      	movs	r3, #2
 800593a:	e082      	b.n	8005a42 <HAL_TIM_IC_ConfigChannel+0x120>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d11b      	bne.n	8005982 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6818      	ldr	r0, [r3, #0]
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	6819      	ldr	r1, [r3, #0]
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f000 fe65 	bl	8006628 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	699a      	ldr	r2, [r3, #24]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 020c 	bic.w	r2, r2, #12
 800596c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6999      	ldr	r1, [r3, #24]
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	689a      	ldr	r2, [r3, #8]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	619a      	str	r2, [r3, #24]
 8005980:	e05a      	b.n	8005a38 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2b04      	cmp	r3, #4
 8005986:	d11c      	bne.n	80059c2 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6818      	ldr	r0, [r3, #0]
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	6819      	ldr	r1, [r3, #0]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	685a      	ldr	r2, [r3, #4]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	f000 fedd 	bl	8006756 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	699a      	ldr	r2, [r3, #24]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80059aa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6999      	ldr	r1, [r3, #24]
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	021a      	lsls	r2, r3, #8
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	430a      	orrs	r2, r1
 80059be:	619a      	str	r2, [r3, #24]
 80059c0:	e03a      	b.n	8005a38 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b08      	cmp	r3, #8
 80059c6:	d11b      	bne.n	8005a00 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6818      	ldr	r0, [r3, #0]
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	6819      	ldr	r1, [r3, #0]
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f000 ff2a 	bl	8006830 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	69da      	ldr	r2, [r3, #28]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f022 020c 	bic.w	r2, r2, #12
 80059ea:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	69d9      	ldr	r1, [r3, #28]
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	61da      	str	r2, [r3, #28]
 80059fe:	e01b      	b.n	8005a38 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6818      	ldr	r0, [r3, #0]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	6819      	ldr	r1, [r3, #0]
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	f000 ff4a 	bl	80068a8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	69da      	ldr	r2, [r3, #28]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005a22:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	69d9      	ldr	r1, [r3, #28]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	021a      	lsls	r2, r3, #8
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
	...

08005a4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d101      	bne.n	8005a66 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005a62:	2302      	movs	r3, #2
 8005a64:	e0fd      	b.n	8005c62 <HAL_TIM_PWM_ConfigChannel+0x216>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2b14      	cmp	r3, #20
 8005a72:	f200 80f0 	bhi.w	8005c56 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005a76:	a201      	add	r2, pc, #4	; (adr r2, 8005a7c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a7c:	08005ad1 	.word	0x08005ad1
 8005a80:	08005c57 	.word	0x08005c57
 8005a84:	08005c57 	.word	0x08005c57
 8005a88:	08005c57 	.word	0x08005c57
 8005a8c:	08005b11 	.word	0x08005b11
 8005a90:	08005c57 	.word	0x08005c57
 8005a94:	08005c57 	.word	0x08005c57
 8005a98:	08005c57 	.word	0x08005c57
 8005a9c:	08005b53 	.word	0x08005b53
 8005aa0:	08005c57 	.word	0x08005c57
 8005aa4:	08005c57 	.word	0x08005c57
 8005aa8:	08005c57 	.word	0x08005c57
 8005aac:	08005b93 	.word	0x08005b93
 8005ab0:	08005c57 	.word	0x08005c57
 8005ab4:	08005c57 	.word	0x08005c57
 8005ab8:	08005c57 	.word	0x08005c57
 8005abc:	08005bd5 	.word	0x08005bd5
 8005ac0:	08005c57 	.word	0x08005c57
 8005ac4:	08005c57 	.word	0x08005c57
 8005ac8:	08005c57 	.word	0x08005c57
 8005acc:	08005c15 	.word	0x08005c15
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68b9      	ldr	r1, [r7, #8]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 fab0 	bl	800603c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	699a      	ldr	r2, [r3, #24]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f042 0208 	orr.w	r2, r2, #8
 8005aea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	699a      	ldr	r2, [r3, #24]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f022 0204 	bic.w	r2, r2, #4
 8005afa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6999      	ldr	r1, [r3, #24]
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	691a      	ldr	r2, [r3, #16]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	619a      	str	r2, [r3, #24]
      break;
 8005b0e:	e0a3      	b.n	8005c58 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68b9      	ldr	r1, [r7, #8]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 fb20 	bl	800615c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	699a      	ldr	r2, [r3, #24]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	699a      	ldr	r2, [r3, #24]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6999      	ldr	r1, [r3, #24]
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	021a      	lsls	r2, r3, #8
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	619a      	str	r2, [r3, #24]
      break;
 8005b50:	e082      	b.n	8005c58 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68b9      	ldr	r1, [r7, #8]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f000 fb89 	bl	8006270 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69da      	ldr	r2, [r3, #28]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f042 0208 	orr.w	r2, r2, #8
 8005b6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	69da      	ldr	r2, [r3, #28]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f022 0204 	bic.w	r2, r2, #4
 8005b7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	69d9      	ldr	r1, [r3, #28]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	691a      	ldr	r2, [r3, #16]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	61da      	str	r2, [r3, #28]
      break;
 8005b90:	e062      	b.n	8005c58 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68b9      	ldr	r1, [r7, #8]
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f000 fbf1 	bl	8006380 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	69da      	ldr	r2, [r3, #28]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	69da      	ldr	r2, [r3, #28]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	69d9      	ldr	r1, [r3, #28]
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	021a      	lsls	r2, r3, #8
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	61da      	str	r2, [r3, #28]
      break;
 8005bd2:	e041      	b.n	8005c58 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68b9      	ldr	r1, [r7, #8]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 fc5a 	bl	8006494 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f042 0208 	orr.w	r2, r2, #8
 8005bee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 0204 	bic.w	r2, r2, #4
 8005bfe:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	691a      	ldr	r2, [r3, #16]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005c12:	e021      	b.n	8005c58 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68b9      	ldr	r1, [r7, #8]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f000 fc9e 	bl	800655c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c2e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c3e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	021a      	lsls	r2, r3, #8
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	430a      	orrs	r2, r1
 8005c52:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005c54:	e000      	b.n	8005c58 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005c56:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop

08005c6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d101      	bne.n	8005c84 <HAL_TIM_ConfigClockSource+0x18>
 8005c80:	2302      	movs	r3, #2
 8005c82:	e0dd      	b.n	8005e40 <HAL_TIM_ConfigClockSource+0x1d4>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2202      	movs	r2, #2
 8005c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005ca2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ca6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a62      	ldr	r2, [pc, #392]	; (8005e48 <HAL_TIM_ConfigClockSource+0x1dc>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	f000 80a9 	beq.w	8005e16 <HAL_TIM_ConfigClockSource+0x1aa>
 8005cc4:	4a60      	ldr	r2, [pc, #384]	; (8005e48 <HAL_TIM_ConfigClockSource+0x1dc>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	f200 80ae 	bhi.w	8005e28 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ccc:	4a5f      	ldr	r2, [pc, #380]	; (8005e4c <HAL_TIM_ConfigClockSource+0x1e0>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	f000 80a1 	beq.w	8005e16 <HAL_TIM_ConfigClockSource+0x1aa>
 8005cd4:	4a5d      	ldr	r2, [pc, #372]	; (8005e4c <HAL_TIM_ConfigClockSource+0x1e0>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	f200 80a6 	bhi.w	8005e28 <HAL_TIM_ConfigClockSource+0x1bc>
 8005cdc:	4a5c      	ldr	r2, [pc, #368]	; (8005e50 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	f000 8099 	beq.w	8005e16 <HAL_TIM_ConfigClockSource+0x1aa>
 8005ce4:	4a5a      	ldr	r2, [pc, #360]	; (8005e50 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	f200 809e 	bhi.w	8005e28 <HAL_TIM_ConfigClockSource+0x1bc>
 8005cec:	4a59      	ldr	r2, [pc, #356]	; (8005e54 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	f000 8091 	beq.w	8005e16 <HAL_TIM_ConfigClockSource+0x1aa>
 8005cf4:	4a57      	ldr	r2, [pc, #348]	; (8005e54 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	f200 8096 	bhi.w	8005e28 <HAL_TIM_ConfigClockSource+0x1bc>
 8005cfc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005d00:	f000 8089 	beq.w	8005e16 <HAL_TIM_ConfigClockSource+0x1aa>
 8005d04:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005d08:	f200 808e 	bhi.w	8005e28 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d10:	d03e      	beq.n	8005d90 <HAL_TIM_ConfigClockSource+0x124>
 8005d12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d16:	f200 8087 	bhi.w	8005e28 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d1e:	f000 8085 	beq.w	8005e2c <HAL_TIM_ConfigClockSource+0x1c0>
 8005d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d26:	d87f      	bhi.n	8005e28 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d28:	2b70      	cmp	r3, #112	; 0x70
 8005d2a:	d01a      	beq.n	8005d62 <HAL_TIM_ConfigClockSource+0xf6>
 8005d2c:	2b70      	cmp	r3, #112	; 0x70
 8005d2e:	d87b      	bhi.n	8005e28 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d30:	2b60      	cmp	r3, #96	; 0x60
 8005d32:	d050      	beq.n	8005dd6 <HAL_TIM_ConfigClockSource+0x16a>
 8005d34:	2b60      	cmp	r3, #96	; 0x60
 8005d36:	d877      	bhi.n	8005e28 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d38:	2b50      	cmp	r3, #80	; 0x50
 8005d3a:	d03c      	beq.n	8005db6 <HAL_TIM_ConfigClockSource+0x14a>
 8005d3c:	2b50      	cmp	r3, #80	; 0x50
 8005d3e:	d873      	bhi.n	8005e28 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d40:	2b40      	cmp	r3, #64	; 0x40
 8005d42:	d058      	beq.n	8005df6 <HAL_TIM_ConfigClockSource+0x18a>
 8005d44:	2b40      	cmp	r3, #64	; 0x40
 8005d46:	d86f      	bhi.n	8005e28 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d48:	2b30      	cmp	r3, #48	; 0x30
 8005d4a:	d064      	beq.n	8005e16 <HAL_TIM_ConfigClockSource+0x1aa>
 8005d4c:	2b30      	cmp	r3, #48	; 0x30
 8005d4e:	d86b      	bhi.n	8005e28 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d50:	2b20      	cmp	r3, #32
 8005d52:	d060      	beq.n	8005e16 <HAL_TIM_ConfigClockSource+0x1aa>
 8005d54:	2b20      	cmp	r3, #32
 8005d56:	d867      	bhi.n	8005e28 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d05c      	beq.n	8005e16 <HAL_TIM_ConfigClockSource+0x1aa>
 8005d5c:	2b10      	cmp	r3, #16
 8005d5e:	d05a      	beq.n	8005e16 <HAL_TIM_ConfigClockSource+0x1aa>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005d60:	e062      	b.n	8005e28 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6818      	ldr	r0, [r3, #0]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	6899      	ldr	r1, [r3, #8]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	f000 fdf3 	bl	800695c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d84:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	609a      	str	r2, [r3, #8]
      break;
 8005d8e:	e04e      	b.n	8005e2e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_ETR_SetConfig(htim->Instance,
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6818      	ldr	r0, [r3, #0]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	6899      	ldr	r1, [r3, #8]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	f000 fddc 	bl	800695c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689a      	ldr	r2, [r3, #8]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005db2:	609a      	str	r2, [r3, #8]
      break;
 8005db4:	e03b      	b.n	8005e2e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6818      	ldr	r0, [r3, #0]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	6859      	ldr	r1, [r3, #4]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	f000 fc98 	bl	80066f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2150      	movs	r1, #80	; 0x50
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f000 fda7 	bl	8006922 <TIM_ITRx_SetConfig>
      break;
 8005dd4:	e02b      	b.n	8005e2e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6818      	ldr	r0, [r3, #0]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	6859      	ldr	r1, [r3, #4]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	461a      	mov	r2, r3
 8005de4:	f000 fcf4 	bl	80067d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2160      	movs	r1, #96	; 0x60
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 fd97 	bl	8006922 <TIM_ITRx_SetConfig>
      break;
 8005df4:	e01b      	b.n	8005e2e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6818      	ldr	r0, [r3, #0]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	6859      	ldr	r1, [r3, #4]
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	461a      	mov	r2, r3
 8005e04:	f000 fc78 	bl	80066f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2140      	movs	r1, #64	; 0x40
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f000 fd87 	bl	8006922 <TIM_ITRx_SetConfig>
      break;
 8005e14:	e00b      	b.n	8005e2e <HAL_TIM_ConfigClockSource+0x1c2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4619      	mov	r1, r3
 8005e20:	4610      	mov	r0, r2
 8005e22:	f000 fd7e 	bl	8006922 <TIM_ITRx_SetConfig>
        break;
 8005e26:	e002      	b.n	8005e2e <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 8005e28:	bf00      	nop
 8005e2a:	e000      	b.n	8005e2e <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 8005e2c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	00100070 	.word	0x00100070
 8005e4c:	00100040 	.word	0x00100040
 8005e50:	00100030 	.word	0x00100030
 8005e54:	00100020 	.word	0x00100020

08005e58 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005e62:	2300      	movs	r3, #0
 8005e64:	60fb      	str	r3, [r7, #12]
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b0c      	cmp	r3, #12
 8005e6a:	d831      	bhi.n	8005ed0 <HAL_TIM_ReadCapturedValue+0x78>
 8005e6c:	a201      	add	r2, pc, #4	; (adr r2, 8005e74 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e72:	bf00      	nop
 8005e74:	08005ea9 	.word	0x08005ea9
 8005e78:	08005ed1 	.word	0x08005ed1
 8005e7c:	08005ed1 	.word	0x08005ed1
 8005e80:	08005ed1 	.word	0x08005ed1
 8005e84:	08005eb3 	.word	0x08005eb3
 8005e88:	08005ed1 	.word	0x08005ed1
 8005e8c:	08005ed1 	.word	0x08005ed1
 8005e90:	08005ed1 	.word	0x08005ed1
 8005e94:	08005ebd 	.word	0x08005ebd
 8005e98:	08005ed1 	.word	0x08005ed1
 8005e9c:	08005ed1 	.word	0x08005ed1
 8005ea0:	08005ed1 	.word	0x08005ed1
 8005ea4:	08005ec7 	.word	0x08005ec7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eae:	60fb      	str	r3, [r7, #12]

      break;
 8005eb0:	e00f      	b.n	8005ed2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb8:	60fb      	str	r3, [r7, #12]

      break;
 8005eba:	e00a      	b.n	8005ed2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec2:	60fb      	str	r3, [r7, #12]

      break;
 8005ec4:	e005      	b.n	8005ed2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ecc:	60fb      	str	r3, [r7, #12]

      break;
 8005ece:	e000      	b.n	8005ed2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005ed0:	bf00      	nop
  }

  return tmpreg;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a3c      	ldr	r2, [pc, #240]	; (8006020 <TIM_Base_SetConfig+0x104>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d00f      	beq.n	8005f54 <TIM_Base_SetConfig+0x38>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f3a:	d00b      	beq.n	8005f54 <TIM_Base_SetConfig+0x38>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a39      	ldr	r2, [pc, #228]	; (8006024 <TIM_Base_SetConfig+0x108>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d007      	beq.n	8005f54 <TIM_Base_SetConfig+0x38>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a38      	ldr	r2, [pc, #224]	; (8006028 <TIM_Base_SetConfig+0x10c>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d003      	beq.n	8005f54 <TIM_Base_SetConfig+0x38>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a37      	ldr	r2, [pc, #220]	; (800602c <TIM_Base_SetConfig+0x110>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d108      	bne.n	8005f66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a2d      	ldr	r2, [pc, #180]	; (8006020 <TIM_Base_SetConfig+0x104>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d01b      	beq.n	8005fa6 <TIM_Base_SetConfig+0x8a>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f74:	d017      	beq.n	8005fa6 <TIM_Base_SetConfig+0x8a>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a2a      	ldr	r2, [pc, #168]	; (8006024 <TIM_Base_SetConfig+0x108>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d013      	beq.n	8005fa6 <TIM_Base_SetConfig+0x8a>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a29      	ldr	r2, [pc, #164]	; (8006028 <TIM_Base_SetConfig+0x10c>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d00f      	beq.n	8005fa6 <TIM_Base_SetConfig+0x8a>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a28      	ldr	r2, [pc, #160]	; (800602c <TIM_Base_SetConfig+0x110>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d00b      	beq.n	8005fa6 <TIM_Base_SetConfig+0x8a>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a27      	ldr	r2, [pc, #156]	; (8006030 <TIM_Base_SetConfig+0x114>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d007      	beq.n	8005fa6 <TIM_Base_SetConfig+0x8a>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a26      	ldr	r2, [pc, #152]	; (8006034 <TIM_Base_SetConfig+0x118>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d003      	beq.n	8005fa6 <TIM_Base_SetConfig+0x8a>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a25      	ldr	r2, [pc, #148]	; (8006038 <TIM_Base_SetConfig+0x11c>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d108      	bne.n	8005fb8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	689a      	ldr	r2, [r3, #8]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a10      	ldr	r2, [pc, #64]	; (8006020 <TIM_Base_SetConfig+0x104>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d00f      	beq.n	8006004 <TIM_Base_SetConfig+0xe8>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a11      	ldr	r2, [pc, #68]	; (800602c <TIM_Base_SetConfig+0x110>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d00b      	beq.n	8006004 <TIM_Base_SetConfig+0xe8>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a10      	ldr	r2, [pc, #64]	; (8006030 <TIM_Base_SetConfig+0x114>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d007      	beq.n	8006004 <TIM_Base_SetConfig+0xe8>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a0f      	ldr	r2, [pc, #60]	; (8006034 <TIM_Base_SetConfig+0x118>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d003      	beq.n	8006004 <TIM_Base_SetConfig+0xe8>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a0e      	ldr	r2, [pc, #56]	; (8006038 <TIM_Base_SetConfig+0x11c>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d103      	bne.n	800600c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	691a      	ldr	r2, [r3, #16]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	615a      	str	r2, [r3, #20]
}
 8006012:	bf00      	nop
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	40012c00 	.word	0x40012c00
 8006024:	40000400 	.word	0x40000400
 8006028:	40000800 	.word	0x40000800
 800602c:	40013400 	.word	0x40013400
 8006030:	40014000 	.word	0x40014000
 8006034:	40014400 	.word	0x40014400
 8006038:	40014800 	.word	0x40014800

0800603c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800603c:	b480      	push	{r7}
 800603e:	b087      	sub	sp, #28
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	f023 0201 	bic.w	r2, r3, #1
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800606a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800606e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f023 0303 	bic.w	r3, r3, #3
 8006076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	4313      	orrs	r3, r2
 8006080:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f023 0302 	bic.w	r3, r3, #2
 8006088:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	4313      	orrs	r3, r2
 8006092:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a2c      	ldr	r2, [pc, #176]	; (8006148 <TIM_OC1_SetConfig+0x10c>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d00f      	beq.n	80060bc <TIM_OC1_SetConfig+0x80>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a2b      	ldr	r2, [pc, #172]	; (800614c <TIM_OC1_SetConfig+0x110>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d00b      	beq.n	80060bc <TIM_OC1_SetConfig+0x80>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a2a      	ldr	r2, [pc, #168]	; (8006150 <TIM_OC1_SetConfig+0x114>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d007      	beq.n	80060bc <TIM_OC1_SetConfig+0x80>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a29      	ldr	r2, [pc, #164]	; (8006154 <TIM_OC1_SetConfig+0x118>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d003      	beq.n	80060bc <TIM_OC1_SetConfig+0x80>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a28      	ldr	r2, [pc, #160]	; (8006158 <TIM_OC1_SetConfig+0x11c>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d10c      	bne.n	80060d6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f023 0308 	bic.w	r3, r3, #8
 80060c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f023 0304 	bic.w	r3, r3, #4
 80060d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a1b      	ldr	r2, [pc, #108]	; (8006148 <TIM_OC1_SetConfig+0x10c>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d00f      	beq.n	80060fe <TIM_OC1_SetConfig+0xc2>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a1a      	ldr	r2, [pc, #104]	; (800614c <TIM_OC1_SetConfig+0x110>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d00b      	beq.n	80060fe <TIM_OC1_SetConfig+0xc2>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a19      	ldr	r2, [pc, #100]	; (8006150 <TIM_OC1_SetConfig+0x114>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d007      	beq.n	80060fe <TIM_OC1_SetConfig+0xc2>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a18      	ldr	r2, [pc, #96]	; (8006154 <TIM_OC1_SetConfig+0x118>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d003      	beq.n	80060fe <TIM_OC1_SetConfig+0xc2>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a17      	ldr	r2, [pc, #92]	; (8006158 <TIM_OC1_SetConfig+0x11c>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d111      	bne.n	8006122 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800610c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	4313      	orrs	r3, r2
 8006116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	4313      	orrs	r3, r2
 8006120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	621a      	str	r2, [r3, #32]
}
 800613c:	bf00      	nop
 800613e:	371c      	adds	r7, #28
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr
 8006148:	40012c00 	.word	0x40012c00
 800614c:	40013400 	.word	0x40013400
 8006150:	40014000 	.word	0x40014000
 8006154:	40014400 	.word	0x40014400
 8006158:	40014800 	.word	0x40014800

0800615c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	f023 0210 	bic.w	r2, r3, #16
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800618a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800618e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006196:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	021b      	lsls	r3, r3, #8
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	f023 0320 	bic.w	r3, r3, #32
 80061aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	011b      	lsls	r3, r3, #4
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a28      	ldr	r2, [pc, #160]	; (800625c <TIM_OC2_SetConfig+0x100>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d003      	beq.n	80061c8 <TIM_OC2_SetConfig+0x6c>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a27      	ldr	r2, [pc, #156]	; (8006260 <TIM_OC2_SetConfig+0x104>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d10d      	bne.n	80061e4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	011b      	lsls	r3, r3, #4
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	4313      	orrs	r3, r2
 80061da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a1d      	ldr	r2, [pc, #116]	; (800625c <TIM_OC2_SetConfig+0x100>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d00f      	beq.n	800620c <TIM_OC2_SetConfig+0xb0>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a1c      	ldr	r2, [pc, #112]	; (8006260 <TIM_OC2_SetConfig+0x104>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d00b      	beq.n	800620c <TIM_OC2_SetConfig+0xb0>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a1b      	ldr	r2, [pc, #108]	; (8006264 <TIM_OC2_SetConfig+0x108>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d007      	beq.n	800620c <TIM_OC2_SetConfig+0xb0>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a1a      	ldr	r2, [pc, #104]	; (8006268 <TIM_OC2_SetConfig+0x10c>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d003      	beq.n	800620c <TIM_OC2_SetConfig+0xb0>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a19      	ldr	r2, [pc, #100]	; (800626c <TIM_OC2_SetConfig+0x110>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d113      	bne.n	8006234 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006212:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800621a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	695b      	ldr	r3, [r3, #20]
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	4313      	orrs	r3, r2
 8006226:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	4313      	orrs	r3, r2
 8006232:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	685a      	ldr	r2, [r3, #4]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	621a      	str	r2, [r3, #32]
}
 800624e:	bf00      	nop
 8006250:	371c      	adds	r7, #28
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	40012c00 	.word	0x40012c00
 8006260:	40013400 	.word	0x40013400
 8006264:	40014000 	.word	0x40014000
 8006268:	40014400 	.word	0x40014400
 800626c:	40014800 	.word	0x40014800

08006270 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006270:	b480      	push	{r7}
 8006272:	b087      	sub	sp, #28
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800629e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f023 0303 	bic.w	r3, r3, #3
 80062aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	021b      	lsls	r3, r3, #8
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a27      	ldr	r2, [pc, #156]	; (800636c <TIM_OC3_SetConfig+0xfc>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d003      	beq.n	80062da <TIM_OC3_SetConfig+0x6a>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a26      	ldr	r2, [pc, #152]	; (8006370 <TIM_OC3_SetConfig+0x100>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d10d      	bne.n	80062f6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	021b      	lsls	r3, r3, #8
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a1c      	ldr	r2, [pc, #112]	; (800636c <TIM_OC3_SetConfig+0xfc>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d00f      	beq.n	800631e <TIM_OC3_SetConfig+0xae>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a1b      	ldr	r2, [pc, #108]	; (8006370 <TIM_OC3_SetConfig+0x100>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d00b      	beq.n	800631e <TIM_OC3_SetConfig+0xae>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a1a      	ldr	r2, [pc, #104]	; (8006374 <TIM_OC3_SetConfig+0x104>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d007      	beq.n	800631e <TIM_OC3_SetConfig+0xae>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a19      	ldr	r2, [pc, #100]	; (8006378 <TIM_OC3_SetConfig+0x108>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d003      	beq.n	800631e <TIM_OC3_SetConfig+0xae>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a18      	ldr	r2, [pc, #96]	; (800637c <TIM_OC3_SetConfig+0x10c>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d113      	bne.n	8006346 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006324:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800632c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	011b      	lsls	r3, r3, #4
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	4313      	orrs	r3, r2
 8006338:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	011b      	lsls	r3, r3, #4
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	4313      	orrs	r3, r2
 8006344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	685a      	ldr	r2, [r3, #4]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	621a      	str	r2, [r3, #32]
}
 8006360:	bf00      	nop
 8006362:	371c      	adds	r7, #28
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	40012c00 	.word	0x40012c00
 8006370:	40013400 	.word	0x40013400
 8006374:	40014000 	.word	0x40014000
 8006378:	40014400 	.word	0x40014400
 800637c:	40014800 	.word	0x40014800

08006380 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006380:	b480      	push	{r7}
 8006382:	b087      	sub	sp, #28
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	69db      	ldr	r3, [r3, #28]
 80063a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	021b      	lsls	r3, r3, #8
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	031b      	lsls	r3, r3, #12
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	4313      	orrs	r3, r2
 80063da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a28      	ldr	r2, [pc, #160]	; (8006480 <TIM_OC4_SetConfig+0x100>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d003      	beq.n	80063ec <TIM_OC4_SetConfig+0x6c>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a27      	ldr	r2, [pc, #156]	; (8006484 <TIM_OC4_SetConfig+0x104>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d10d      	bne.n	8006408 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	031b      	lsls	r3, r3, #12
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006406:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a1d      	ldr	r2, [pc, #116]	; (8006480 <TIM_OC4_SetConfig+0x100>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d00f      	beq.n	8006430 <TIM_OC4_SetConfig+0xb0>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a1c      	ldr	r2, [pc, #112]	; (8006484 <TIM_OC4_SetConfig+0x104>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d00b      	beq.n	8006430 <TIM_OC4_SetConfig+0xb0>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a1b      	ldr	r2, [pc, #108]	; (8006488 <TIM_OC4_SetConfig+0x108>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d007      	beq.n	8006430 <TIM_OC4_SetConfig+0xb0>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a1a      	ldr	r2, [pc, #104]	; (800648c <TIM_OC4_SetConfig+0x10c>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d003      	beq.n	8006430 <TIM_OC4_SetConfig+0xb0>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a19      	ldr	r2, [pc, #100]	; (8006490 <TIM_OC4_SetConfig+0x110>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d113      	bne.n	8006458 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006436:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800643e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	019b      	lsls	r3, r3, #6
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	4313      	orrs	r3, r2
 800644a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	019b      	lsls	r3, r3, #6
 8006452:	693a      	ldr	r2, [r7, #16]
 8006454:	4313      	orrs	r3, r2
 8006456:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	621a      	str	r2, [r3, #32]
}
 8006472:	bf00      	nop
 8006474:	371c      	adds	r7, #28
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	40012c00 	.word	0x40012c00
 8006484:	40013400 	.word	0x40013400
 8006488:	40014000 	.word	0x40014000
 800648c:	40014400 	.word	0x40014400
 8006490:	40014800 	.word	0x40014800

08006494 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006494:	b480      	push	{r7}
 8006496:	b087      	sub	sp, #28
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80064d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	041b      	lsls	r3, r3, #16
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a17      	ldr	r2, [pc, #92]	; (8006548 <TIM_OC5_SetConfig+0xb4>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d00f      	beq.n	800650e <TIM_OC5_SetConfig+0x7a>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a16      	ldr	r2, [pc, #88]	; (800654c <TIM_OC5_SetConfig+0xb8>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d00b      	beq.n	800650e <TIM_OC5_SetConfig+0x7a>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a15      	ldr	r2, [pc, #84]	; (8006550 <TIM_OC5_SetConfig+0xbc>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d007      	beq.n	800650e <TIM_OC5_SetConfig+0x7a>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a14      	ldr	r2, [pc, #80]	; (8006554 <TIM_OC5_SetConfig+0xc0>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d003      	beq.n	800650e <TIM_OC5_SetConfig+0x7a>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a13      	ldr	r2, [pc, #76]	; (8006558 <TIM_OC5_SetConfig+0xc4>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d109      	bne.n	8006522 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006514:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	021b      	lsls	r3, r3, #8
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	4313      	orrs	r3, r2
 8006520:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	621a      	str	r2, [r3, #32]
}
 800653c:	bf00      	nop
 800653e:	371c      	adds	r7, #28
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr
 8006548:	40012c00 	.word	0x40012c00
 800654c:	40013400 	.word	0x40013400
 8006550:	40014000 	.word	0x40014000
 8006554:	40014400 	.word	0x40014400
 8006558:	40014800 	.word	0x40014800

0800655c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800655c:	b480      	push	{r7}
 800655e:	b087      	sub	sp, #28
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800658a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800658e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	021b      	lsls	r3, r3, #8
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	4313      	orrs	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	051b      	lsls	r3, r3, #20
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a18      	ldr	r2, [pc, #96]	; (8006614 <TIM_OC6_SetConfig+0xb8>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d00f      	beq.n	80065d8 <TIM_OC6_SetConfig+0x7c>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a17      	ldr	r2, [pc, #92]	; (8006618 <TIM_OC6_SetConfig+0xbc>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d00b      	beq.n	80065d8 <TIM_OC6_SetConfig+0x7c>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a16      	ldr	r2, [pc, #88]	; (800661c <TIM_OC6_SetConfig+0xc0>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d007      	beq.n	80065d8 <TIM_OC6_SetConfig+0x7c>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a15      	ldr	r2, [pc, #84]	; (8006620 <TIM_OC6_SetConfig+0xc4>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d003      	beq.n	80065d8 <TIM_OC6_SetConfig+0x7c>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a14      	ldr	r2, [pc, #80]	; (8006624 <TIM_OC6_SetConfig+0xc8>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d109      	bne.n	80065ec <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	695b      	ldr	r3, [r3, #20]
 80065e4:	029b      	lsls	r3, r3, #10
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	685a      	ldr	r2, [r3, #4]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	621a      	str	r2, [r3, #32]
}
 8006606:	bf00      	nop
 8006608:	371c      	adds	r7, #28
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	40012c00 	.word	0x40012c00
 8006618:	40013400 	.word	0x40013400
 800661c:	40014000 	.word	0x40014000
 8006620:	40014400 	.word	0x40014400
 8006624:	40014800 	.word	0x40014800

08006628 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006628:	b480      	push	{r7}
 800662a:	b087      	sub	sp, #28
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
 8006634:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	f023 0201 	bic.w	r2, r3, #1
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6a1b      	ldr	r3, [r3, #32]
 800664c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	4a24      	ldr	r2, [pc, #144]	; (80066e4 <TIM_TI1_SetConfig+0xbc>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d013      	beq.n	800667e <TIM_TI1_SetConfig+0x56>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800665c:	d00f      	beq.n	800667e <TIM_TI1_SetConfig+0x56>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	4a21      	ldr	r2, [pc, #132]	; (80066e8 <TIM_TI1_SetConfig+0xc0>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d00b      	beq.n	800667e <TIM_TI1_SetConfig+0x56>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	4a20      	ldr	r2, [pc, #128]	; (80066ec <TIM_TI1_SetConfig+0xc4>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d007      	beq.n	800667e <TIM_TI1_SetConfig+0x56>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	4a1f      	ldr	r2, [pc, #124]	; (80066f0 <TIM_TI1_SetConfig+0xc8>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d003      	beq.n	800667e <TIM_TI1_SetConfig+0x56>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	4a1e      	ldr	r2, [pc, #120]	; (80066f4 <TIM_TI1_SetConfig+0xcc>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d101      	bne.n	8006682 <TIM_TI1_SetConfig+0x5a>
 800667e:	2301      	movs	r3, #1
 8006680:	e000      	b.n	8006684 <TIM_TI1_SetConfig+0x5c>
 8006682:	2300      	movs	r3, #0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d008      	beq.n	800669a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f023 0303 	bic.w	r3, r3, #3
 800668e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4313      	orrs	r3, r2
 8006696:	617b      	str	r3, [r7, #20]
 8006698:	e003      	b.n	80066a2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f043 0301 	orr.w	r3, r3, #1
 80066a0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	011b      	lsls	r3, r3, #4
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	f023 030a 	bic.w	r3, r3, #10
 80066bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	f003 030a 	and.w	r3, r3, #10
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	621a      	str	r2, [r3, #32]
}
 80066d6:	bf00      	nop
 80066d8:	371c      	adds	r7, #28
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	40012c00 	.word	0x40012c00
 80066e8:	40000400 	.word	0x40000400
 80066ec:	40000800 	.word	0x40000800
 80066f0:	40013400 	.word	0x40013400
 80066f4:	40014000 	.word	0x40014000

080066f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b087      	sub	sp, #28
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6a1b      	ldr	r3, [r3, #32]
 8006708:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	f023 0201 	bic.w	r2, r3, #1
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006722:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	011b      	lsls	r3, r3, #4
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	4313      	orrs	r3, r2
 800672c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f023 030a 	bic.w	r3, r3, #10
 8006734:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	4313      	orrs	r3, r2
 800673c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	621a      	str	r2, [r3, #32]
}
 800674a:	bf00      	nop
 800674c:	371c      	adds	r7, #28
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006756:	b480      	push	{r7}
 8006758:	b087      	sub	sp, #28
 800675a:	af00      	add	r7, sp, #0
 800675c:	60f8      	str	r0, [r7, #12]
 800675e:	60b9      	str	r1, [r7, #8]
 8006760:	607a      	str	r2, [r7, #4]
 8006762:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6a1b      	ldr	r3, [r3, #32]
 8006768:	f023 0210 	bic.w	r2, r3, #16
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006782:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	021b      	lsls	r3, r3, #8
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	4313      	orrs	r3, r2
 800678c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006794:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	031b      	lsls	r3, r3, #12
 800679a:	b29b      	uxth	r3, r3
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	4313      	orrs	r3, r2
 80067a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067a8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	011b      	lsls	r3, r3, #4
 80067ae:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	621a      	str	r2, [r3, #32]
}
 80067c4:	bf00      	nop
 80067c6:	371c      	adds	r7, #28
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b087      	sub	sp, #28
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6a1b      	ldr	r3, [r3, #32]
 80067e0:	f023 0210 	bic.w	r2, r3, #16
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	031b      	lsls	r3, r3, #12
 8006800:	697a      	ldr	r2, [r7, #20]
 8006802:	4313      	orrs	r3, r2
 8006804:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800680c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	011b      	lsls	r3, r3, #4
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	4313      	orrs	r3, r2
 8006816:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	621a      	str	r2, [r3, #32]
}
 8006824:	bf00      	nop
 8006826:	371c      	adds	r7, #28
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
 800683c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6a1b      	ldr	r3, [r3, #32]
 8006854:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f023 0303 	bic.w	r3, r3, #3
 800685c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4313      	orrs	r3, r2
 8006864:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800686c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	011b      	lsls	r3, r3, #4
 8006872:	b2db      	uxtb	r3, r3
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	4313      	orrs	r3, r2
 8006878:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006880:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	021b      	lsls	r3, r3, #8
 8006886:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	4313      	orrs	r3, r2
 800688e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	621a      	str	r2, [r3, #32]
}
 800689c:	bf00      	nop
 800689e:	371c      	adds	r7, #28
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b087      	sub	sp, #28
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
 80068b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	69db      	ldr	r3, [r3, #28]
 80068c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6a1b      	ldr	r3, [r3, #32]
 80068cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	021b      	lsls	r3, r3, #8
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	4313      	orrs	r3, r2
 80068de:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068e6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	031b      	lsls	r3, r3, #12
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	697a      	ldr	r2, [r7, #20]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80068fa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	031b      	lsls	r3, r3, #12
 8006900:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	4313      	orrs	r3, r2
 8006908:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	697a      	ldr	r2, [r7, #20]
 800690e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	621a      	str	r2, [r3, #32]
}
 8006916:	bf00      	nop
 8006918:	371c      	adds	r7, #28
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006922:	b480      	push	{r7}
 8006924:	b085      	sub	sp, #20
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
 800692a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800693c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	4313      	orrs	r3, r2
 8006944:	f043 0307 	orr.w	r3, r3, #7
 8006948:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	609a      	str	r2, [r3, #8]
}
 8006950:	bf00      	nop
 8006952:	3714      	adds	r7, #20
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800695c:	b480      	push	{r7}
 800695e:	b087      	sub	sp, #28
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
 8006968:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006976:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	021a      	lsls	r2, r3, #8
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	431a      	orrs	r2, r3
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	4313      	orrs	r3, r2
 8006984:	697a      	ldr	r2, [r7, #20]
 8006986:	4313      	orrs	r3, r2
 8006988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	697a      	ldr	r2, [r7, #20]
 800698e:	609a      	str	r2, [r3, #8]
}
 8006990:	bf00      	nop
 8006992:	371c      	adds	r7, #28
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800699c:	b480      	push	{r7}
 800699e:	b087      	sub	sp, #28
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	f003 031f 	and.w	r3, r3, #31
 80069ae:	2201      	movs	r2, #1
 80069b0:	fa02 f303 	lsl.w	r3, r2, r3
 80069b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6a1a      	ldr	r2, [r3, #32]
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	43db      	mvns	r3, r3
 80069be:	401a      	ands	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6a1a      	ldr	r2, [r3, #32]
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	f003 031f 	and.w	r3, r3, #31
 80069ce:	6879      	ldr	r1, [r7, #4]
 80069d0:	fa01 f303 	lsl.w	r3, r1, r3
 80069d4:	431a      	orrs	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	621a      	str	r2, [r3, #32]
}
 80069da:	bf00      	nop
 80069dc:	371c      	adds	r7, #28
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
	...

080069e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d101      	bne.n	8006a00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069fc:	2302      	movs	r3, #2
 80069fe:	e065      	b.n	8006acc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a2c      	ldr	r2, [pc, #176]	; (8006ad8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d004      	beq.n	8006a34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a2b      	ldr	r2, [pc, #172]	; (8006adc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d108      	bne.n	8006a46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a1b      	ldr	r2, [pc, #108]	; (8006ad8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d018      	beq.n	8006aa0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a76:	d013      	beq.n	8006aa0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a18      	ldr	r2, [pc, #96]	; (8006ae0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d00e      	beq.n	8006aa0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a17      	ldr	r2, [pc, #92]	; (8006ae4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d009      	beq.n	8006aa0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a12      	ldr	r2, [pc, #72]	; (8006adc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d004      	beq.n	8006aa0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a13      	ldr	r2, [pc, #76]	; (8006ae8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d10c      	bne.n	8006aba <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006aa6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68ba      	ldr	r2, [r7, #8]
 8006ab8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr
 8006ad8:	40012c00 	.word	0x40012c00
 8006adc:	40013400 	.word	0x40013400
 8006ae0:	40000400 	.word	0x40000400
 8006ae4:	40000800 	.word	0x40000800
 8006ae8:	40014000 	.word	0x40014000

08006aec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006af6:	2300      	movs	r3, #0
 8006af8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d101      	bne.n	8006b08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b04:	2302      	movs	r3, #2
 8006b06:	e087      	b.n	8006c18 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	695b      	ldr	r3, [r3, #20]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	699b      	ldr	r3, [r3, #24]
 8006b7c:	041b      	lsls	r3, r3, #16
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a27      	ldr	r2, [pc, #156]	; (8006c24 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d004      	beq.n	8006b96 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a25      	ldr	r2, [pc, #148]	; (8006c28 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d106      	bne.n	8006ba4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	69db      	ldr	r3, [r3, #28]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a1e      	ldr	r2, [pc, #120]	; (8006c24 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d004      	beq.n	8006bb8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a1d      	ldr	r2, [pc, #116]	; (8006c28 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d126      	bne.n	8006c06 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc2:	051b      	lsls	r3, r3, #20
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be0:	4313      	orrs	r3, r2
 8006be2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a0e      	ldr	r2, [pc, #56]	; (8006c24 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d004      	beq.n	8006bf8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a0d      	ldr	r2, [pc, #52]	; (8006c28 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d106      	bne.n	8006c06 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c02:	4313      	orrs	r3, r2
 8006c04:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3714      	adds	r7, #20
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr
 8006c24:	40012c00 	.word	0x40012c00
 8006c28:	40013400 	.word	0x40013400

08006c2c <HAL_TIMEx_TISelection>:
  *         (**) Register not available in all devices.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_TIMEx_TISelection(TIM_HandleTypeDef *htim, uint32_t TISelection, uint32_t Channel)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b087      	sub	sp, #28
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_TIM_TISEL_TIX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_TISEL(TISelection));

  __HAL_LOCK(htim);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d101      	bne.n	8006c4a <HAL_TIMEx_TISelection+0x1e>
 8006c46:	2302      	movs	r3, #2
 8006c48:	e073      	b.n	8006d32 <HAL_TIMEx_TISelection+0x106>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b0c      	cmp	r3, #12
 8006c56:	d864      	bhi.n	8006d22 <HAL_TIMEx_TISelection+0xf6>
 8006c58:	a201      	add	r2, pc, #4	; (adr r2, 8006c60 <HAL_TIMEx_TISelection+0x34>)
 8006c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c5e:	bf00      	nop
 8006c60:	08006c95 	.word	0x08006c95
 8006c64:	08006d23 	.word	0x08006d23
 8006c68:	08006d23 	.word	0x08006d23
 8006c6c:	08006d23 	.word	0x08006d23
 8006c70:	08006ce1 	.word	0x08006ce1
 8006c74:	08006d23 	.word	0x08006d23
 8006c78:	08006d23 	.word	0x08006d23
 8006c7c:	08006d23 	.word	0x08006d23
 8006c80:	08006cf7 	.word	0x08006cf7
 8006c84:	08006d23 	.word	0x08006d23
 8006c88:	08006d23 	.word	0x08006d23
 8006c8c:	08006d23 	.word	0x08006d23
 8006c90:	08006d0d 	.word	0x08006d0d

  switch (Channel)
  {
    case TIM_CHANNEL_1:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI1SEL, TISelection);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c9a:	f023 010f 	bic.w	r1, r3, #15
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	430a      	orrs	r2, r1
 8006ca6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* If required, set OR bit to request HSE/32 clock */
      if (IS_TIM_HSE32_INSTANCE(htim->Instance))
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a24      	ldr	r2, [pc, #144]	; (8006d40 <HAL_TIMEx_TISelection+0x114>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d004      	beq.n	8006cbc <HAL_TIMEx_TISelection+0x90>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a23      	ldr	r2, [pc, #140]	; (8006d44 <HAL_TIMEx_TISelection+0x118>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d108      	bne.n	8006cce <HAL_TIMEx_TISelection+0xa2>
      {
        SET_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f042 0201 	orr.w	r2, r2, #1
 8006cca:	669a      	str	r2, [r3, #104]	; 0x68
      }
      else
      {
        CLEAR_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
      }
      break;
 8006ccc:	e02c      	b.n	8006d28 <HAL_TIMEx_TISelection+0xfc>
        CLEAR_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f022 0201 	bic.w	r2, r2, #1
 8006cdc:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006cde:	e023      	b.n	8006d28 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_2:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI2SEL, TISelection);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ce6:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	430a      	orrs	r2, r1
 8006cf2:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8006cf4:	e018      	b.n	8006d28 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_3:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI3SEL, TISelection);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cfc:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	430a      	orrs	r2, r1
 8006d08:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8006d0a:	e00d      	b.n	8006d28 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_4:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI4SEL, TISelection);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d12:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	430a      	orrs	r2, r1
 8006d1e:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8006d20:	e002      	b.n	8006d28 <HAL_TIMEx_TISelection+0xfc>
    default:
      status = HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	75fb      	strb	r3, [r7, #23]
      break;
 8006d26:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	371c      	adds	r7, #28
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop
 8006d40:	40014400 	.word	0x40014400
 8006d44:	40014800 	.word	0x40014800

08006d48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d50:	bf00      	nop
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <__libc_init_array>:
 8006dd4:	b570      	push	{r4, r5, r6, lr}
 8006dd6:	4d0d      	ldr	r5, [pc, #52]	; (8006e0c <__libc_init_array+0x38>)
 8006dd8:	4c0d      	ldr	r4, [pc, #52]	; (8006e10 <__libc_init_array+0x3c>)
 8006dda:	1b64      	subs	r4, r4, r5
 8006ddc:	10a4      	asrs	r4, r4, #2
 8006dde:	2600      	movs	r6, #0
 8006de0:	42a6      	cmp	r6, r4
 8006de2:	d109      	bne.n	8006df8 <__libc_init_array+0x24>
 8006de4:	4d0b      	ldr	r5, [pc, #44]	; (8006e14 <__libc_init_array+0x40>)
 8006de6:	4c0c      	ldr	r4, [pc, #48]	; (8006e18 <__libc_init_array+0x44>)
 8006de8:	f000 f820 	bl	8006e2c <_init>
 8006dec:	1b64      	subs	r4, r4, r5
 8006dee:	10a4      	asrs	r4, r4, #2
 8006df0:	2600      	movs	r6, #0
 8006df2:	42a6      	cmp	r6, r4
 8006df4:	d105      	bne.n	8006e02 <__libc_init_array+0x2e>
 8006df6:	bd70      	pop	{r4, r5, r6, pc}
 8006df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dfc:	4798      	blx	r3
 8006dfe:	3601      	adds	r6, #1
 8006e00:	e7ee      	b.n	8006de0 <__libc_init_array+0xc>
 8006e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e06:	4798      	blx	r3
 8006e08:	3601      	adds	r6, #1
 8006e0a:	e7f2      	b.n	8006df2 <__libc_init_array+0x1e>
 8006e0c:	08006e54 	.word	0x08006e54
 8006e10:	08006e54 	.word	0x08006e54
 8006e14:	08006e54 	.word	0x08006e54
 8006e18:	08006e58 	.word	0x08006e58

08006e1c <memset>:
 8006e1c:	4402      	add	r2, r0
 8006e1e:	4603      	mov	r3, r0
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d100      	bne.n	8006e26 <memset+0xa>
 8006e24:	4770      	bx	lr
 8006e26:	f803 1b01 	strb.w	r1, [r3], #1
 8006e2a:	e7f9      	b.n	8006e20 <memset+0x4>

08006e2c <_init>:
 8006e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e2e:	bf00      	nop
 8006e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e32:	bc08      	pop	{r3}
 8006e34:	469e      	mov	lr, r3
 8006e36:	4770      	bx	lr

08006e38 <_fini>:
 8006e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e3a:	bf00      	nop
 8006e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e3e:	bc08      	pop	{r3}
 8006e40:	469e      	mov	lr, r3
 8006e42:	4770      	bx	lr
